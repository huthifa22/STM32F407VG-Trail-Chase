
TrailChase.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040e8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004278  08004278  00005278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042b8  080042b8  00006088  2**0
                  CONTENTS
  4 .ARM          00000008  080042b8  080042b8  000052b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080042c0  080042c0  00006088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042c0  080042c0  000052c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080042c4  080042c4  000052c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  080042c8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006088  2**0
                  CONTENTS
 10 .bss          00000564  20000088  20000088  00006088  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200005ec  200005ec  00006088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006088  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ac65  00000000  00000000  000060b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f72  00000000  00000000  00010d1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000910  00000000  00000000  00012c90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006ad  00000000  00000000  000135a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002242b  00000000  00000000  00013c4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b672  00000000  00000000  00036078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cac0b  00000000  00000000  000416ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010c2f5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002bbc  00000000  00000000  0010c338  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000099  00000000  00000000  0010eef4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004260 	.word	0x08004260

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	08004260 	.word	0x08004260

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <main>:

//Values always read because of ISR changes
volatile int button_pressed = 0;
volatile int reset_in_progress = 0;

int main(void) {
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0
    HAL_Init();
 8000276:	f000 fb6b 	bl	8000950 <HAL_Init>
    LED_Init();
 800027a:	f000 f89f 	bl	80003bc <LED_Init>
    Button_Init();
 800027e:	f000 f8cb 	bl	8000418 <Button_Init>
    current_led = 0;
 8000282:	4b46      	ldr	r3, [pc, #280]	@ (800039c <main+0x12c>)
 8000284:	2200      	movs	r2, #0
 8000286:	601a      	str	r2, [r3, #0]

    HAL_Delay(100);
 8000288:	2064      	movs	r0, #100	@ 0x64
 800028a:	f000 fbd3 	bl	8000a34 <HAL_Delay>

    while (1) {
    	if (reset_in_progress) continue;
 800028e:	4b44      	ldr	r3, [pc, #272]	@ (80003a0 <main+0x130>)
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	2b00      	cmp	r3, #0
 8000294:	d17f      	bne.n	8000396 <main+0x126>

        toggle_led(GPIO_PIN_SET, leds[current_led]);
 8000296:	4b41      	ldr	r3, [pc, #260]	@ (800039c <main+0x12c>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	4a42      	ldr	r2, [pc, #264]	@ (80003a4 <main+0x134>)
 800029c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80002a0:	4619      	mov	r1, r3
 80002a2:	2001      	movs	r0, #1
 80002a4:	f000 f8ec 	bl	8000480 <toggle_led>
        HAL_Delay(delay);
 80002a8:	4b3f      	ldr	r3, [pc, #252]	@ (80003a8 <main+0x138>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	4618      	mov	r0, r3
 80002ae:	f000 fbc1 	bl	8000a34 <HAL_Delay>
        toggle_led(GPIO_PIN_RESET, leds[current_led]);
 80002b2:	4b3a      	ldr	r3, [pc, #232]	@ (800039c <main+0x12c>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	4a3b      	ldr	r2, [pc, #236]	@ (80003a4 <main+0x134>)
 80002b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80002bc:	4619      	mov	r1, r3
 80002be:	2000      	movs	r0, #0
 80002c0:	f000 f8de 	bl	8000480 <toggle_led>

        led_change_time = HAL_GetTick();
 80002c4:	f000 fbaa 	bl	8000a1c <HAL_GetTick>
 80002c8:	4603      	mov	r3, r0
 80002ca:	4a38      	ldr	r2, [pc, #224]	@ (80003ac <main+0x13c>)
 80002cc:	6013      	str	r3, [r2, #0]
        current_led += direction; //Increment by direction (+1 or -1)
 80002ce:	4b33      	ldr	r3, [pc, #204]	@ (800039c <main+0x12c>)
 80002d0:	681a      	ldr	r2, [r3, #0]
 80002d2:	4b37      	ldr	r3, [pc, #220]	@ (80003b0 <main+0x140>)
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	4413      	add	r3, r2
 80002d8:	4a30      	ldr	r2, [pc, #192]	@ (800039c <main+0x12c>)
 80002da:	6013      	str	r3, [r2, #0]

        if (button_pressed && !reset_in_progress) {
 80002dc:	4b35      	ldr	r3, [pc, #212]	@ (80003b4 <main+0x144>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d028      	beq.n	8000336 <main+0xc6>
 80002e4:	4b2e      	ldr	r3, [pc, #184]	@ (80003a0 <main+0x130>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d124      	bne.n	8000336 <main+0xc6>
            button_pressed = 0;
 80002ec:	4b31      	ldr	r3, [pc, #196]	@ (80003b4 <main+0x144>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	601a      	str	r2, [r3, #0]
            uint32_t button_press_time = HAL_GetTick();
 80002f2:	f000 fb93 	bl	8000a1c <HAL_GetTick>
 80002f6:	6078      	str	r0, [r7, #4]

            if ((leds[current_led] == RED_LED1 || leds[current_led] == RED_LED2)) {
 80002f8:	4b28      	ldr	r3, [pc, #160]	@ (800039c <main+0x12c>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	4a29      	ldr	r2, [pc, #164]	@ (80003a4 <main+0x134>)
 80002fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000302:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000306:	d007      	beq.n	8000318 <main+0xa8>
 8000308:	4b24      	ldr	r3, [pc, #144]	@ (800039c <main+0x12c>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	4a25      	ldr	r2, [pc, #148]	@ (80003a4 <main+0x134>)
 800030e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000312:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000316:	d10c      	bne.n	8000332 <main+0xc2>
                if (button_press_time - led_change_time <= 2000) { //When LED turned on Minus when pressed
 8000318:	4b24      	ldr	r3, [pc, #144]	@ (80003ac <main+0x13c>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	687a      	ldr	r2, [r7, #4]
 800031e:	1ad3      	subs	r3, r2, r3
 8000320:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000324:	d802      	bhi.n	800032c <main+0xbc>
                    hit();
 8000326:	f000 f8bf 	bl	80004a8 <hit>
                if (button_press_time - led_change_time <= 2000) { //When LED turned on Minus when pressed
 800032a:	e004      	b.n	8000336 <main+0xc6>
                } else {
                    reset_game();
 800032c:	f000 f908 	bl	8000540 <reset_game>
                if (button_press_time - led_change_time <= 2000) { //When LED turned on Minus when pressed
 8000330:	e001      	b.n	8000336 <main+0xc6>
                }
            } else {
                reset_game();
 8000332:	f000 f905 	bl	8000540 <reset_game>
            }
        }
        //Change Direction
        if (current_led == num_leds - 1 || current_led == 0) {
 8000336:	4b20      	ldr	r3, [pc, #128]	@ (80003b8 <main+0x148>)
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	1e5a      	subs	r2, r3, #1
 800033c:	4b17      	ldr	r3, [pc, #92]	@ (800039c <main+0x12c>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	429a      	cmp	r2, r3
 8000342:	d003      	beq.n	800034c <main+0xdc>
 8000344:	4b15      	ldr	r3, [pc, #84]	@ (800039c <main+0x12c>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	2b00      	cmp	r3, #0
 800034a:	d1a0      	bne.n	800028e <main+0x1e>
            direction = -direction;
 800034c:	4b18      	ldr	r3, [pc, #96]	@ (80003b0 <main+0x140>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	425b      	negs	r3, r3
 8000352:	4a17      	ldr	r2, [pc, #92]	@ (80003b0 <main+0x140>)
 8000354:	6013      	str	r3, [r2, #0]

            if ((direction == 1 && current_led == num_leds - 1) || (direction == -1 && current_led == 0)) {
 8000356:	4b16      	ldr	r3, [pc, #88]	@ (80003b0 <main+0x140>)
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	2b01      	cmp	r3, #1
 800035c:	d106      	bne.n	800036c <main+0xfc>
 800035e:	4b16      	ldr	r3, [pc, #88]	@ (80003b8 <main+0x148>)
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	1e5a      	subs	r2, r3, #1
 8000364:	4b0d      	ldr	r3, [pc, #52]	@ (800039c <main+0x12c>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	429a      	cmp	r2, r3
 800036a:	d008      	beq.n	800037e <main+0x10e>
 800036c:	4b10      	ldr	r3, [pc, #64]	@ (80003b0 <main+0x140>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000374:	d18b      	bne.n	800028e <main+0x1e>
 8000376:	4b09      	ldr	r3, [pc, #36]	@ (800039c <main+0x12c>)
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	2b00      	cmp	r3, #0
 800037c:	d187      	bne.n	800028e <main+0x1e>
                if (!button_pressed && !reset_in_progress) {
 800037e:	4b0d      	ldr	r3, [pc, #52]	@ (80003b4 <main+0x144>)
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	2b00      	cmp	r3, #0
 8000384:	d183      	bne.n	800028e <main+0x1e>
 8000386:	4b06      	ldr	r3, [pc, #24]	@ (80003a0 <main+0x130>)
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	2b00      	cmp	r3, #0
 800038c:	f47f af7f 	bne.w	800028e <main+0x1e>
                    reset_game();
 8000390:	f000 f8d6 	bl	8000540 <reset_game>
 8000394:	e77b      	b.n	800028e <main+0x1e>
    	if (reset_in_progress) continue;
 8000396:	bf00      	nop
 8000398:	e779      	b.n	800028e <main+0x1e>
 800039a:	bf00      	nop
 800039c:	200000a4 	.word	0x200000a4
 80003a0:	200000b4 	.word	0x200000b4
 80003a4:	20000000 	.word	0x20000000
 80003a8:	2000001c 	.word	0x2000001c
 80003ac:	200000ac 	.word	0x200000ac
 80003b0:	20000018 	.word	0x20000018
 80003b4:	200000b0 	.word	0x200000b0
 80003b8:	20000014 	.word	0x20000014

080003bc <LED_Init>:
            }
        }
    }
}

void LED_Init(void) {
 80003bc:	b580      	push	{r7, lr}
 80003be:	b086      	sub	sp, #24
 80003c0:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80003c2:	2300      	movs	r3, #0
 80003c4:	603b      	str	r3, [r7, #0]
 80003c6:	4b12      	ldr	r3, [pc, #72]	@ (8000410 <LED_Init+0x54>)
 80003c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003ca:	4a11      	ldr	r2, [pc, #68]	@ (8000410 <LED_Init+0x54>)
 80003cc:	f043 0301 	orr.w	r3, r3, #1
 80003d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80003d2:	4b0f      	ldr	r3, [pc, #60]	@ (8000410 <LED_Init+0x54>)
 80003d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003d6:	f003 0301 	and.w	r3, r3, #1
 80003da:	603b      	str	r3, [r7, #0]
 80003dc:	683b      	ldr	r3, [r7, #0]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003de:	1d3b      	adds	r3, r7, #4
 80003e0:	2200      	movs	r2, #0
 80003e2:	601a      	str	r2, [r3, #0]
 80003e4:	605a      	str	r2, [r3, #4]
 80003e6:	609a      	str	r2, [r3, #8]
 80003e8:	60da      	str	r2, [r3, #12]
 80003ea:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = RED_LED1 | ORANGE_LED1 | YELLOW_LED1 |
 80003ec:	f240 33fe 	movw	r3, #1022	@ 0x3fe
 80003f0:	607b      	str	r3, [r7, #4]
                          GREEN_LED1 | GREEN_LED2 | GREEN_LED3 |
                          YELLOW_LED2 | ORANGE_LED2 | RED_LED2;
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003f2:	2301      	movs	r3, #1
 80003f4:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003f6:	2300      	movs	r3, #0
 80003f8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003fa:	2300      	movs	r3, #0
 80003fc:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003fe:	1d3b      	adds	r3, r7, #4
 8000400:	4619      	mov	r1, r3
 8000402:	4804      	ldr	r0, [pc, #16]	@ (8000414 <LED_Init+0x58>)
 8000404:	f000 fc4c 	bl	8000ca0 <HAL_GPIO_Init>
}
 8000408:	bf00      	nop
 800040a:	3718      	adds	r7, #24
 800040c:	46bd      	mov	sp, r7
 800040e:	bd80      	pop	{r7, pc}
 8000410:	40023800 	.word	0x40023800
 8000414:	40020000 	.word	0x40020000

08000418 <Button_Init>:

void Button_Init(void) {
 8000418:	b580      	push	{r7, lr}
 800041a:	b086      	sub	sp, #24
 800041c:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800041e:	2300      	movs	r3, #0
 8000420:	603b      	str	r3, [r7, #0]
 8000422:	4b15      	ldr	r3, [pc, #84]	@ (8000478 <Button_Init+0x60>)
 8000424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000426:	4a14      	ldr	r2, [pc, #80]	@ (8000478 <Button_Init+0x60>)
 8000428:	f043 0301 	orr.w	r3, r3, #1
 800042c:	6313      	str	r3, [r2, #48]	@ 0x30
 800042e:	4b12      	ldr	r3, [pc, #72]	@ (8000478 <Button_Init+0x60>)
 8000430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000432:	f003 0301 	and.w	r3, r3, #1
 8000436:	603b      	str	r3, [r7, #0]
 8000438:	683b      	ldr	r3, [r7, #0]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800043a:	1d3b      	adds	r3, r7, #4
 800043c:	2200      	movs	r2, #0
 800043e:	601a      	str	r2, [r3, #0]
 8000440:	605a      	str	r2, [r3, #4]
 8000442:	609a      	str	r2, [r3, #8]
 8000444:	60da      	str	r2, [r3, #12]
 8000446:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = JOYSTICK_BUTTON;
 8000448:	2301      	movs	r3, #1
 800044a:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800044c:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000450:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000452:	2300      	movs	r3, #0
 8000454:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000456:	1d3b      	adds	r3, r7, #4
 8000458:	4619      	mov	r1, r3
 800045a:	4808      	ldr	r0, [pc, #32]	@ (800047c <Button_Init+0x64>)
 800045c:	f000 fc20 	bl	8000ca0 <HAL_GPIO_Init>

    //Interrupt priority and sub priority for JoyStick press
    HAL_NVIC_SetPriority(EXTI0_IRQn, 2, 0);
 8000460:	2200      	movs	r2, #0
 8000462:	2102      	movs	r1, #2
 8000464:	2006      	movs	r0, #6
 8000466:	f000 fbe4 	bl	8000c32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800046a:	2006      	movs	r0, #6
 800046c:	f000 fbfd 	bl	8000c6a <HAL_NVIC_EnableIRQ>
}
 8000470:	bf00      	nop
 8000472:	3718      	adds	r7, #24
 8000474:	46bd      	mov	sp, r7
 8000476:	bd80      	pop	{r7, pc}
 8000478:	40023800 	.word	0x40023800
 800047c:	40020000 	.word	0x40020000

08000480 <toggle_led>:

void toggle_led(GPIO_PinState state, uint16_t led_pin) {
 8000480:	b580      	push	{r7, lr}
 8000482:	b082      	sub	sp, #8
 8000484:	af00      	add	r7, sp, #0
 8000486:	4603      	mov	r3, r0
 8000488:	460a      	mov	r2, r1
 800048a:	71fb      	strb	r3, [r7, #7]
 800048c:	4613      	mov	r3, r2
 800048e:	80bb      	strh	r3, [r7, #4]
    HAL_GPIO_WritePin(GPIOA, led_pin, state);
 8000490:	79fa      	ldrb	r2, [r7, #7]
 8000492:	88bb      	ldrh	r3, [r7, #4]
 8000494:	4619      	mov	r1, r3
 8000496:	4803      	ldr	r0, [pc, #12]	@ (80004a4 <toggle_led+0x24>)
 8000498:	f000 fdb6 	bl	8001008 <HAL_GPIO_WritePin>
}
 800049c:	bf00      	nop
 800049e:	3708      	adds	r7, #8
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bd80      	pop	{r7, pc}
 80004a4:	40020000 	.word	0x40020000

080004a8 <hit>:

void hit(void) {
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af00      	add	r7, sp, #0
	//Blink 3 green LEDS in middle 3 times
    for (int i = 0; i < 3; i++) {
 80004ae:	2300      	movs	r3, #0
 80004b0:	607b      	str	r3, [r7, #4]
 80004b2:	e020      	b.n	80004f6 <hit+0x4e>
        toggle_led(GPIO_PIN_SET, GREEN_LED1);
 80004b4:	2108      	movs	r1, #8
 80004b6:	2001      	movs	r0, #1
 80004b8:	f7ff ffe2 	bl	8000480 <toggle_led>
        toggle_led(GPIO_PIN_SET, GREEN_LED2);
 80004bc:	2110      	movs	r1, #16
 80004be:	2001      	movs	r0, #1
 80004c0:	f7ff ffde 	bl	8000480 <toggle_led>
        toggle_led(GPIO_PIN_SET, GREEN_LED3);
 80004c4:	2120      	movs	r1, #32
 80004c6:	2001      	movs	r0, #1
 80004c8:	f7ff ffda 	bl	8000480 <toggle_led>
        HAL_Delay(80);
 80004cc:	2050      	movs	r0, #80	@ 0x50
 80004ce:	f000 fab1 	bl	8000a34 <HAL_Delay>
        toggle_led(GPIO_PIN_RESET, GREEN_LED1);
 80004d2:	2108      	movs	r1, #8
 80004d4:	2000      	movs	r0, #0
 80004d6:	f7ff ffd3 	bl	8000480 <toggle_led>
        toggle_led(GPIO_PIN_RESET, GREEN_LED2);
 80004da:	2110      	movs	r1, #16
 80004dc:	2000      	movs	r0, #0
 80004de:	f7ff ffcf 	bl	8000480 <toggle_led>
        toggle_led(GPIO_PIN_RESET, GREEN_LED3);
 80004e2:	2120      	movs	r1, #32
 80004e4:	2000      	movs	r0, #0
 80004e6:	f7ff ffcb 	bl	8000480 <toggle_led>
        HAL_Delay(80);
 80004ea:	2050      	movs	r0, #80	@ 0x50
 80004ec:	f000 faa2 	bl	8000a34 <HAL_Delay>
    for (int i = 0; i < 3; i++) {
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	3301      	adds	r3, #1
 80004f4:	607b      	str	r3, [r7, #4]
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	2b02      	cmp	r3, #2
 80004fa:	dddb      	ble.n	80004b4 <hit+0xc>
    }
    //Update Score and increase speed until 40
    score++;
 80004fc:	4b0d      	ldr	r3, [pc, #52]	@ (8000534 <hit+0x8c>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	3301      	adds	r3, #1
 8000502:	4a0c      	ldr	r2, [pc, #48]	@ (8000534 <hit+0x8c>)
 8000504:	6013      	str	r3, [r2, #0]
    delay = delay > 40 ? delay - 20 : delay;
 8000506:	4b0c      	ldr	r3, [pc, #48]	@ (8000538 <hit+0x90>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	2b28      	cmp	r3, #40	@ 0x28
 800050c:	dd03      	ble.n	8000516 <hit+0x6e>
 800050e:	4b0a      	ldr	r3, [pc, #40]	@ (8000538 <hit+0x90>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	3b14      	subs	r3, #20
 8000514:	e001      	b.n	800051a <hit+0x72>
 8000516:	4b08      	ldr	r3, [pc, #32]	@ (8000538 <hit+0x90>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	4a07      	ldr	r2, [pc, #28]	@ (8000538 <hit+0x90>)
 800051c:	6013      	str	r3, [r2, #0]
    printf("Score: %d\n", score);
 800051e:	4b05      	ldr	r3, [pc, #20]	@ (8000534 <hit+0x8c>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	4619      	mov	r1, r3
 8000524:	4805      	ldr	r0, [pc, #20]	@ (800053c <hit+0x94>)
 8000526:	f003 f8db 	bl	80036e0 <iprintf>
}
 800052a:	bf00      	nop
 800052c:	3708      	adds	r7, #8
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	200000a8 	.word	0x200000a8
 8000538:	2000001c 	.word	0x2000001c
 800053c:	08004278 	.word	0x08004278

08000540 <reset_game>:

void reset_game(void) {
 8000540:	b580      	push	{r7, lr}
 8000542:	b084      	sub	sp, #16
 8000544:	af00      	add	r7, sp, #0
    if (reset_in_progress) {
 8000546:	4b35      	ldr	r3, [pc, #212]	@ (800061c <reset_game+0xdc>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	2b00      	cmp	r3, #0
 800054c:	d162      	bne.n	8000614 <reset_game+0xd4>
        return;
    }
    reset_in_progress = 1;
 800054e:	4b33      	ldr	r3, [pc, #204]	@ (800061c <reset_game+0xdc>)
 8000550:	2201      	movs	r2, #1
 8000552:	601a      	str	r2, [r3, #0]

    //Blink 3 Times to show restart
    for (int i = 0; i < 3; i++) {
 8000554:	2300      	movs	r3, #0
 8000556:	60fb      	str	r3, [r7, #12]
 8000558:	e03a      	b.n	80005d0 <reset_game+0x90>
        for (int j = 0; j < num_leds; j++) {
 800055a:	2300      	movs	r3, #0
 800055c:	60bb      	str	r3, [r7, #8]
 800055e:	e010      	b.n	8000582 <reset_game+0x42>
        	 if (j < 3 || j > 5) {
 8000560:	68bb      	ldr	r3, [r7, #8]
 8000562:	2b02      	cmp	r3, #2
 8000564:	dd02      	ble.n	800056c <reset_game+0x2c>
 8000566:	68bb      	ldr	r3, [r7, #8]
 8000568:	2b05      	cmp	r3, #5
 800056a:	dd07      	ble.n	800057c <reset_game+0x3c>
        		toggle_led(GPIO_PIN_SET, leds[j]);
 800056c:	4a2c      	ldr	r2, [pc, #176]	@ (8000620 <reset_game+0xe0>)
 800056e:	68bb      	ldr	r3, [r7, #8]
 8000570:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000574:	4619      	mov	r1, r3
 8000576:	2001      	movs	r0, #1
 8000578:	f7ff ff82 	bl	8000480 <toggle_led>
        for (int j = 0; j < num_leds; j++) {
 800057c:	68bb      	ldr	r3, [r7, #8]
 800057e:	3301      	adds	r3, #1
 8000580:	60bb      	str	r3, [r7, #8]
 8000582:	4b28      	ldr	r3, [pc, #160]	@ (8000624 <reset_game+0xe4>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	68ba      	ldr	r2, [r7, #8]
 8000588:	429a      	cmp	r2, r3
 800058a:	dbe9      	blt.n	8000560 <reset_game+0x20>
        	}

        }
        HAL_Delay(100);
 800058c:	2064      	movs	r0, #100	@ 0x64
 800058e:	f000 fa51 	bl	8000a34 <HAL_Delay>
        for (int j = 0; j < num_leds; j++) {
 8000592:	2300      	movs	r3, #0
 8000594:	607b      	str	r3, [r7, #4]
 8000596:	e010      	b.n	80005ba <reset_game+0x7a>
        	 if (j < 3 || j > 5) {
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	2b02      	cmp	r3, #2
 800059c:	dd02      	ble.n	80005a4 <reset_game+0x64>
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	2b05      	cmp	r3, #5
 80005a2:	dd07      	ble.n	80005b4 <reset_game+0x74>
        		toggle_led(GPIO_PIN_RESET, leds[j]);
 80005a4:	4a1e      	ldr	r2, [pc, #120]	@ (8000620 <reset_game+0xe0>)
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005ac:	4619      	mov	r1, r3
 80005ae:	2000      	movs	r0, #0
 80005b0:	f7ff ff66 	bl	8000480 <toggle_led>
        for (int j = 0; j < num_leds; j++) {
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	3301      	adds	r3, #1
 80005b8:	607b      	str	r3, [r7, #4]
 80005ba:	4b1a      	ldr	r3, [pc, #104]	@ (8000624 <reset_game+0xe4>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	687a      	ldr	r2, [r7, #4]
 80005c0:	429a      	cmp	r2, r3
 80005c2:	dbe9      	blt.n	8000598 <reset_game+0x58>
        	}
        }
        HAL_Delay(100);
 80005c4:	2064      	movs	r0, #100	@ 0x64
 80005c6:	f000 fa35 	bl	8000a34 <HAL_Delay>
    for (int i = 0; i < 3; i++) {
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	3301      	adds	r3, #1
 80005ce:	60fb      	str	r3, [r7, #12]
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	2b02      	cmp	r3, #2
 80005d4:	ddc1      	ble.n	800055a <reset_game+0x1a>
    }
    //Reset vars
    score = 0;
 80005d6:	4b14      	ldr	r3, [pc, #80]	@ (8000628 <reset_game+0xe8>)
 80005d8:	2200      	movs	r2, #0
 80005da:	601a      	str	r2, [r3, #0]
    printf("Score: %d\n", score);
 80005dc:	4b12      	ldr	r3, [pc, #72]	@ (8000628 <reset_game+0xe8>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4619      	mov	r1, r3
 80005e2:	4812      	ldr	r0, [pc, #72]	@ (800062c <reset_game+0xec>)
 80005e4:	f003 f87c 	bl	80036e0 <iprintf>
    delay = 460;
 80005e8:	4b11      	ldr	r3, [pc, #68]	@ (8000630 <reset_game+0xf0>)
 80005ea:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 80005ee:	601a      	str	r2, [r3, #0]
    current_led = 0;
 80005f0:	4b10      	ldr	r3, [pc, #64]	@ (8000634 <reset_game+0xf4>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
    direction = 1;
 80005f6:	4b10      	ldr	r3, [pc, #64]	@ (8000638 <reset_game+0xf8>)
 80005f8:	2201      	movs	r2, #1
 80005fa:	601a      	str	r2, [r3, #0]

    // Wait till button release
    while (HAL_GPIO_ReadPin(GPIOA, JOYSTICK_BUTTON) == GPIO_PIN_SET);
 80005fc:	bf00      	nop
 80005fe:	2101      	movs	r1, #1
 8000600:	480e      	ldr	r0, [pc, #56]	@ (800063c <reset_game+0xfc>)
 8000602:	f000 fce9 	bl	8000fd8 <HAL_GPIO_ReadPin>
 8000606:	4603      	mov	r3, r0
 8000608:	2b01      	cmp	r3, #1
 800060a:	d0f8      	beq.n	80005fe <reset_game+0xbe>

    reset_in_progress = 0;
 800060c:	4b03      	ldr	r3, [pc, #12]	@ (800061c <reset_game+0xdc>)
 800060e:	2200      	movs	r2, #0
 8000610:	601a      	str	r2, [r3, #0]
 8000612:	e000      	b.n	8000616 <reset_game+0xd6>
        return;
 8000614:	bf00      	nop
}
 8000616:	3710      	adds	r7, #16
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	200000b4 	.word	0x200000b4
 8000620:	20000000 	.word	0x20000000
 8000624:	20000014 	.word	0x20000014
 8000628:	200000a8 	.word	0x200000a8
 800062c:	08004278 	.word	0x08004278
 8000630:	2000001c 	.word	0x2000001c
 8000634:	200000a4 	.word	0x200000a4
 8000638:	20000018 	.word	0x20000018
 800063c:	40020000 	.word	0x40020000

08000640 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void) {
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
	// Check if interrupt triggered by JoyStick
    if (__HAL_GPIO_EXTI_GET_IT(JOYSTICK_BUTTON) != RESET) {
 8000644:	4b0a      	ldr	r3, [pc, #40]	@ (8000670 <EXTI0_IRQHandler+0x30>)
 8000646:	695b      	ldr	r3, [r3, #20]
 8000648:	f003 0301 	and.w	r3, r3, #1
 800064c:	2b00      	cmp	r3, #0
 800064e:	d009      	beq.n	8000664 <EXTI0_IRQHandler+0x24>

    	//Clear flag
        __HAL_GPIO_EXTI_CLEAR_IT(JOYSTICK_BUTTON);
 8000650:	4b07      	ldr	r3, [pc, #28]	@ (8000670 <EXTI0_IRQHandler+0x30>)
 8000652:	2201      	movs	r2, #1
 8000654:	615a      	str	r2, [r3, #20]

        //If not reset state indicate its been pressed
        if (!reset_in_progress) {
 8000656:	4b07      	ldr	r3, [pc, #28]	@ (8000674 <EXTI0_IRQHandler+0x34>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	2b00      	cmp	r3, #0
 800065c:	d102      	bne.n	8000664 <EXTI0_IRQHandler+0x24>
            button_pressed = 1;
 800065e:	4b06      	ldr	r3, [pc, #24]	@ (8000678 <EXTI0_IRQHandler+0x38>)
 8000660:	2201      	movs	r2, #1
 8000662:	601a      	str	r2, [r3, #0]
        }
    }
}
 8000664:	bf00      	nop
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	40013c00 	.word	0x40013c00
 8000674:	200000b4 	.word	0x200000b4
 8000678:	200000b0 	.word	0x200000b0

0800067c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000682:	2300      	movs	r3, #0
 8000684:	607b      	str	r3, [r7, #4]
 8000686:	4b10      	ldr	r3, [pc, #64]	@ (80006c8 <HAL_MspInit+0x4c>)
 8000688:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800068a:	4a0f      	ldr	r2, [pc, #60]	@ (80006c8 <HAL_MspInit+0x4c>)
 800068c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000690:	6453      	str	r3, [r2, #68]	@ 0x44
 8000692:	4b0d      	ldr	r3, [pc, #52]	@ (80006c8 <HAL_MspInit+0x4c>)
 8000694:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000696:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800069a:	607b      	str	r3, [r7, #4]
 800069c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800069e:	2300      	movs	r3, #0
 80006a0:	603b      	str	r3, [r7, #0]
 80006a2:	4b09      	ldr	r3, [pc, #36]	@ (80006c8 <HAL_MspInit+0x4c>)
 80006a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006a6:	4a08      	ldr	r2, [pc, #32]	@ (80006c8 <HAL_MspInit+0x4c>)
 80006a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80006ae:	4b06      	ldr	r3, [pc, #24]	@ (80006c8 <HAL_MspInit+0x4c>)
 80006b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006b6:	603b      	str	r3, [r7, #0]
 80006b8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80006ba:	2007      	movs	r0, #7
 80006bc:	f000 faae 	bl	8000c1c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006c0:	bf00      	nop
 80006c2:	3708      	adds	r7, #8
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	40023800 	.word	0x40023800

080006cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006d0:	bf00      	nop
 80006d2:	e7fd      	b.n	80006d0 <NMI_Handler+0x4>

080006d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006d8:	bf00      	nop
 80006da:	e7fd      	b.n	80006d8 <HardFault_Handler+0x4>

080006dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006e0:	bf00      	nop
 80006e2:	e7fd      	b.n	80006e0 <MemManage_Handler+0x4>

080006e4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006e8:	bf00      	nop
 80006ea:	e7fd      	b.n	80006e8 <BusFault_Handler+0x4>

080006ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006f0:	bf00      	nop
 80006f2:	e7fd      	b.n	80006f0 <UsageFault_Handler+0x4>

080006f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006f8:	bf00      	nop
 80006fa:	46bd      	mov	sp, r7
 80006fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000700:	4770      	bx	lr

08000702 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000702:	b480      	push	{r7}
 8000704:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000706:	bf00      	nop
 8000708:	46bd      	mov	sp, r7
 800070a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070e:	4770      	bx	lr

08000710 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000714:	bf00      	nop
 8000716:	46bd      	mov	sp, r7
 8000718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071c:	4770      	bx	lr

0800071e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800071e:	b580      	push	{r7, lr}
 8000720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000722:	f000 f967 	bl	80009f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000726:	bf00      	nop
 8000728:	bd80      	pop	{r7, pc}
	...

0800072c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000730:	4802      	ldr	r0, [pc, #8]	@ (800073c <OTG_FS_IRQHandler+0x10>)
 8000732:	f000 fc82 	bl	800103a <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000736:	bf00      	nop
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	200000c0 	.word	0x200000c0

08000740 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000740:	b480      	push	{r7}
 8000742:	b083      	sub	sp, #12
 8000744:	af00      	add	r7, sp, #0
 8000746:	4603      	mov	r3, r0
 8000748:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800074a:	4b0f      	ldr	r3, [pc, #60]	@ (8000788 <ITM_SendChar+0x48>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	4a0e      	ldr	r2, [pc, #56]	@ (8000788 <ITM_SendChar+0x48>)
 8000750:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000754:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000756:	4b0d      	ldr	r3, [pc, #52]	@ (800078c <ITM_SendChar+0x4c>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	4a0c      	ldr	r2, [pc, #48]	@ (800078c <ITM_SendChar+0x4c>)
 800075c:	f043 0301 	orr.w	r3, r3, #1
 8000760:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000762:	bf00      	nop
 8000764:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	f003 0301 	and.w	r3, r3, #1
 800076e:	2b00      	cmp	r3, #0
 8000770:	d0f8      	beq.n	8000764 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000772:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8000776:	79fb      	ldrb	r3, [r7, #7]
 8000778:	6013      	str	r3, [r2, #0]
}
 800077a:	bf00      	nop
 800077c:	370c      	adds	r7, #12
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr
 8000786:	bf00      	nop
 8000788:	e000edfc 	.word	0xe000edfc
 800078c:	e0000e00 	.word	0xe0000e00

08000790 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b086      	sub	sp, #24
 8000794:	af00      	add	r7, sp, #0
 8000796:	60f8      	str	r0, [r7, #12]
 8000798:	60b9      	str	r1, [r7, #8]
 800079a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800079c:	2300      	movs	r3, #0
 800079e:	617b      	str	r3, [r7, #20]
 80007a0:	e00a      	b.n	80007b8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80007a2:	f3af 8000 	nop.w
 80007a6:	4601      	mov	r1, r0
 80007a8:	68bb      	ldr	r3, [r7, #8]
 80007aa:	1c5a      	adds	r2, r3, #1
 80007ac:	60ba      	str	r2, [r7, #8]
 80007ae:	b2ca      	uxtb	r2, r1
 80007b0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007b2:	697b      	ldr	r3, [r7, #20]
 80007b4:	3301      	adds	r3, #1
 80007b6:	617b      	str	r3, [r7, #20]
 80007b8:	697a      	ldr	r2, [r7, #20]
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	429a      	cmp	r2, r3
 80007be:	dbf0      	blt.n	80007a2 <_read+0x12>
  }

  return len;
 80007c0:	687b      	ldr	r3, [r7, #4]
}
 80007c2:	4618      	mov	r0, r3
 80007c4:	3718      	adds	r7, #24
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}

080007ca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80007ca:	b580      	push	{r7, lr}
 80007cc:	b086      	sub	sp, #24
 80007ce:	af00      	add	r7, sp, #0
 80007d0:	60f8      	str	r0, [r7, #12]
 80007d2:	60b9      	str	r1, [r7, #8]
 80007d4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007d6:	2300      	movs	r3, #0
 80007d8:	617b      	str	r3, [r7, #20]
 80007da:	e009      	b.n	80007f0 <_write+0x26>
  {
//    __io_putchar(*ptr++);
    ITM_SendChar(*ptr++);
 80007dc:	68bb      	ldr	r3, [r7, #8]
 80007de:	1c5a      	adds	r2, r3, #1
 80007e0:	60ba      	str	r2, [r7, #8]
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	4618      	mov	r0, r3
 80007e6:	f7ff ffab 	bl	8000740 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007ea:	697b      	ldr	r3, [r7, #20]
 80007ec:	3301      	adds	r3, #1
 80007ee:	617b      	str	r3, [r7, #20]
 80007f0:	697a      	ldr	r2, [r7, #20]
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	429a      	cmp	r2, r3
 80007f6:	dbf1      	blt.n	80007dc <_write+0x12>
  }
  return len;
 80007f8:	687b      	ldr	r3, [r7, #4]
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	3718      	adds	r7, #24
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}

08000802 <_close>:

int _close(int file)
{
 8000802:	b480      	push	{r7}
 8000804:	b083      	sub	sp, #12
 8000806:	af00      	add	r7, sp, #0
 8000808:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800080a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800080e:	4618      	mov	r0, r3
 8000810:	370c      	adds	r7, #12
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr

0800081a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800081a:	b480      	push	{r7}
 800081c:	b083      	sub	sp, #12
 800081e:	af00      	add	r7, sp, #0
 8000820:	6078      	str	r0, [r7, #4]
 8000822:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000824:	683b      	ldr	r3, [r7, #0]
 8000826:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800082a:	605a      	str	r2, [r3, #4]
  return 0;
 800082c:	2300      	movs	r3, #0
}
 800082e:	4618      	mov	r0, r3
 8000830:	370c      	adds	r7, #12
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr

0800083a <_isatty>:

int _isatty(int file)
{
 800083a:	b480      	push	{r7}
 800083c:	b083      	sub	sp, #12
 800083e:	af00      	add	r7, sp, #0
 8000840:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000842:	2301      	movs	r3, #1
}
 8000844:	4618      	mov	r0, r3
 8000846:	370c      	adds	r7, #12
 8000848:	46bd      	mov	sp, r7
 800084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084e:	4770      	bx	lr

08000850 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000850:	b480      	push	{r7}
 8000852:	b085      	sub	sp, #20
 8000854:	af00      	add	r7, sp, #0
 8000856:	60f8      	str	r0, [r7, #12]
 8000858:	60b9      	str	r1, [r7, #8]
 800085a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800085c:	2300      	movs	r3, #0
}
 800085e:	4618      	mov	r0, r3
 8000860:	3714      	adds	r7, #20
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr
	...

0800086c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b086      	sub	sp, #24
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000874:	4a14      	ldr	r2, [pc, #80]	@ (80008c8 <_sbrk+0x5c>)
 8000876:	4b15      	ldr	r3, [pc, #84]	@ (80008cc <_sbrk+0x60>)
 8000878:	1ad3      	subs	r3, r2, r3
 800087a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800087c:	697b      	ldr	r3, [r7, #20]
 800087e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000880:	4b13      	ldr	r3, [pc, #76]	@ (80008d0 <_sbrk+0x64>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	2b00      	cmp	r3, #0
 8000886:	d102      	bne.n	800088e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000888:	4b11      	ldr	r3, [pc, #68]	@ (80008d0 <_sbrk+0x64>)
 800088a:	4a12      	ldr	r2, [pc, #72]	@ (80008d4 <_sbrk+0x68>)
 800088c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800088e:	4b10      	ldr	r3, [pc, #64]	@ (80008d0 <_sbrk+0x64>)
 8000890:	681a      	ldr	r2, [r3, #0]
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	4413      	add	r3, r2
 8000896:	693a      	ldr	r2, [r7, #16]
 8000898:	429a      	cmp	r2, r3
 800089a:	d207      	bcs.n	80008ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800089c:	f002 ffd4 	bl	8003848 <__errno>
 80008a0:	4603      	mov	r3, r0
 80008a2:	220c      	movs	r2, #12
 80008a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008a6:	f04f 33ff 	mov.w	r3, #4294967295
 80008aa:	e009      	b.n	80008c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008ac:	4b08      	ldr	r3, [pc, #32]	@ (80008d0 <_sbrk+0x64>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008b2:	4b07      	ldr	r3, [pc, #28]	@ (80008d0 <_sbrk+0x64>)
 80008b4:	681a      	ldr	r2, [r3, #0]
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	4413      	add	r3, r2
 80008ba:	4a05      	ldr	r2, [pc, #20]	@ (80008d0 <_sbrk+0x64>)
 80008bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008be:	68fb      	ldr	r3, [r7, #12]
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	3718      	adds	r7, #24
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	20020000 	.word	0x20020000
 80008cc:	00000400 	.word	0x00000400
 80008d0:	200000b8 	.word	0x200000b8
 80008d4:	200005f0 	.word	0x200005f0

080008d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008dc:	4b06      	ldr	r3, [pc, #24]	@ (80008f8 <SystemInit+0x20>)
 80008de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008e2:	4a05      	ldr	r2, [pc, #20]	@ (80008f8 <SystemInit+0x20>)
 80008e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80008e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008ec:	bf00      	nop
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop
 80008f8:	e000ed00 	.word	0xe000ed00

080008fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80008fc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000934 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000900:	f7ff ffea 	bl	80008d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000904:	480c      	ldr	r0, [pc, #48]	@ (8000938 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000906:	490d      	ldr	r1, [pc, #52]	@ (800093c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000908:	4a0d      	ldr	r2, [pc, #52]	@ (8000940 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800090a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800090c:	e002      	b.n	8000914 <LoopCopyDataInit>

0800090e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800090e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000910:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000912:	3304      	adds	r3, #4

08000914 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000914:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000916:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000918:	d3f9      	bcc.n	800090e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800091a:	4a0a      	ldr	r2, [pc, #40]	@ (8000944 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800091c:	4c0a      	ldr	r4, [pc, #40]	@ (8000948 <LoopFillZerobss+0x22>)
  movs r3, #0
 800091e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000920:	e001      	b.n	8000926 <LoopFillZerobss>

08000922 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000922:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000924:	3204      	adds	r2, #4

08000926 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000926:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000928:	d3fb      	bcc.n	8000922 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800092a:	f002 ff93 	bl	8003854 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800092e:	f7ff fc9f 	bl	8000270 <main>
  bx  lr    
 8000932:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000934:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000938:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800093c:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8000940:	080042c8 	.word	0x080042c8
  ldr r2, =_sbss
 8000944:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8000948:	200005ec 	.word	0x200005ec

0800094c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800094c:	e7fe      	b.n	800094c <ADC_IRQHandler>
	...

08000950 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000954:	4b0e      	ldr	r3, [pc, #56]	@ (8000990 <HAL_Init+0x40>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a0d      	ldr	r2, [pc, #52]	@ (8000990 <HAL_Init+0x40>)
 800095a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800095e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000960:	4b0b      	ldr	r3, [pc, #44]	@ (8000990 <HAL_Init+0x40>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a0a      	ldr	r2, [pc, #40]	@ (8000990 <HAL_Init+0x40>)
 8000966:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800096a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800096c:	4b08      	ldr	r3, [pc, #32]	@ (8000990 <HAL_Init+0x40>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a07      	ldr	r2, [pc, #28]	@ (8000990 <HAL_Init+0x40>)
 8000972:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000976:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000978:	2003      	movs	r0, #3
 800097a:	f000 f94f 	bl	8000c1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800097e:	2000      	movs	r0, #0
 8000980:	f000 f808 	bl	8000994 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000984:	f7ff fe7a 	bl	800067c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000988:	2300      	movs	r3, #0
}
 800098a:	4618      	mov	r0, r3
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40023c00 	.word	0x40023c00

08000994 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800099c:	4b12      	ldr	r3, [pc, #72]	@ (80009e8 <HAL_InitTick+0x54>)
 800099e:	681a      	ldr	r2, [r3, #0]
 80009a0:	4b12      	ldr	r3, [pc, #72]	@ (80009ec <HAL_InitTick+0x58>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	4619      	mov	r1, r3
 80009a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80009ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80009b2:	4618      	mov	r0, r3
 80009b4:	f000 f967 	bl	8000c86 <HAL_SYSTICK_Config>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009be:	2301      	movs	r3, #1
 80009c0:	e00e      	b.n	80009e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	2b0f      	cmp	r3, #15
 80009c6:	d80a      	bhi.n	80009de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009c8:	2200      	movs	r2, #0
 80009ca:	6879      	ldr	r1, [r7, #4]
 80009cc:	f04f 30ff 	mov.w	r0, #4294967295
 80009d0:	f000 f92f 	bl	8000c32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009d4:	4a06      	ldr	r2, [pc, #24]	@ (80009f0 <HAL_InitTick+0x5c>)
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009da:	2300      	movs	r3, #0
 80009dc:	e000      	b.n	80009e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009de:	2301      	movs	r3, #1
}
 80009e0:	4618      	mov	r0, r3
 80009e2:	3708      	adds	r7, #8
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	20000020 	.word	0x20000020
 80009ec:	20000028 	.word	0x20000028
 80009f0:	20000024 	.word	0x20000024

080009f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009f8:	4b06      	ldr	r3, [pc, #24]	@ (8000a14 <HAL_IncTick+0x20>)
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	461a      	mov	r2, r3
 80009fe:	4b06      	ldr	r3, [pc, #24]	@ (8000a18 <HAL_IncTick+0x24>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	4413      	add	r3, r2
 8000a04:	4a04      	ldr	r2, [pc, #16]	@ (8000a18 <HAL_IncTick+0x24>)
 8000a06:	6013      	str	r3, [r2, #0]
}
 8000a08:	bf00      	nop
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	20000028 	.word	0x20000028
 8000a18:	200000bc 	.word	0x200000bc

08000a1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a20:	4b03      	ldr	r3, [pc, #12]	@ (8000a30 <HAL_GetTick+0x14>)
 8000a22:	681b      	ldr	r3, [r3, #0]
}
 8000a24:	4618      	mov	r0, r3
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	200000bc 	.word	0x200000bc

08000a34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b084      	sub	sp, #16
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a3c:	f7ff ffee 	bl	8000a1c <HAL_GetTick>
 8000a40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a4c:	d005      	beq.n	8000a5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a4e:	4b0a      	ldr	r3, [pc, #40]	@ (8000a78 <HAL_Delay+0x44>)
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	461a      	mov	r2, r3
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	4413      	add	r3, r2
 8000a58:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a5a:	bf00      	nop
 8000a5c:	f7ff ffde 	bl	8000a1c <HAL_GetTick>
 8000a60:	4602      	mov	r2, r0
 8000a62:	68bb      	ldr	r3, [r7, #8]
 8000a64:	1ad3      	subs	r3, r2, r3
 8000a66:	68fa      	ldr	r2, [r7, #12]
 8000a68:	429a      	cmp	r2, r3
 8000a6a:	d8f7      	bhi.n	8000a5c <HAL_Delay+0x28>
  {
  }
}
 8000a6c:	bf00      	nop
 8000a6e:	bf00      	nop
 8000a70:	3710      	adds	r7, #16
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	20000028 	.word	0x20000028

08000a7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b085      	sub	sp, #20
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	f003 0307 	and.w	r3, r3, #7
 8000a8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a8c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ac0 <__NVIC_SetPriorityGrouping+0x44>)
 8000a8e:	68db      	ldr	r3, [r3, #12]
 8000a90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a92:	68ba      	ldr	r2, [r7, #8]
 8000a94:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a98:	4013      	ands	r3, r2
 8000a9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000aa0:	68bb      	ldr	r3, [r7, #8]
 8000aa2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000aa4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000aa8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000aac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aae:	4a04      	ldr	r2, [pc, #16]	@ (8000ac0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ab0:	68bb      	ldr	r3, [r7, #8]
 8000ab2:	60d3      	str	r3, [r2, #12]
}
 8000ab4:	bf00      	nop
 8000ab6:	3714      	adds	r7, #20
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr
 8000ac0:	e000ed00 	.word	0xe000ed00

08000ac4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ac8:	4b04      	ldr	r3, [pc, #16]	@ (8000adc <__NVIC_GetPriorityGrouping+0x18>)
 8000aca:	68db      	ldr	r3, [r3, #12]
 8000acc:	0a1b      	lsrs	r3, r3, #8
 8000ace:	f003 0307 	and.w	r3, r3, #7
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr
 8000adc:	e000ed00 	.word	0xe000ed00

08000ae0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	db0b      	blt.n	8000b0a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000af2:	79fb      	ldrb	r3, [r7, #7]
 8000af4:	f003 021f 	and.w	r2, r3, #31
 8000af8:	4907      	ldr	r1, [pc, #28]	@ (8000b18 <__NVIC_EnableIRQ+0x38>)
 8000afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000afe:	095b      	lsrs	r3, r3, #5
 8000b00:	2001      	movs	r0, #1
 8000b02:	fa00 f202 	lsl.w	r2, r0, r2
 8000b06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b0a:	bf00      	nop
 8000b0c:	370c      	adds	r7, #12
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	e000e100 	.word	0xe000e100

08000b1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b083      	sub	sp, #12
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	4603      	mov	r3, r0
 8000b24:	6039      	str	r1, [r7, #0]
 8000b26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	db0a      	blt.n	8000b46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	b2da      	uxtb	r2, r3
 8000b34:	490c      	ldr	r1, [pc, #48]	@ (8000b68 <__NVIC_SetPriority+0x4c>)
 8000b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b3a:	0112      	lsls	r2, r2, #4
 8000b3c:	b2d2      	uxtb	r2, r2
 8000b3e:	440b      	add	r3, r1
 8000b40:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b44:	e00a      	b.n	8000b5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	b2da      	uxtb	r2, r3
 8000b4a:	4908      	ldr	r1, [pc, #32]	@ (8000b6c <__NVIC_SetPriority+0x50>)
 8000b4c:	79fb      	ldrb	r3, [r7, #7]
 8000b4e:	f003 030f 	and.w	r3, r3, #15
 8000b52:	3b04      	subs	r3, #4
 8000b54:	0112      	lsls	r2, r2, #4
 8000b56:	b2d2      	uxtb	r2, r2
 8000b58:	440b      	add	r3, r1
 8000b5a:	761a      	strb	r2, [r3, #24]
}
 8000b5c:	bf00      	nop
 8000b5e:	370c      	adds	r7, #12
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr
 8000b68:	e000e100 	.word	0xe000e100
 8000b6c:	e000ed00 	.word	0xe000ed00

08000b70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b089      	sub	sp, #36	@ 0x24
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	60f8      	str	r0, [r7, #12]
 8000b78:	60b9      	str	r1, [r7, #8]
 8000b7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	f003 0307 	and.w	r3, r3, #7
 8000b82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b84:	69fb      	ldr	r3, [r7, #28]
 8000b86:	f1c3 0307 	rsb	r3, r3, #7
 8000b8a:	2b04      	cmp	r3, #4
 8000b8c:	bf28      	it	cs
 8000b8e:	2304      	movcs	r3, #4
 8000b90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b92:	69fb      	ldr	r3, [r7, #28]
 8000b94:	3304      	adds	r3, #4
 8000b96:	2b06      	cmp	r3, #6
 8000b98:	d902      	bls.n	8000ba0 <NVIC_EncodePriority+0x30>
 8000b9a:	69fb      	ldr	r3, [r7, #28]
 8000b9c:	3b03      	subs	r3, #3
 8000b9e:	e000      	b.n	8000ba2 <NVIC_EncodePriority+0x32>
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ba4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ba8:	69bb      	ldr	r3, [r7, #24]
 8000baa:	fa02 f303 	lsl.w	r3, r2, r3
 8000bae:	43da      	mvns	r2, r3
 8000bb0:	68bb      	ldr	r3, [r7, #8]
 8000bb2:	401a      	ands	r2, r3
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bb8:	f04f 31ff 	mov.w	r1, #4294967295
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8000bc2:	43d9      	mvns	r1, r3
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bc8:	4313      	orrs	r3, r2
         );
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	3724      	adds	r7, #36	@ 0x24
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
	...

08000bd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	3b01      	subs	r3, #1
 8000be4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000be8:	d301      	bcc.n	8000bee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bea:	2301      	movs	r3, #1
 8000bec:	e00f      	b.n	8000c0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bee:	4a0a      	ldr	r2, [pc, #40]	@ (8000c18 <SysTick_Config+0x40>)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	3b01      	subs	r3, #1
 8000bf4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bf6:	210f      	movs	r1, #15
 8000bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bfc:	f7ff ff8e 	bl	8000b1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c00:	4b05      	ldr	r3, [pc, #20]	@ (8000c18 <SysTick_Config+0x40>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c06:	4b04      	ldr	r3, [pc, #16]	@ (8000c18 <SysTick_Config+0x40>)
 8000c08:	2207      	movs	r2, #7
 8000c0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c0c:	2300      	movs	r3, #0
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	e000e010 	.word	0xe000e010

08000c1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c24:	6878      	ldr	r0, [r7, #4]
 8000c26:	f7ff ff29 	bl	8000a7c <__NVIC_SetPriorityGrouping>
}
 8000c2a:	bf00      	nop
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}

08000c32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c32:	b580      	push	{r7, lr}
 8000c34:	b086      	sub	sp, #24
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	4603      	mov	r3, r0
 8000c3a:	60b9      	str	r1, [r7, #8]
 8000c3c:	607a      	str	r2, [r7, #4]
 8000c3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c40:	2300      	movs	r3, #0
 8000c42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c44:	f7ff ff3e 	bl	8000ac4 <__NVIC_GetPriorityGrouping>
 8000c48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c4a:	687a      	ldr	r2, [r7, #4]
 8000c4c:	68b9      	ldr	r1, [r7, #8]
 8000c4e:	6978      	ldr	r0, [r7, #20]
 8000c50:	f7ff ff8e 	bl	8000b70 <NVIC_EncodePriority>
 8000c54:	4602      	mov	r2, r0
 8000c56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c5a:	4611      	mov	r1, r2
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f7ff ff5d 	bl	8000b1c <__NVIC_SetPriority>
}
 8000c62:	bf00      	nop
 8000c64:	3718      	adds	r7, #24
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}

08000c6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c6a:	b580      	push	{r7, lr}
 8000c6c:	b082      	sub	sp, #8
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	4603      	mov	r3, r0
 8000c72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f7ff ff31 	bl	8000ae0 <__NVIC_EnableIRQ>
}
 8000c7e:	bf00      	nop
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}

08000c86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c86:	b580      	push	{r7, lr}
 8000c88:	b082      	sub	sp, #8
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c8e:	6878      	ldr	r0, [r7, #4]
 8000c90:	f7ff ffa2 	bl	8000bd8 <SysTick_Config>
 8000c94:	4603      	mov	r3, r0
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	3708      	adds	r7, #8
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
	...

08000ca0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b089      	sub	sp, #36	@ 0x24
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
 8000ca8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000caa:	2300      	movs	r3, #0
 8000cac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	61fb      	str	r3, [r7, #28]
 8000cba:	e16b      	b.n	8000f94 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	69fb      	ldr	r3, [r7, #28]
 8000cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	697a      	ldr	r2, [r7, #20]
 8000ccc:	4013      	ands	r3, r2
 8000cce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000cd0:	693a      	ldr	r2, [r7, #16]
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	429a      	cmp	r2, r3
 8000cd6:	f040 815a 	bne.w	8000f8e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	f003 0303 	and.w	r3, r3, #3
 8000ce2:	2b01      	cmp	r3, #1
 8000ce4:	d005      	beq.n	8000cf2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cee:	2b02      	cmp	r3, #2
 8000cf0:	d130      	bne.n	8000d54 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	689b      	ldr	r3, [r3, #8]
 8000cf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000cf8:	69fb      	ldr	r3, [r7, #28]
 8000cfa:	005b      	lsls	r3, r3, #1
 8000cfc:	2203      	movs	r2, #3
 8000cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000d02:	43db      	mvns	r3, r3
 8000d04:	69ba      	ldr	r2, [r7, #24]
 8000d06:	4013      	ands	r3, r2
 8000d08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	68da      	ldr	r2, [r3, #12]
 8000d0e:	69fb      	ldr	r3, [r7, #28]
 8000d10:	005b      	lsls	r3, r3, #1
 8000d12:	fa02 f303 	lsl.w	r3, r2, r3
 8000d16:	69ba      	ldr	r2, [r7, #24]
 8000d18:	4313      	orrs	r3, r2
 8000d1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	69ba      	ldr	r2, [r7, #24]
 8000d20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d28:	2201      	movs	r2, #1
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d30:	43db      	mvns	r3, r3
 8000d32:	69ba      	ldr	r2, [r7, #24]
 8000d34:	4013      	ands	r3, r2
 8000d36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	091b      	lsrs	r3, r3, #4
 8000d3e:	f003 0201 	and.w	r2, r3, #1
 8000d42:	69fb      	ldr	r3, [r7, #28]
 8000d44:	fa02 f303 	lsl.w	r3, r2, r3
 8000d48:	69ba      	ldr	r2, [r7, #24]
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	69ba      	ldr	r2, [r7, #24]
 8000d52:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	f003 0303 	and.w	r3, r3, #3
 8000d5c:	2b03      	cmp	r3, #3
 8000d5e:	d017      	beq.n	8000d90 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	68db      	ldr	r3, [r3, #12]
 8000d64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d66:	69fb      	ldr	r3, [r7, #28]
 8000d68:	005b      	lsls	r3, r3, #1
 8000d6a:	2203      	movs	r2, #3
 8000d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d70:	43db      	mvns	r3, r3
 8000d72:	69ba      	ldr	r2, [r7, #24]
 8000d74:	4013      	ands	r3, r2
 8000d76:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	689a      	ldr	r2, [r3, #8]
 8000d7c:	69fb      	ldr	r3, [r7, #28]
 8000d7e:	005b      	lsls	r3, r3, #1
 8000d80:	fa02 f303 	lsl.w	r3, r2, r3
 8000d84:	69ba      	ldr	r2, [r7, #24]
 8000d86:	4313      	orrs	r3, r2
 8000d88:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	69ba      	ldr	r2, [r7, #24]
 8000d8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	f003 0303 	and.w	r3, r3, #3
 8000d98:	2b02      	cmp	r3, #2
 8000d9a:	d123      	bne.n	8000de4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d9c:	69fb      	ldr	r3, [r7, #28]
 8000d9e:	08da      	lsrs	r2, r3, #3
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	3208      	adds	r2, #8
 8000da4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000da8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	f003 0307 	and.w	r3, r3, #7
 8000db0:	009b      	lsls	r3, r3, #2
 8000db2:	220f      	movs	r2, #15
 8000db4:	fa02 f303 	lsl.w	r3, r2, r3
 8000db8:	43db      	mvns	r3, r3
 8000dba:	69ba      	ldr	r2, [r7, #24]
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	691a      	ldr	r2, [r3, #16]
 8000dc4:	69fb      	ldr	r3, [r7, #28]
 8000dc6:	f003 0307 	and.w	r3, r3, #7
 8000dca:	009b      	lsls	r3, r3, #2
 8000dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd0:	69ba      	ldr	r2, [r7, #24]
 8000dd2:	4313      	orrs	r3, r2
 8000dd4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000dd6:	69fb      	ldr	r3, [r7, #28]
 8000dd8:	08da      	lsrs	r2, r3, #3
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	3208      	adds	r2, #8
 8000dde:	69b9      	ldr	r1, [r7, #24]
 8000de0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	005b      	lsls	r3, r3, #1
 8000dee:	2203      	movs	r2, #3
 8000df0:	fa02 f303 	lsl.w	r3, r2, r3
 8000df4:	43db      	mvns	r3, r3
 8000df6:	69ba      	ldr	r2, [r7, #24]
 8000df8:	4013      	ands	r3, r2
 8000dfa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	f003 0203 	and.w	r2, r3, #3
 8000e04:	69fb      	ldr	r3, [r7, #28]
 8000e06:	005b      	lsls	r3, r3, #1
 8000e08:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0c:	69ba      	ldr	r2, [r7, #24]
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	69ba      	ldr	r2, [r7, #24]
 8000e16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	f000 80b4 	beq.w	8000f8e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e26:	2300      	movs	r3, #0
 8000e28:	60fb      	str	r3, [r7, #12]
 8000e2a:	4b60      	ldr	r3, [pc, #384]	@ (8000fac <HAL_GPIO_Init+0x30c>)
 8000e2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e2e:	4a5f      	ldr	r2, [pc, #380]	@ (8000fac <HAL_GPIO_Init+0x30c>)
 8000e30:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e34:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e36:	4b5d      	ldr	r3, [pc, #372]	@ (8000fac <HAL_GPIO_Init+0x30c>)
 8000e38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e3e:	60fb      	str	r3, [r7, #12]
 8000e40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e42:	4a5b      	ldr	r2, [pc, #364]	@ (8000fb0 <HAL_GPIO_Init+0x310>)
 8000e44:	69fb      	ldr	r3, [r7, #28]
 8000e46:	089b      	lsrs	r3, r3, #2
 8000e48:	3302      	adds	r3, #2
 8000e4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e50:	69fb      	ldr	r3, [r7, #28]
 8000e52:	f003 0303 	and.w	r3, r3, #3
 8000e56:	009b      	lsls	r3, r3, #2
 8000e58:	220f      	movs	r2, #15
 8000e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5e:	43db      	mvns	r3, r3
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	4013      	ands	r3, r2
 8000e64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4a52      	ldr	r2, [pc, #328]	@ (8000fb4 <HAL_GPIO_Init+0x314>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d02b      	beq.n	8000ec6 <HAL_GPIO_Init+0x226>
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4a51      	ldr	r2, [pc, #324]	@ (8000fb8 <HAL_GPIO_Init+0x318>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d025      	beq.n	8000ec2 <HAL_GPIO_Init+0x222>
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4a50      	ldr	r2, [pc, #320]	@ (8000fbc <HAL_GPIO_Init+0x31c>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d01f      	beq.n	8000ebe <HAL_GPIO_Init+0x21e>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4a4f      	ldr	r2, [pc, #316]	@ (8000fc0 <HAL_GPIO_Init+0x320>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d019      	beq.n	8000eba <HAL_GPIO_Init+0x21a>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4a4e      	ldr	r2, [pc, #312]	@ (8000fc4 <HAL_GPIO_Init+0x324>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d013      	beq.n	8000eb6 <HAL_GPIO_Init+0x216>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4a4d      	ldr	r2, [pc, #308]	@ (8000fc8 <HAL_GPIO_Init+0x328>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d00d      	beq.n	8000eb2 <HAL_GPIO_Init+0x212>
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4a4c      	ldr	r2, [pc, #304]	@ (8000fcc <HAL_GPIO_Init+0x32c>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d007      	beq.n	8000eae <HAL_GPIO_Init+0x20e>
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4a4b      	ldr	r2, [pc, #300]	@ (8000fd0 <HAL_GPIO_Init+0x330>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d101      	bne.n	8000eaa <HAL_GPIO_Init+0x20a>
 8000ea6:	2307      	movs	r3, #7
 8000ea8:	e00e      	b.n	8000ec8 <HAL_GPIO_Init+0x228>
 8000eaa:	2308      	movs	r3, #8
 8000eac:	e00c      	b.n	8000ec8 <HAL_GPIO_Init+0x228>
 8000eae:	2306      	movs	r3, #6
 8000eb0:	e00a      	b.n	8000ec8 <HAL_GPIO_Init+0x228>
 8000eb2:	2305      	movs	r3, #5
 8000eb4:	e008      	b.n	8000ec8 <HAL_GPIO_Init+0x228>
 8000eb6:	2304      	movs	r3, #4
 8000eb8:	e006      	b.n	8000ec8 <HAL_GPIO_Init+0x228>
 8000eba:	2303      	movs	r3, #3
 8000ebc:	e004      	b.n	8000ec8 <HAL_GPIO_Init+0x228>
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	e002      	b.n	8000ec8 <HAL_GPIO_Init+0x228>
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	e000      	b.n	8000ec8 <HAL_GPIO_Init+0x228>
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	69fa      	ldr	r2, [r7, #28]
 8000eca:	f002 0203 	and.w	r2, r2, #3
 8000ece:	0092      	lsls	r2, r2, #2
 8000ed0:	4093      	lsls	r3, r2
 8000ed2:	69ba      	ldr	r2, [r7, #24]
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ed8:	4935      	ldr	r1, [pc, #212]	@ (8000fb0 <HAL_GPIO_Init+0x310>)
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	089b      	lsrs	r3, r3, #2
 8000ede:	3302      	adds	r3, #2
 8000ee0:	69ba      	ldr	r2, [r7, #24]
 8000ee2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ee6:	4b3b      	ldr	r3, [pc, #236]	@ (8000fd4 <HAL_GPIO_Init+0x334>)
 8000ee8:	689b      	ldr	r3, [r3, #8]
 8000eea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eec:	693b      	ldr	r3, [r7, #16]
 8000eee:	43db      	mvns	r3, r3
 8000ef0:	69ba      	ldr	r2, [r7, #24]
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d003      	beq.n	8000f0a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000f02:	69ba      	ldr	r2, [r7, #24]
 8000f04:	693b      	ldr	r3, [r7, #16]
 8000f06:	4313      	orrs	r3, r2
 8000f08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f0a:	4a32      	ldr	r2, [pc, #200]	@ (8000fd4 <HAL_GPIO_Init+0x334>)
 8000f0c:	69bb      	ldr	r3, [r7, #24]
 8000f0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f10:	4b30      	ldr	r3, [pc, #192]	@ (8000fd4 <HAL_GPIO_Init+0x334>)
 8000f12:	68db      	ldr	r3, [r3, #12]
 8000f14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f16:	693b      	ldr	r3, [r7, #16]
 8000f18:	43db      	mvns	r3, r3
 8000f1a:	69ba      	ldr	r2, [r7, #24]
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d003      	beq.n	8000f34 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000f2c:	69ba      	ldr	r2, [r7, #24]
 8000f2e:	693b      	ldr	r3, [r7, #16]
 8000f30:	4313      	orrs	r3, r2
 8000f32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f34:	4a27      	ldr	r2, [pc, #156]	@ (8000fd4 <HAL_GPIO_Init+0x334>)
 8000f36:	69bb      	ldr	r3, [r7, #24]
 8000f38:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f3a:	4b26      	ldr	r3, [pc, #152]	@ (8000fd4 <HAL_GPIO_Init+0x334>)
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f40:	693b      	ldr	r3, [r7, #16]
 8000f42:	43db      	mvns	r3, r3
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	4013      	ands	r3, r2
 8000f48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d003      	beq.n	8000f5e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000f56:	69ba      	ldr	r2, [r7, #24]
 8000f58:	693b      	ldr	r3, [r7, #16]
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f5e:	4a1d      	ldr	r2, [pc, #116]	@ (8000fd4 <HAL_GPIO_Init+0x334>)
 8000f60:	69bb      	ldr	r3, [r7, #24]
 8000f62:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f64:	4b1b      	ldr	r3, [pc, #108]	@ (8000fd4 <HAL_GPIO_Init+0x334>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f6a:	693b      	ldr	r3, [r7, #16]
 8000f6c:	43db      	mvns	r3, r3
 8000f6e:	69ba      	ldr	r2, [r7, #24]
 8000f70:	4013      	ands	r3, r2
 8000f72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d003      	beq.n	8000f88 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000f80:	69ba      	ldr	r2, [r7, #24]
 8000f82:	693b      	ldr	r3, [r7, #16]
 8000f84:	4313      	orrs	r3, r2
 8000f86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f88:	4a12      	ldr	r2, [pc, #72]	@ (8000fd4 <HAL_GPIO_Init+0x334>)
 8000f8a:	69bb      	ldr	r3, [r7, #24]
 8000f8c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	3301      	adds	r3, #1
 8000f92:	61fb      	str	r3, [r7, #28]
 8000f94:	69fb      	ldr	r3, [r7, #28]
 8000f96:	2b0f      	cmp	r3, #15
 8000f98:	f67f ae90 	bls.w	8000cbc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f9c:	bf00      	nop
 8000f9e:	bf00      	nop
 8000fa0:	3724      	adds	r7, #36	@ 0x24
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	40023800 	.word	0x40023800
 8000fb0:	40013800 	.word	0x40013800
 8000fb4:	40020000 	.word	0x40020000
 8000fb8:	40020400 	.word	0x40020400
 8000fbc:	40020800 	.word	0x40020800
 8000fc0:	40020c00 	.word	0x40020c00
 8000fc4:	40021000 	.word	0x40021000
 8000fc8:	40021400 	.word	0x40021400
 8000fcc:	40021800 	.word	0x40021800
 8000fd0:	40021c00 	.word	0x40021c00
 8000fd4:	40013c00 	.word	0x40013c00

08000fd8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b085      	sub	sp, #20
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	460b      	mov	r3, r1
 8000fe2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	691a      	ldr	r2, [r3, #16]
 8000fe8:	887b      	ldrh	r3, [r7, #2]
 8000fea:	4013      	ands	r3, r2
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d002      	beq.n	8000ff6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	73fb      	strb	r3, [r7, #15]
 8000ff4:	e001      	b.n	8000ffa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000ffa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3714      	adds	r7, #20
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr

08001008 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	460b      	mov	r3, r1
 8001012:	807b      	strh	r3, [r7, #2]
 8001014:	4613      	mov	r3, r2
 8001016:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001018:	787b      	ldrb	r3, [r7, #1]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d003      	beq.n	8001026 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800101e:	887a      	ldrh	r2, [r7, #2]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001024:	e003      	b.n	800102e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001026:	887b      	ldrh	r3, [r7, #2]
 8001028:	041a      	lsls	r2, r3, #16
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	619a      	str	r2, [r3, #24]
}
 800102e:	bf00      	nop
 8001030:	370c      	adds	r7, #12
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr

0800103a <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800103a:	b580      	push	{r7, lr}
 800103c:	b086      	sub	sp, #24
 800103e:	af00      	add	r7, sp, #0
 8001040:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4618      	mov	r0, r3
 8001052:	f001 fe8d 	bl	8002d70 <USB_GetMode>
 8001056:	4603      	mov	r3, r0
 8001058:	2b01      	cmp	r3, #1
 800105a:	f040 80fb 	bne.w	8001254 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4618      	mov	r0, r3
 8001064:	f001 fe50 	bl	8002d08 <USB_ReadInterrupts>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	f000 80f1 	beq.w	8001252 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4618      	mov	r0, r3
 8001076:	f001 fe47 	bl	8002d08 <USB_ReadInterrupts>
 800107a:	4603      	mov	r3, r0
 800107c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001080:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001084:	d104      	bne.n	8001090 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800108e:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4618      	mov	r0, r3
 8001096:	f001 fe37 	bl	8002d08 <USB_ReadInterrupts>
 800109a:	4603      	mov	r3, r0
 800109c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80010a0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80010a4:	d104      	bne.n	80010b0 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80010ae:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4618      	mov	r0, r3
 80010b6:	f001 fe27 	bl	8002d08 <USB_ReadInterrupts>
 80010ba:	4603      	mov	r3, r0
 80010bc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80010c0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80010c4:	d104      	bne.n	80010d0 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80010ce:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4618      	mov	r0, r3
 80010d6:	f001 fe17 	bl	8002d08 <USB_ReadInterrupts>
 80010da:	4603      	mov	r3, r0
 80010dc:	f003 0302 	and.w	r3, r3, #2
 80010e0:	2b02      	cmp	r3, #2
 80010e2:	d103      	bne.n	80010ec <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	2202      	movs	r2, #2
 80010ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4618      	mov	r0, r3
 80010f2:	f001 fe09 	bl	8002d08 <USB_ReadInterrupts>
 80010f6:	4603      	mov	r3, r0
 80010f8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80010fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001100:	d120      	bne.n	8001144 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800110a:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f003 0301 	and.w	r3, r3, #1
 8001118:	2b00      	cmp	r3, #0
 800111a:	d113      	bne.n	8001144 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800111c:	2110      	movs	r1, #16
 800111e:	6938      	ldr	r0, [r7, #16]
 8001120:	f001 fd3a 	bl	8002b98 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001124:	6938      	ldr	r0, [r7, #16]
 8001126:	f001 fd69 	bl	8002bfc <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	7a5b      	ldrb	r3, [r3, #9]
 800112e:	2b02      	cmp	r3, #2
 8001130:	d105      	bne.n	800113e <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	2101      	movs	r1, #1
 8001138:	4618      	mov	r0, r3
 800113a:	f001 fe27 	bl	8002d8c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800113e:	6878      	ldr	r0, [r7, #4]
 8001140:	f002 f8df 	bl	8003302 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4618      	mov	r0, r3
 800114a:	f001 fddd 	bl	8002d08 <USB_ReadInterrupts>
 800114e:	4603      	mov	r3, r0
 8001150:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001154:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001158:	d102      	bne.n	8001160 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f001 fc87 	bl	8002a6e <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4618      	mov	r0, r3
 8001166:	f001 fdcf 	bl	8002d08 <USB_ReadInterrupts>
 800116a:	4603      	mov	r3, r0
 800116c:	f003 0308 	and.w	r3, r3, #8
 8001170:	2b08      	cmp	r3, #8
 8001172:	d106      	bne.n	8001182 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001174:	6878      	ldr	r0, [r7, #4]
 8001176:	f002 f8a8 	bl	80032ca <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	2208      	movs	r2, #8
 8001180:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4618      	mov	r0, r3
 8001188:	f001 fdbe 	bl	8002d08 <USB_ReadInterrupts>
 800118c:	4603      	mov	r3, r0
 800118e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001192:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001196:	d139      	bne.n	800120c <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4618      	mov	r0, r3
 800119e:	f001 fe32 	bl	8002e06 <USB_HC_ReadInterrupt>
 80011a2:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80011a4:	2300      	movs	r3, #0
 80011a6:	617b      	str	r3, [r7, #20]
 80011a8:	e025      	b.n	80011f6 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	f003 030f 	and.w	r3, r3, #15
 80011b0:	68ba      	ldr	r2, [r7, #8]
 80011b2:	fa22 f303 	lsr.w	r3, r2, r3
 80011b6:	f003 0301 	and.w	r3, r3, #1
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d018      	beq.n	80011f0 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	015a      	lsls	r2, r3, #5
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	4413      	add	r3, r2
 80011c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80011d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80011d4:	d106      	bne.n	80011e4 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	4619      	mov	r1, r3
 80011dc:	6878      	ldr	r0, [r7, #4]
 80011de:	f000 f859 	bl	8001294 <HCD_HC_IN_IRQHandler>
 80011e2:	e005      	b.n	80011f0 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	4619      	mov	r1, r3
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f000 febb 	bl	8001f66 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	3301      	adds	r3, #1
 80011f4:	617b      	str	r3, [r7, #20]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	795b      	ldrb	r3, [r3, #5]
 80011fa:	461a      	mov	r2, r3
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	4293      	cmp	r3, r2
 8001200:	d3d3      	bcc.n	80011aa <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800120a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4618      	mov	r0, r3
 8001212:	f001 fd79 	bl	8002d08 <USB_ReadInterrupts>
 8001216:	4603      	mov	r3, r0
 8001218:	f003 0310 	and.w	r3, r3, #16
 800121c:	2b10      	cmp	r3, #16
 800121e:	d101      	bne.n	8001224 <HAL_HCD_IRQHandler+0x1ea>
 8001220:	2301      	movs	r3, #1
 8001222:	e000      	b.n	8001226 <HAL_HCD_IRQHandler+0x1ec>
 8001224:	2300      	movs	r3, #0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d014      	beq.n	8001254 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	699a      	ldr	r2, [r3, #24]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f022 0210 	bic.w	r2, r2, #16
 8001238:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	f001 fb38 	bl	80028b0 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	699a      	ldr	r2, [r3, #24]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f042 0210 	orr.w	r2, r2, #16
 800124e:	619a      	str	r2, [r3, #24]
 8001250:	e000      	b.n	8001254 <HAL_HCD_IRQHandler+0x21a>
      return;
 8001252:	bf00      	nop
    }
  }
}
 8001254:	3718      	adds	r7, #24
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800125a:	b580      	push	{r7, lr}
 800125c:	b082      	sub	sp, #8
 800125e:	af00      	add	r7, sp, #0
 8001260:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001268:	2b01      	cmp	r3, #1
 800126a:	d101      	bne.n	8001270 <HAL_HCD_Stop+0x16>
 800126c:	2302      	movs	r3, #2
 800126e:	e00d      	b.n	800128c <HAL_HCD_Stop+0x32>
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2201      	movs	r2, #1
 8001274:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4618      	mov	r0, r3
 800127e:	f001 fef3 	bl	8003068 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2200      	movs	r2, #0
 8001286:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 800128a:	2300      	movs	r3, #0
}
 800128c:	4618      	mov	r0, r3
 800128e:	3708      	adds	r7, #8
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}

08001294 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b086      	sub	sp, #24
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	460b      	mov	r3, r1
 800129e:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	78fa      	ldrb	r2, [r7, #3]
 80012b0:	4611      	mov	r1, r2
 80012b2:	4618      	mov	r0, r3
 80012b4:	f001 fd3b 	bl	8002d2e <USB_ReadChInterrupts>
 80012b8:	4603      	mov	r3, r0
 80012ba:	f003 0304 	and.w	r3, r3, #4
 80012be:	2b04      	cmp	r3, #4
 80012c0:	d11a      	bne.n	80012f8 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80012c2:	78fb      	ldrb	r3, [r7, #3]
 80012c4:	015a      	lsls	r2, r3, #5
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	4413      	add	r3, r2
 80012ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80012ce:	461a      	mov	r2, r3
 80012d0:	2304      	movs	r3, #4
 80012d2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80012d4:	78fa      	ldrb	r2, [r7, #3]
 80012d6:	6879      	ldr	r1, [r7, #4]
 80012d8:	4613      	mov	r3, r2
 80012da:	011b      	lsls	r3, r3, #4
 80012dc:	1a9b      	subs	r3, r3, r2
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	440b      	add	r3, r1
 80012e2:	334d      	adds	r3, #77	@ 0x4d
 80012e4:	2207      	movs	r2, #7
 80012e6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	78fa      	ldrb	r2, [r7, #3]
 80012ee:	4611      	mov	r1, r2
 80012f0:	4618      	mov	r0, r3
 80012f2:	f001 fd99 	bl	8002e28 <USB_HC_Halt>
 80012f6:	e09e      	b.n	8001436 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	78fa      	ldrb	r2, [r7, #3]
 80012fe:	4611      	mov	r1, r2
 8001300:	4618      	mov	r0, r3
 8001302:	f001 fd14 	bl	8002d2e <USB_ReadChInterrupts>
 8001306:	4603      	mov	r3, r0
 8001308:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800130c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001310:	d11b      	bne.n	800134a <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8001312:	78fb      	ldrb	r3, [r7, #3]
 8001314:	015a      	lsls	r2, r3, #5
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	4413      	add	r3, r2
 800131a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800131e:	461a      	mov	r2, r3
 8001320:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001324:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8001326:	78fa      	ldrb	r2, [r7, #3]
 8001328:	6879      	ldr	r1, [r7, #4]
 800132a:	4613      	mov	r3, r2
 800132c:	011b      	lsls	r3, r3, #4
 800132e:	1a9b      	subs	r3, r3, r2
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	440b      	add	r3, r1
 8001334:	334d      	adds	r3, #77	@ 0x4d
 8001336:	2208      	movs	r2, #8
 8001338:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	78fa      	ldrb	r2, [r7, #3]
 8001340:	4611      	mov	r1, r2
 8001342:	4618      	mov	r0, r3
 8001344:	f001 fd70 	bl	8002e28 <USB_HC_Halt>
 8001348:	e075      	b.n	8001436 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	78fa      	ldrb	r2, [r7, #3]
 8001350:	4611      	mov	r1, r2
 8001352:	4618      	mov	r0, r3
 8001354:	f001 fceb 	bl	8002d2e <USB_ReadChInterrupts>
 8001358:	4603      	mov	r3, r0
 800135a:	f003 0308 	and.w	r3, r3, #8
 800135e:	2b08      	cmp	r3, #8
 8001360:	d11a      	bne.n	8001398 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8001362:	78fb      	ldrb	r3, [r7, #3]
 8001364:	015a      	lsls	r2, r3, #5
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	4413      	add	r3, r2
 800136a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800136e:	461a      	mov	r2, r3
 8001370:	2308      	movs	r3, #8
 8001372:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8001374:	78fa      	ldrb	r2, [r7, #3]
 8001376:	6879      	ldr	r1, [r7, #4]
 8001378:	4613      	mov	r3, r2
 800137a:	011b      	lsls	r3, r3, #4
 800137c:	1a9b      	subs	r3, r3, r2
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	440b      	add	r3, r1
 8001382:	334d      	adds	r3, #77	@ 0x4d
 8001384:	2206      	movs	r2, #6
 8001386:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	78fa      	ldrb	r2, [r7, #3]
 800138e:	4611      	mov	r1, r2
 8001390:	4618      	mov	r0, r3
 8001392:	f001 fd49 	bl	8002e28 <USB_HC_Halt>
 8001396:	e04e      	b.n	8001436 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	78fa      	ldrb	r2, [r7, #3]
 800139e:	4611      	mov	r1, r2
 80013a0:	4618      	mov	r0, r3
 80013a2:	f001 fcc4 	bl	8002d2e <USB_ReadChInterrupts>
 80013a6:	4603      	mov	r3, r0
 80013a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80013b0:	d11b      	bne.n	80013ea <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80013b2:	78fb      	ldrb	r3, [r7, #3]
 80013b4:	015a      	lsls	r2, r3, #5
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	4413      	add	r3, r2
 80013ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80013be:	461a      	mov	r2, r3
 80013c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80013c4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80013c6:	78fa      	ldrb	r2, [r7, #3]
 80013c8:	6879      	ldr	r1, [r7, #4]
 80013ca:	4613      	mov	r3, r2
 80013cc:	011b      	lsls	r3, r3, #4
 80013ce:	1a9b      	subs	r3, r3, r2
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	440b      	add	r3, r1
 80013d4:	334d      	adds	r3, #77	@ 0x4d
 80013d6:	2209      	movs	r2, #9
 80013d8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	78fa      	ldrb	r2, [r7, #3]
 80013e0:	4611      	mov	r1, r2
 80013e2:	4618      	mov	r0, r3
 80013e4:	f001 fd20 	bl	8002e28 <USB_HC_Halt>
 80013e8:	e025      	b.n	8001436 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	78fa      	ldrb	r2, [r7, #3]
 80013f0:	4611      	mov	r1, r2
 80013f2:	4618      	mov	r0, r3
 80013f4:	f001 fc9b 	bl	8002d2e <USB_ReadChInterrupts>
 80013f8:	4603      	mov	r3, r0
 80013fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013fe:	2b80      	cmp	r3, #128	@ 0x80
 8001400:	d119      	bne.n	8001436 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8001402:	78fb      	ldrb	r3, [r7, #3]
 8001404:	015a      	lsls	r2, r3, #5
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	4413      	add	r3, r2
 800140a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800140e:	461a      	mov	r2, r3
 8001410:	2380      	movs	r3, #128	@ 0x80
 8001412:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001414:	78fa      	ldrb	r2, [r7, #3]
 8001416:	6879      	ldr	r1, [r7, #4]
 8001418:	4613      	mov	r3, r2
 800141a:	011b      	lsls	r3, r3, #4
 800141c:	1a9b      	subs	r3, r3, r2
 800141e:	009b      	lsls	r3, r3, #2
 8001420:	440b      	add	r3, r1
 8001422:	334d      	adds	r3, #77	@ 0x4d
 8001424:	2207      	movs	r2, #7
 8001426:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	78fa      	ldrb	r2, [r7, #3]
 800142e:	4611      	mov	r1, r2
 8001430:	4618      	mov	r0, r3
 8001432:	f001 fcf9 	bl	8002e28 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	78fa      	ldrb	r2, [r7, #3]
 800143c:	4611      	mov	r1, r2
 800143e:	4618      	mov	r0, r3
 8001440:	f001 fc75 	bl	8002d2e <USB_ReadChInterrupts>
 8001444:	4603      	mov	r3, r0
 8001446:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800144a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800144e:	d112      	bne.n	8001476 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	78fa      	ldrb	r2, [r7, #3]
 8001456:	4611      	mov	r1, r2
 8001458:	4618      	mov	r0, r3
 800145a:	f001 fce5 	bl	8002e28 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800145e:	78fb      	ldrb	r3, [r7, #3]
 8001460:	015a      	lsls	r2, r3, #5
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	4413      	add	r3, r2
 8001466:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800146a:	461a      	mov	r2, r3
 800146c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001470:	6093      	str	r3, [r2, #8]
 8001472:	f000 bd75 	b.w	8001f60 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	78fa      	ldrb	r2, [r7, #3]
 800147c:	4611      	mov	r1, r2
 800147e:	4618      	mov	r0, r3
 8001480:	f001 fc55 	bl	8002d2e <USB_ReadChInterrupts>
 8001484:	4603      	mov	r3, r0
 8001486:	f003 0301 	and.w	r3, r3, #1
 800148a:	2b01      	cmp	r3, #1
 800148c:	f040 8128 	bne.w	80016e0 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8001490:	78fb      	ldrb	r3, [r7, #3]
 8001492:	015a      	lsls	r2, r3, #5
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	4413      	add	r3, r2
 8001498:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800149c:	461a      	mov	r2, r3
 800149e:	2320      	movs	r3, #32
 80014a0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 80014a2:	78fa      	ldrb	r2, [r7, #3]
 80014a4:	6879      	ldr	r1, [r7, #4]
 80014a6:	4613      	mov	r3, r2
 80014a8:	011b      	lsls	r3, r3, #4
 80014aa:	1a9b      	subs	r3, r3, r2
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	440b      	add	r3, r1
 80014b0:	331b      	adds	r3, #27
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d119      	bne.n	80014ec <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80014b8:	78fa      	ldrb	r2, [r7, #3]
 80014ba:	6879      	ldr	r1, [r7, #4]
 80014bc:	4613      	mov	r3, r2
 80014be:	011b      	lsls	r3, r3, #4
 80014c0:	1a9b      	subs	r3, r3, r2
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	440b      	add	r3, r1
 80014c6:	331b      	adds	r3, #27
 80014c8:	2200      	movs	r2, #0
 80014ca:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80014cc:	78fb      	ldrb	r3, [r7, #3]
 80014ce:	015a      	lsls	r2, r3, #5
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	4413      	add	r3, r2
 80014d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	78fa      	ldrb	r2, [r7, #3]
 80014dc:	0151      	lsls	r1, r2, #5
 80014de:	693a      	ldr	r2, [r7, #16]
 80014e0:	440a      	add	r2, r1
 80014e2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80014e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014ea:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	799b      	ldrb	r3, [r3, #6]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d01b      	beq.n	800152c <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80014f4:	78fa      	ldrb	r2, [r7, #3]
 80014f6:	6879      	ldr	r1, [r7, #4]
 80014f8:	4613      	mov	r3, r2
 80014fa:	011b      	lsls	r3, r3, #4
 80014fc:	1a9b      	subs	r3, r3, r2
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	440b      	add	r3, r1
 8001502:	3330      	adds	r3, #48	@ 0x30
 8001504:	6819      	ldr	r1, [r3, #0]
 8001506:	78fb      	ldrb	r3, [r7, #3]
 8001508:	015a      	lsls	r2, r3, #5
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	4413      	add	r3, r2
 800150e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001512:	691b      	ldr	r3, [r3, #16]
 8001514:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001518:	78fa      	ldrb	r2, [r7, #3]
 800151a:	1ac9      	subs	r1, r1, r3
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	4613      	mov	r3, r2
 8001520:	011b      	lsls	r3, r3, #4
 8001522:	1a9b      	subs	r3, r3, r2
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	4403      	add	r3, r0
 8001528:	3338      	adds	r3, #56	@ 0x38
 800152a:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 800152c:	78fa      	ldrb	r2, [r7, #3]
 800152e:	6879      	ldr	r1, [r7, #4]
 8001530:	4613      	mov	r3, r2
 8001532:	011b      	lsls	r3, r3, #4
 8001534:	1a9b      	subs	r3, r3, r2
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	440b      	add	r3, r1
 800153a:	334d      	adds	r3, #77	@ 0x4d
 800153c:	2201      	movs	r2, #1
 800153e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8001540:	78fa      	ldrb	r2, [r7, #3]
 8001542:	6879      	ldr	r1, [r7, #4]
 8001544:	4613      	mov	r3, r2
 8001546:	011b      	lsls	r3, r3, #4
 8001548:	1a9b      	subs	r3, r3, r2
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	440b      	add	r3, r1
 800154e:	3344      	adds	r3, #68	@ 0x44
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8001554:	78fb      	ldrb	r3, [r7, #3]
 8001556:	015a      	lsls	r2, r3, #5
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	4413      	add	r3, r2
 800155c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001560:	461a      	mov	r2, r3
 8001562:	2301      	movs	r3, #1
 8001564:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001566:	78fa      	ldrb	r2, [r7, #3]
 8001568:	6879      	ldr	r1, [r7, #4]
 800156a:	4613      	mov	r3, r2
 800156c:	011b      	lsls	r3, r3, #4
 800156e:	1a9b      	subs	r3, r3, r2
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	440b      	add	r3, r1
 8001574:	3326      	adds	r3, #38	@ 0x26
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d00a      	beq.n	8001592 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800157c:	78fa      	ldrb	r2, [r7, #3]
 800157e:	6879      	ldr	r1, [r7, #4]
 8001580:	4613      	mov	r3, r2
 8001582:	011b      	lsls	r3, r3, #4
 8001584:	1a9b      	subs	r3, r3, r2
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	440b      	add	r3, r1
 800158a:	3326      	adds	r3, #38	@ 0x26
 800158c:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800158e:	2b02      	cmp	r3, #2
 8001590:	d110      	bne.n	80015b4 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	78fa      	ldrb	r2, [r7, #3]
 8001598:	4611      	mov	r1, r2
 800159a:	4618      	mov	r0, r3
 800159c:	f001 fc44 	bl	8002e28 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80015a0:	78fb      	ldrb	r3, [r7, #3]
 80015a2:	015a      	lsls	r2, r3, #5
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	4413      	add	r3, r2
 80015a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80015ac:	461a      	mov	r2, r3
 80015ae:	2310      	movs	r3, #16
 80015b0:	6093      	str	r3, [r2, #8]
 80015b2:	e03d      	b.n	8001630 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80015b4:	78fa      	ldrb	r2, [r7, #3]
 80015b6:	6879      	ldr	r1, [r7, #4]
 80015b8:	4613      	mov	r3, r2
 80015ba:	011b      	lsls	r3, r3, #4
 80015bc:	1a9b      	subs	r3, r3, r2
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	440b      	add	r3, r1
 80015c2:	3326      	adds	r3, #38	@ 0x26
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	2b03      	cmp	r3, #3
 80015c8:	d00a      	beq.n	80015e0 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 80015ca:	78fa      	ldrb	r2, [r7, #3]
 80015cc:	6879      	ldr	r1, [r7, #4]
 80015ce:	4613      	mov	r3, r2
 80015d0:	011b      	lsls	r3, r3, #4
 80015d2:	1a9b      	subs	r3, r3, r2
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	440b      	add	r3, r1
 80015d8:	3326      	adds	r3, #38	@ 0x26
 80015da:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d127      	bne.n	8001630 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80015e0:	78fb      	ldrb	r3, [r7, #3]
 80015e2:	015a      	lsls	r2, r3, #5
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	4413      	add	r3, r2
 80015e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	78fa      	ldrb	r2, [r7, #3]
 80015f0:	0151      	lsls	r1, r2, #5
 80015f2:	693a      	ldr	r2, [r7, #16]
 80015f4:	440a      	add	r2, r1
 80015f6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80015fa:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80015fe:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8001600:	78fa      	ldrb	r2, [r7, #3]
 8001602:	6879      	ldr	r1, [r7, #4]
 8001604:	4613      	mov	r3, r2
 8001606:	011b      	lsls	r3, r3, #4
 8001608:	1a9b      	subs	r3, r3, r2
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	440b      	add	r3, r1
 800160e:	334c      	adds	r3, #76	@ 0x4c
 8001610:	2201      	movs	r2, #1
 8001612:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8001614:	78fa      	ldrb	r2, [r7, #3]
 8001616:	6879      	ldr	r1, [r7, #4]
 8001618:	4613      	mov	r3, r2
 800161a:	011b      	lsls	r3, r3, #4
 800161c:	1a9b      	subs	r3, r3, r2
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	440b      	add	r3, r1
 8001622:	334c      	adds	r3, #76	@ 0x4c
 8001624:	781a      	ldrb	r2, [r3, #0]
 8001626:	78fb      	ldrb	r3, [r7, #3]
 8001628:	4619      	mov	r1, r3
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	f001 fe77 	bl	800331e <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	799b      	ldrb	r3, [r3, #6]
 8001634:	2b01      	cmp	r3, #1
 8001636:	d13b      	bne.n	80016b0 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8001638:	78fa      	ldrb	r2, [r7, #3]
 800163a:	6879      	ldr	r1, [r7, #4]
 800163c:	4613      	mov	r3, r2
 800163e:	011b      	lsls	r3, r3, #4
 8001640:	1a9b      	subs	r3, r3, r2
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	440b      	add	r3, r1
 8001646:	3338      	adds	r3, #56	@ 0x38
 8001648:	6819      	ldr	r1, [r3, #0]
 800164a:	78fa      	ldrb	r2, [r7, #3]
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	4613      	mov	r3, r2
 8001650:	011b      	lsls	r3, r3, #4
 8001652:	1a9b      	subs	r3, r3, r2
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	4403      	add	r3, r0
 8001658:	3328      	adds	r3, #40	@ 0x28
 800165a:	881b      	ldrh	r3, [r3, #0]
 800165c:	440b      	add	r3, r1
 800165e:	1e59      	subs	r1, r3, #1
 8001660:	78fa      	ldrb	r2, [r7, #3]
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	4613      	mov	r3, r2
 8001666:	011b      	lsls	r3, r3, #4
 8001668:	1a9b      	subs	r3, r3, r2
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	4403      	add	r3, r0
 800166e:	3328      	adds	r3, #40	@ 0x28
 8001670:	881b      	ldrh	r3, [r3, #0]
 8001672:	fbb1 f3f3 	udiv	r3, r1, r3
 8001676:	f003 0301 	and.w	r3, r3, #1
 800167a:	2b00      	cmp	r3, #0
 800167c:	f000 8470 	beq.w	8001f60 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8001680:	78fa      	ldrb	r2, [r7, #3]
 8001682:	6879      	ldr	r1, [r7, #4]
 8001684:	4613      	mov	r3, r2
 8001686:	011b      	lsls	r3, r3, #4
 8001688:	1a9b      	subs	r3, r3, r2
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	440b      	add	r3, r1
 800168e:	333c      	adds	r3, #60	@ 0x3c
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	78fa      	ldrb	r2, [r7, #3]
 8001694:	f083 0301 	eor.w	r3, r3, #1
 8001698:	b2d8      	uxtb	r0, r3
 800169a:	6879      	ldr	r1, [r7, #4]
 800169c:	4613      	mov	r3, r2
 800169e:	011b      	lsls	r3, r3, #4
 80016a0:	1a9b      	subs	r3, r3, r2
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	440b      	add	r3, r1
 80016a6:	333c      	adds	r3, #60	@ 0x3c
 80016a8:	4602      	mov	r2, r0
 80016aa:	701a      	strb	r2, [r3, #0]
 80016ac:	f000 bc58 	b.w	8001f60 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 80016b0:	78fa      	ldrb	r2, [r7, #3]
 80016b2:	6879      	ldr	r1, [r7, #4]
 80016b4:	4613      	mov	r3, r2
 80016b6:	011b      	lsls	r3, r3, #4
 80016b8:	1a9b      	subs	r3, r3, r2
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	440b      	add	r3, r1
 80016be:	333c      	adds	r3, #60	@ 0x3c
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	78fa      	ldrb	r2, [r7, #3]
 80016c4:	f083 0301 	eor.w	r3, r3, #1
 80016c8:	b2d8      	uxtb	r0, r3
 80016ca:	6879      	ldr	r1, [r7, #4]
 80016cc:	4613      	mov	r3, r2
 80016ce:	011b      	lsls	r3, r3, #4
 80016d0:	1a9b      	subs	r3, r3, r2
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	440b      	add	r3, r1
 80016d6:	333c      	adds	r3, #60	@ 0x3c
 80016d8:	4602      	mov	r2, r0
 80016da:	701a      	strb	r2, [r3, #0]
 80016dc:	f000 bc40 	b.w	8001f60 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	78fa      	ldrb	r2, [r7, #3]
 80016e6:	4611      	mov	r1, r2
 80016e8:	4618      	mov	r0, r3
 80016ea:	f001 fb20 	bl	8002d2e <USB_ReadChInterrupts>
 80016ee:	4603      	mov	r3, r0
 80016f0:	f003 0320 	and.w	r3, r3, #32
 80016f4:	2b20      	cmp	r3, #32
 80016f6:	d131      	bne.n	800175c <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80016f8:	78fb      	ldrb	r3, [r7, #3]
 80016fa:	015a      	lsls	r2, r3, #5
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	4413      	add	r3, r2
 8001700:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001704:	461a      	mov	r2, r3
 8001706:	2320      	movs	r3, #32
 8001708:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 800170a:	78fa      	ldrb	r2, [r7, #3]
 800170c:	6879      	ldr	r1, [r7, #4]
 800170e:	4613      	mov	r3, r2
 8001710:	011b      	lsls	r3, r3, #4
 8001712:	1a9b      	subs	r3, r3, r2
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	440b      	add	r3, r1
 8001718:	331a      	adds	r3, #26
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	2b01      	cmp	r3, #1
 800171e:	f040 841f 	bne.w	8001f60 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8001722:	78fa      	ldrb	r2, [r7, #3]
 8001724:	6879      	ldr	r1, [r7, #4]
 8001726:	4613      	mov	r3, r2
 8001728:	011b      	lsls	r3, r3, #4
 800172a:	1a9b      	subs	r3, r3, r2
 800172c:	009b      	lsls	r3, r3, #2
 800172e:	440b      	add	r3, r1
 8001730:	331b      	adds	r3, #27
 8001732:	2201      	movs	r2, #1
 8001734:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8001736:	78fa      	ldrb	r2, [r7, #3]
 8001738:	6879      	ldr	r1, [r7, #4]
 800173a:	4613      	mov	r3, r2
 800173c:	011b      	lsls	r3, r3, #4
 800173e:	1a9b      	subs	r3, r3, r2
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	440b      	add	r3, r1
 8001744:	334d      	adds	r3, #77	@ 0x4d
 8001746:	2203      	movs	r2, #3
 8001748:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	78fa      	ldrb	r2, [r7, #3]
 8001750:	4611      	mov	r1, r2
 8001752:	4618      	mov	r0, r3
 8001754:	f001 fb68 	bl	8002e28 <USB_HC_Halt>
 8001758:	f000 bc02 	b.w	8001f60 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	78fa      	ldrb	r2, [r7, #3]
 8001762:	4611      	mov	r1, r2
 8001764:	4618      	mov	r0, r3
 8001766:	f001 fae2 	bl	8002d2e <USB_ReadChInterrupts>
 800176a:	4603      	mov	r3, r0
 800176c:	f003 0302 	and.w	r3, r3, #2
 8001770:	2b02      	cmp	r3, #2
 8001772:	f040 8305 	bne.w	8001d80 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8001776:	78fb      	ldrb	r3, [r7, #3]
 8001778:	015a      	lsls	r2, r3, #5
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	4413      	add	r3, r2
 800177e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001782:	461a      	mov	r2, r3
 8001784:	2302      	movs	r3, #2
 8001786:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8001788:	78fa      	ldrb	r2, [r7, #3]
 800178a:	6879      	ldr	r1, [r7, #4]
 800178c:	4613      	mov	r3, r2
 800178e:	011b      	lsls	r3, r3, #4
 8001790:	1a9b      	subs	r3, r3, r2
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	440b      	add	r3, r1
 8001796:	334d      	adds	r3, #77	@ 0x4d
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	2b01      	cmp	r3, #1
 800179c:	d114      	bne.n	80017c8 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800179e:	78fa      	ldrb	r2, [r7, #3]
 80017a0:	6879      	ldr	r1, [r7, #4]
 80017a2:	4613      	mov	r3, r2
 80017a4:	011b      	lsls	r3, r3, #4
 80017a6:	1a9b      	subs	r3, r3, r2
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	440b      	add	r3, r1
 80017ac:	334d      	adds	r3, #77	@ 0x4d
 80017ae:	2202      	movs	r2, #2
 80017b0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80017b2:	78fa      	ldrb	r2, [r7, #3]
 80017b4:	6879      	ldr	r1, [r7, #4]
 80017b6:	4613      	mov	r3, r2
 80017b8:	011b      	lsls	r3, r3, #4
 80017ba:	1a9b      	subs	r3, r3, r2
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	440b      	add	r3, r1
 80017c0:	334c      	adds	r3, #76	@ 0x4c
 80017c2:	2201      	movs	r2, #1
 80017c4:	701a      	strb	r2, [r3, #0]
 80017c6:	e2cc      	b.n	8001d62 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80017c8:	78fa      	ldrb	r2, [r7, #3]
 80017ca:	6879      	ldr	r1, [r7, #4]
 80017cc:	4613      	mov	r3, r2
 80017ce:	011b      	lsls	r3, r3, #4
 80017d0:	1a9b      	subs	r3, r3, r2
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	440b      	add	r3, r1
 80017d6:	334d      	adds	r3, #77	@ 0x4d
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	2b06      	cmp	r3, #6
 80017dc:	d114      	bne.n	8001808 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80017de:	78fa      	ldrb	r2, [r7, #3]
 80017e0:	6879      	ldr	r1, [r7, #4]
 80017e2:	4613      	mov	r3, r2
 80017e4:	011b      	lsls	r3, r3, #4
 80017e6:	1a9b      	subs	r3, r3, r2
 80017e8:	009b      	lsls	r3, r3, #2
 80017ea:	440b      	add	r3, r1
 80017ec:	334d      	adds	r3, #77	@ 0x4d
 80017ee:	2202      	movs	r2, #2
 80017f0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 80017f2:	78fa      	ldrb	r2, [r7, #3]
 80017f4:	6879      	ldr	r1, [r7, #4]
 80017f6:	4613      	mov	r3, r2
 80017f8:	011b      	lsls	r3, r3, #4
 80017fa:	1a9b      	subs	r3, r3, r2
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	440b      	add	r3, r1
 8001800:	334c      	adds	r3, #76	@ 0x4c
 8001802:	2205      	movs	r2, #5
 8001804:	701a      	strb	r2, [r3, #0]
 8001806:	e2ac      	b.n	8001d62 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8001808:	78fa      	ldrb	r2, [r7, #3]
 800180a:	6879      	ldr	r1, [r7, #4]
 800180c:	4613      	mov	r3, r2
 800180e:	011b      	lsls	r3, r3, #4
 8001810:	1a9b      	subs	r3, r3, r2
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	440b      	add	r3, r1
 8001816:	334d      	adds	r3, #77	@ 0x4d
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	2b07      	cmp	r3, #7
 800181c:	d00b      	beq.n	8001836 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800181e:	78fa      	ldrb	r2, [r7, #3]
 8001820:	6879      	ldr	r1, [r7, #4]
 8001822:	4613      	mov	r3, r2
 8001824:	011b      	lsls	r3, r3, #4
 8001826:	1a9b      	subs	r3, r3, r2
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	440b      	add	r3, r1
 800182c:	334d      	adds	r3, #77	@ 0x4d
 800182e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8001830:	2b09      	cmp	r3, #9
 8001832:	f040 80a6 	bne.w	8001982 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001836:	78fa      	ldrb	r2, [r7, #3]
 8001838:	6879      	ldr	r1, [r7, #4]
 800183a:	4613      	mov	r3, r2
 800183c:	011b      	lsls	r3, r3, #4
 800183e:	1a9b      	subs	r3, r3, r2
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	440b      	add	r3, r1
 8001844:	334d      	adds	r3, #77	@ 0x4d
 8001846:	2202      	movs	r2, #2
 8001848:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800184a:	78fa      	ldrb	r2, [r7, #3]
 800184c:	6879      	ldr	r1, [r7, #4]
 800184e:	4613      	mov	r3, r2
 8001850:	011b      	lsls	r3, r3, #4
 8001852:	1a9b      	subs	r3, r3, r2
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	440b      	add	r3, r1
 8001858:	3344      	adds	r3, #68	@ 0x44
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	1c59      	adds	r1, r3, #1
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	4613      	mov	r3, r2
 8001862:	011b      	lsls	r3, r3, #4
 8001864:	1a9b      	subs	r3, r3, r2
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	4403      	add	r3, r0
 800186a:	3344      	adds	r3, #68	@ 0x44
 800186c:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800186e:	78fa      	ldrb	r2, [r7, #3]
 8001870:	6879      	ldr	r1, [r7, #4]
 8001872:	4613      	mov	r3, r2
 8001874:	011b      	lsls	r3, r3, #4
 8001876:	1a9b      	subs	r3, r3, r2
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	440b      	add	r3, r1
 800187c:	3344      	adds	r3, #68	@ 0x44
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	2b02      	cmp	r3, #2
 8001882:	d943      	bls.n	800190c <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8001884:	78fa      	ldrb	r2, [r7, #3]
 8001886:	6879      	ldr	r1, [r7, #4]
 8001888:	4613      	mov	r3, r2
 800188a:	011b      	lsls	r3, r3, #4
 800188c:	1a9b      	subs	r3, r3, r2
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	440b      	add	r3, r1
 8001892:	3344      	adds	r3, #68	@ 0x44
 8001894:	2200      	movs	r2, #0
 8001896:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8001898:	78fa      	ldrb	r2, [r7, #3]
 800189a:	6879      	ldr	r1, [r7, #4]
 800189c:	4613      	mov	r3, r2
 800189e:	011b      	lsls	r3, r3, #4
 80018a0:	1a9b      	subs	r3, r3, r2
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	440b      	add	r3, r1
 80018a6:	331a      	adds	r3, #26
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d123      	bne.n	80018f6 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 80018ae:	78fa      	ldrb	r2, [r7, #3]
 80018b0:	6879      	ldr	r1, [r7, #4]
 80018b2:	4613      	mov	r3, r2
 80018b4:	011b      	lsls	r3, r3, #4
 80018b6:	1a9b      	subs	r3, r3, r2
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	440b      	add	r3, r1
 80018bc:	331b      	adds	r3, #27
 80018be:	2200      	movs	r2, #0
 80018c0:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 80018c2:	78fa      	ldrb	r2, [r7, #3]
 80018c4:	6879      	ldr	r1, [r7, #4]
 80018c6:	4613      	mov	r3, r2
 80018c8:	011b      	lsls	r3, r3, #4
 80018ca:	1a9b      	subs	r3, r3, r2
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	440b      	add	r3, r1
 80018d0:	331c      	adds	r3, #28
 80018d2:	2200      	movs	r2, #0
 80018d4:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80018d6:	78fb      	ldrb	r3, [r7, #3]
 80018d8:	015a      	lsls	r2, r3, #5
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	4413      	add	r3, r2
 80018de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	78fa      	ldrb	r2, [r7, #3]
 80018e6:	0151      	lsls	r1, r2, #5
 80018e8:	693a      	ldr	r2, [r7, #16]
 80018ea:	440a      	add	r2, r1
 80018ec:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80018f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80018f4:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 80018f6:	78fa      	ldrb	r2, [r7, #3]
 80018f8:	6879      	ldr	r1, [r7, #4]
 80018fa:	4613      	mov	r3, r2
 80018fc:	011b      	lsls	r3, r3, #4
 80018fe:	1a9b      	subs	r3, r3, r2
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	440b      	add	r3, r1
 8001904:	334c      	adds	r3, #76	@ 0x4c
 8001906:	2204      	movs	r2, #4
 8001908:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800190a:	e229      	b.n	8001d60 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800190c:	78fa      	ldrb	r2, [r7, #3]
 800190e:	6879      	ldr	r1, [r7, #4]
 8001910:	4613      	mov	r3, r2
 8001912:	011b      	lsls	r3, r3, #4
 8001914:	1a9b      	subs	r3, r3, r2
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	440b      	add	r3, r1
 800191a:	334c      	adds	r3, #76	@ 0x4c
 800191c:	2202      	movs	r2, #2
 800191e:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001920:	78fa      	ldrb	r2, [r7, #3]
 8001922:	6879      	ldr	r1, [r7, #4]
 8001924:	4613      	mov	r3, r2
 8001926:	011b      	lsls	r3, r3, #4
 8001928:	1a9b      	subs	r3, r3, r2
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	440b      	add	r3, r1
 800192e:	3326      	adds	r3, #38	@ 0x26
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d00b      	beq.n	800194e <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001936:	78fa      	ldrb	r2, [r7, #3]
 8001938:	6879      	ldr	r1, [r7, #4]
 800193a:	4613      	mov	r3, r2
 800193c:	011b      	lsls	r3, r3, #4
 800193e:	1a9b      	subs	r3, r3, r2
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	440b      	add	r3, r1
 8001944:	3326      	adds	r3, #38	@ 0x26
 8001946:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001948:	2b02      	cmp	r3, #2
 800194a:	f040 8209 	bne.w	8001d60 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800194e:	78fb      	ldrb	r3, [r7, #3]
 8001950:	015a      	lsls	r2, r3, #5
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	4413      	add	r3, r2
 8001956:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8001964:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800196c:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800196e:	78fb      	ldrb	r3, [r7, #3]
 8001970:	015a      	lsls	r2, r3, #5
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	4413      	add	r3, r2
 8001976:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800197a:	461a      	mov	r2, r3
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8001980:	e1ee      	b.n	8001d60 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8001982:	78fa      	ldrb	r2, [r7, #3]
 8001984:	6879      	ldr	r1, [r7, #4]
 8001986:	4613      	mov	r3, r2
 8001988:	011b      	lsls	r3, r3, #4
 800198a:	1a9b      	subs	r3, r3, r2
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	440b      	add	r3, r1
 8001990:	334d      	adds	r3, #77	@ 0x4d
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	2b05      	cmp	r3, #5
 8001996:	f040 80c8 	bne.w	8001b2a <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800199a:	78fa      	ldrb	r2, [r7, #3]
 800199c:	6879      	ldr	r1, [r7, #4]
 800199e:	4613      	mov	r3, r2
 80019a0:	011b      	lsls	r3, r3, #4
 80019a2:	1a9b      	subs	r3, r3, r2
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	440b      	add	r3, r1
 80019a8:	334d      	adds	r3, #77	@ 0x4d
 80019aa:	2202      	movs	r2, #2
 80019ac:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80019ae:	78fa      	ldrb	r2, [r7, #3]
 80019b0:	6879      	ldr	r1, [r7, #4]
 80019b2:	4613      	mov	r3, r2
 80019b4:	011b      	lsls	r3, r3, #4
 80019b6:	1a9b      	subs	r3, r3, r2
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	440b      	add	r3, r1
 80019bc:	331b      	adds	r3, #27
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	f040 81ce 	bne.w	8001d62 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80019c6:	78fa      	ldrb	r2, [r7, #3]
 80019c8:	6879      	ldr	r1, [r7, #4]
 80019ca:	4613      	mov	r3, r2
 80019cc:	011b      	lsls	r3, r3, #4
 80019ce:	1a9b      	subs	r3, r3, r2
 80019d0:	009b      	lsls	r3, r3, #2
 80019d2:	440b      	add	r3, r1
 80019d4:	3326      	adds	r3, #38	@ 0x26
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	2b03      	cmp	r3, #3
 80019da:	d16b      	bne.n	8001ab4 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 80019dc:	78fa      	ldrb	r2, [r7, #3]
 80019de:	6879      	ldr	r1, [r7, #4]
 80019e0:	4613      	mov	r3, r2
 80019e2:	011b      	lsls	r3, r3, #4
 80019e4:	1a9b      	subs	r3, r3, r2
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	440b      	add	r3, r1
 80019ea:	3348      	adds	r3, #72	@ 0x48
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	1c59      	adds	r1, r3, #1
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	4613      	mov	r3, r2
 80019f4:	011b      	lsls	r3, r3, #4
 80019f6:	1a9b      	subs	r3, r3, r2
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	4403      	add	r3, r0
 80019fc:	3348      	adds	r3, #72	@ 0x48
 80019fe:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8001a00:	78fa      	ldrb	r2, [r7, #3]
 8001a02:	6879      	ldr	r1, [r7, #4]
 8001a04:	4613      	mov	r3, r2
 8001a06:	011b      	lsls	r3, r3, #4
 8001a08:	1a9b      	subs	r3, r3, r2
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	440b      	add	r3, r1
 8001a0e:	3348      	adds	r3, #72	@ 0x48
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	2b02      	cmp	r3, #2
 8001a14:	d943      	bls.n	8001a9e <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8001a16:	78fa      	ldrb	r2, [r7, #3]
 8001a18:	6879      	ldr	r1, [r7, #4]
 8001a1a:	4613      	mov	r3, r2
 8001a1c:	011b      	lsls	r3, r3, #4
 8001a1e:	1a9b      	subs	r3, r3, r2
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	440b      	add	r3, r1
 8001a24:	3348      	adds	r3, #72	@ 0x48
 8001a26:	2200      	movs	r2, #0
 8001a28:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8001a2a:	78fa      	ldrb	r2, [r7, #3]
 8001a2c:	6879      	ldr	r1, [r7, #4]
 8001a2e:	4613      	mov	r3, r2
 8001a30:	011b      	lsls	r3, r3, #4
 8001a32:	1a9b      	subs	r3, r3, r2
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	440b      	add	r3, r1
 8001a38:	331b      	adds	r3, #27
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8001a3e:	78fa      	ldrb	r2, [r7, #3]
 8001a40:	6879      	ldr	r1, [r7, #4]
 8001a42:	4613      	mov	r3, r2
 8001a44:	011b      	lsls	r3, r3, #4
 8001a46:	1a9b      	subs	r3, r3, r2
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	440b      	add	r3, r1
 8001a4c:	3344      	adds	r3, #68	@ 0x44
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	d809      	bhi.n	8001a68 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8001a54:	78fa      	ldrb	r2, [r7, #3]
 8001a56:	6879      	ldr	r1, [r7, #4]
 8001a58:	4613      	mov	r3, r2
 8001a5a:	011b      	lsls	r3, r3, #4
 8001a5c:	1a9b      	subs	r3, r3, r2
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	440b      	add	r3, r1
 8001a62:	331c      	adds	r3, #28
 8001a64:	2201      	movs	r2, #1
 8001a66:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8001a68:	78fb      	ldrb	r3, [r7, #3]
 8001a6a:	015a      	lsls	r2, r3, #5
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	4413      	add	r3, r2
 8001a70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	78fa      	ldrb	r2, [r7, #3]
 8001a78:	0151      	lsls	r1, r2, #5
 8001a7a:	693a      	ldr	r2, [r7, #16]
 8001a7c:	440a      	add	r2, r1
 8001a7e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001a82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a86:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8001a88:	78fa      	ldrb	r2, [r7, #3]
 8001a8a:	6879      	ldr	r1, [r7, #4]
 8001a8c:	4613      	mov	r3, r2
 8001a8e:	011b      	lsls	r3, r3, #4
 8001a90:	1a9b      	subs	r3, r3, r2
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	440b      	add	r3, r1
 8001a96:	334c      	adds	r3, #76	@ 0x4c
 8001a98:	2204      	movs	r2, #4
 8001a9a:	701a      	strb	r2, [r3, #0]
 8001a9c:	e014      	b.n	8001ac8 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001a9e:	78fa      	ldrb	r2, [r7, #3]
 8001aa0:	6879      	ldr	r1, [r7, #4]
 8001aa2:	4613      	mov	r3, r2
 8001aa4:	011b      	lsls	r3, r3, #4
 8001aa6:	1a9b      	subs	r3, r3, r2
 8001aa8:	009b      	lsls	r3, r3, #2
 8001aaa:	440b      	add	r3, r1
 8001aac:	334c      	adds	r3, #76	@ 0x4c
 8001aae:	2202      	movs	r2, #2
 8001ab0:	701a      	strb	r2, [r3, #0]
 8001ab2:	e009      	b.n	8001ac8 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001ab4:	78fa      	ldrb	r2, [r7, #3]
 8001ab6:	6879      	ldr	r1, [r7, #4]
 8001ab8:	4613      	mov	r3, r2
 8001aba:	011b      	lsls	r3, r3, #4
 8001abc:	1a9b      	subs	r3, r3, r2
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	440b      	add	r3, r1
 8001ac2:	334c      	adds	r3, #76	@ 0x4c
 8001ac4:	2202      	movs	r2, #2
 8001ac6:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001ac8:	78fa      	ldrb	r2, [r7, #3]
 8001aca:	6879      	ldr	r1, [r7, #4]
 8001acc:	4613      	mov	r3, r2
 8001ace:	011b      	lsls	r3, r3, #4
 8001ad0:	1a9b      	subs	r3, r3, r2
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	440b      	add	r3, r1
 8001ad6:	3326      	adds	r3, #38	@ 0x26
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d00b      	beq.n	8001af6 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001ade:	78fa      	ldrb	r2, [r7, #3]
 8001ae0:	6879      	ldr	r1, [r7, #4]
 8001ae2:	4613      	mov	r3, r2
 8001ae4:	011b      	lsls	r3, r3, #4
 8001ae6:	1a9b      	subs	r3, r3, r2
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	440b      	add	r3, r1
 8001aec:	3326      	adds	r3, #38	@ 0x26
 8001aee:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	f040 8136 	bne.w	8001d62 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8001af6:	78fb      	ldrb	r3, [r7, #3]
 8001af8:	015a      	lsls	r2, r3, #5
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	4413      	add	r3, r2
 8001afe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8001b0c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001b14:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8001b16:	78fb      	ldrb	r3, [r7, #3]
 8001b18:	015a      	lsls	r2, r3, #5
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	4413      	add	r3, r2
 8001b1e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001b22:	461a      	mov	r2, r3
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	6013      	str	r3, [r2, #0]
 8001b28:	e11b      	b.n	8001d62 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8001b2a:	78fa      	ldrb	r2, [r7, #3]
 8001b2c:	6879      	ldr	r1, [r7, #4]
 8001b2e:	4613      	mov	r3, r2
 8001b30:	011b      	lsls	r3, r3, #4
 8001b32:	1a9b      	subs	r3, r3, r2
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	440b      	add	r3, r1
 8001b38:	334d      	adds	r3, #77	@ 0x4d
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	2b03      	cmp	r3, #3
 8001b3e:	f040 8081 	bne.w	8001c44 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001b42:	78fa      	ldrb	r2, [r7, #3]
 8001b44:	6879      	ldr	r1, [r7, #4]
 8001b46:	4613      	mov	r3, r2
 8001b48:	011b      	lsls	r3, r3, #4
 8001b4a:	1a9b      	subs	r3, r3, r2
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	440b      	add	r3, r1
 8001b50:	334d      	adds	r3, #77	@ 0x4d
 8001b52:	2202      	movs	r2, #2
 8001b54:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8001b56:	78fa      	ldrb	r2, [r7, #3]
 8001b58:	6879      	ldr	r1, [r7, #4]
 8001b5a:	4613      	mov	r3, r2
 8001b5c:	011b      	lsls	r3, r3, #4
 8001b5e:	1a9b      	subs	r3, r3, r2
 8001b60:	009b      	lsls	r3, r3, #2
 8001b62:	440b      	add	r3, r1
 8001b64:	331b      	adds	r3, #27
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	f040 80fa 	bne.w	8001d62 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001b6e:	78fa      	ldrb	r2, [r7, #3]
 8001b70:	6879      	ldr	r1, [r7, #4]
 8001b72:	4613      	mov	r3, r2
 8001b74:	011b      	lsls	r3, r3, #4
 8001b76:	1a9b      	subs	r3, r3, r2
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	440b      	add	r3, r1
 8001b7c:	334c      	adds	r3, #76	@ 0x4c
 8001b7e:	2202      	movs	r2, #2
 8001b80:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8001b82:	78fb      	ldrb	r3, [r7, #3]
 8001b84:	015a      	lsls	r2, r3, #5
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	4413      	add	r3, r2
 8001b8a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	78fa      	ldrb	r2, [r7, #3]
 8001b92:	0151      	lsls	r1, r2, #5
 8001b94:	693a      	ldr	r2, [r7, #16]
 8001b96:	440a      	add	r2, r1
 8001b98:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001b9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ba0:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8001ba2:	78fb      	ldrb	r3, [r7, #3]
 8001ba4:	015a      	lsls	r2, r3, #5
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	4413      	add	r3, r2
 8001baa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001bae:	68db      	ldr	r3, [r3, #12]
 8001bb0:	78fa      	ldrb	r2, [r7, #3]
 8001bb2:	0151      	lsls	r1, r2, #5
 8001bb4:	693a      	ldr	r2, [r7, #16]
 8001bb6:	440a      	add	r2, r1
 8001bb8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001bbc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001bc0:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8001bc2:	78fb      	ldrb	r3, [r7, #3]
 8001bc4:	015a      	lsls	r2, r3, #5
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	4413      	add	r3, r2
 8001bca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	78fa      	ldrb	r2, [r7, #3]
 8001bd2:	0151      	lsls	r1, r2, #5
 8001bd4:	693a      	ldr	r2, [r7, #16]
 8001bd6:	440a      	add	r2, r1
 8001bd8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001bdc:	f023 0320 	bic.w	r3, r3, #32
 8001be0:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001be2:	78fa      	ldrb	r2, [r7, #3]
 8001be4:	6879      	ldr	r1, [r7, #4]
 8001be6:	4613      	mov	r3, r2
 8001be8:	011b      	lsls	r3, r3, #4
 8001bea:	1a9b      	subs	r3, r3, r2
 8001bec:	009b      	lsls	r3, r3, #2
 8001bee:	440b      	add	r3, r1
 8001bf0:	3326      	adds	r3, #38	@ 0x26
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d00b      	beq.n	8001c10 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001bf8:	78fa      	ldrb	r2, [r7, #3]
 8001bfa:	6879      	ldr	r1, [r7, #4]
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	011b      	lsls	r3, r3, #4
 8001c00:	1a9b      	subs	r3, r3, r2
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	440b      	add	r3, r1
 8001c06:	3326      	adds	r3, #38	@ 0x26
 8001c08:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	f040 80a9 	bne.w	8001d62 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8001c10:	78fb      	ldrb	r3, [r7, #3]
 8001c12:	015a      	lsls	r2, r3, #5
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	4413      	add	r3, r2
 8001c18:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8001c26:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001c2e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8001c30:	78fb      	ldrb	r3, [r7, #3]
 8001c32:	015a      	lsls	r2, r3, #5
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	4413      	add	r3, r2
 8001c38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	6013      	str	r3, [r2, #0]
 8001c42:	e08e      	b.n	8001d62 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8001c44:	78fa      	ldrb	r2, [r7, #3]
 8001c46:	6879      	ldr	r1, [r7, #4]
 8001c48:	4613      	mov	r3, r2
 8001c4a:	011b      	lsls	r3, r3, #4
 8001c4c:	1a9b      	subs	r3, r3, r2
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	440b      	add	r3, r1
 8001c52:	334d      	adds	r3, #77	@ 0x4d
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	2b04      	cmp	r3, #4
 8001c58:	d143      	bne.n	8001ce2 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001c5a:	78fa      	ldrb	r2, [r7, #3]
 8001c5c:	6879      	ldr	r1, [r7, #4]
 8001c5e:	4613      	mov	r3, r2
 8001c60:	011b      	lsls	r3, r3, #4
 8001c62:	1a9b      	subs	r3, r3, r2
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	440b      	add	r3, r1
 8001c68:	334d      	adds	r3, #77	@ 0x4d
 8001c6a:	2202      	movs	r2, #2
 8001c6c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001c6e:	78fa      	ldrb	r2, [r7, #3]
 8001c70:	6879      	ldr	r1, [r7, #4]
 8001c72:	4613      	mov	r3, r2
 8001c74:	011b      	lsls	r3, r3, #4
 8001c76:	1a9b      	subs	r3, r3, r2
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	440b      	add	r3, r1
 8001c7c:	334c      	adds	r3, #76	@ 0x4c
 8001c7e:	2202      	movs	r2, #2
 8001c80:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001c82:	78fa      	ldrb	r2, [r7, #3]
 8001c84:	6879      	ldr	r1, [r7, #4]
 8001c86:	4613      	mov	r3, r2
 8001c88:	011b      	lsls	r3, r3, #4
 8001c8a:	1a9b      	subs	r3, r3, r2
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	440b      	add	r3, r1
 8001c90:	3326      	adds	r3, #38	@ 0x26
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d00a      	beq.n	8001cae <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001c98:	78fa      	ldrb	r2, [r7, #3]
 8001c9a:	6879      	ldr	r1, [r7, #4]
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	011b      	lsls	r3, r3, #4
 8001ca0:	1a9b      	subs	r3, r3, r2
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	440b      	add	r3, r1
 8001ca6:	3326      	adds	r3, #38	@ 0x26
 8001ca8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d159      	bne.n	8001d62 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8001cae:	78fb      	ldrb	r3, [r7, #3]
 8001cb0:	015a      	lsls	r2, r3, #5
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	4413      	add	r3, r2
 8001cb6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8001cc4:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001ccc:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8001cce:	78fb      	ldrb	r3, [r7, #3]
 8001cd0:	015a      	lsls	r2, r3, #5
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	4413      	add	r3, r2
 8001cd6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001cda:	461a      	mov	r2, r3
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	6013      	str	r3, [r2, #0]
 8001ce0:	e03f      	b.n	8001d62 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8001ce2:	78fa      	ldrb	r2, [r7, #3]
 8001ce4:	6879      	ldr	r1, [r7, #4]
 8001ce6:	4613      	mov	r3, r2
 8001ce8:	011b      	lsls	r3, r3, #4
 8001cea:	1a9b      	subs	r3, r3, r2
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	440b      	add	r3, r1
 8001cf0:	334d      	adds	r3, #77	@ 0x4d
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	2b08      	cmp	r3, #8
 8001cf6:	d126      	bne.n	8001d46 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001cf8:	78fa      	ldrb	r2, [r7, #3]
 8001cfa:	6879      	ldr	r1, [r7, #4]
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	011b      	lsls	r3, r3, #4
 8001d00:	1a9b      	subs	r3, r3, r2
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	440b      	add	r3, r1
 8001d06:	334d      	adds	r3, #77	@ 0x4d
 8001d08:	2202      	movs	r2, #2
 8001d0a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8001d0c:	78fa      	ldrb	r2, [r7, #3]
 8001d0e:	6879      	ldr	r1, [r7, #4]
 8001d10:	4613      	mov	r3, r2
 8001d12:	011b      	lsls	r3, r3, #4
 8001d14:	1a9b      	subs	r3, r3, r2
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	440b      	add	r3, r1
 8001d1a:	3344      	adds	r3, #68	@ 0x44
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	1c59      	adds	r1, r3, #1
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	4613      	mov	r3, r2
 8001d24:	011b      	lsls	r3, r3, #4
 8001d26:	1a9b      	subs	r3, r3, r2
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	4403      	add	r3, r0
 8001d2c:	3344      	adds	r3, #68	@ 0x44
 8001d2e:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8001d30:	78fa      	ldrb	r2, [r7, #3]
 8001d32:	6879      	ldr	r1, [r7, #4]
 8001d34:	4613      	mov	r3, r2
 8001d36:	011b      	lsls	r3, r3, #4
 8001d38:	1a9b      	subs	r3, r3, r2
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	440b      	add	r3, r1
 8001d3e:	334c      	adds	r3, #76	@ 0x4c
 8001d40:	2204      	movs	r2, #4
 8001d42:	701a      	strb	r2, [r3, #0]
 8001d44:	e00d      	b.n	8001d62 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8001d46:	78fa      	ldrb	r2, [r7, #3]
 8001d48:	6879      	ldr	r1, [r7, #4]
 8001d4a:	4613      	mov	r3, r2
 8001d4c:	011b      	lsls	r3, r3, #4
 8001d4e:	1a9b      	subs	r3, r3, r2
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	440b      	add	r3, r1
 8001d54:	334d      	adds	r3, #77	@ 0x4d
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	f000 8100 	beq.w	8001f5e <HCD_HC_IN_IRQHandler+0xcca>
 8001d5e:	e000      	b.n	8001d62 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8001d60:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8001d62:	78fa      	ldrb	r2, [r7, #3]
 8001d64:	6879      	ldr	r1, [r7, #4]
 8001d66:	4613      	mov	r3, r2
 8001d68:	011b      	lsls	r3, r3, #4
 8001d6a:	1a9b      	subs	r3, r3, r2
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	440b      	add	r3, r1
 8001d70:	334c      	adds	r3, #76	@ 0x4c
 8001d72:	781a      	ldrb	r2, [r3, #0]
 8001d74:	78fb      	ldrb	r3, [r7, #3]
 8001d76:	4619      	mov	r1, r3
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	f001 fad0 	bl	800331e <HAL_HCD_HC_NotifyURBChange_Callback>
 8001d7e:	e0ef      	b.n	8001f60 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	78fa      	ldrb	r2, [r7, #3]
 8001d86:	4611      	mov	r1, r2
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f000 ffd0 	bl	8002d2e <USB_ReadChInterrupts>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d94:	2b40      	cmp	r3, #64	@ 0x40
 8001d96:	d12f      	bne.n	8001df8 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8001d98:	78fb      	ldrb	r3, [r7, #3]
 8001d9a:	015a      	lsls	r2, r3, #5
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	4413      	add	r3, r2
 8001da0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001da4:	461a      	mov	r2, r3
 8001da6:	2340      	movs	r3, #64	@ 0x40
 8001da8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8001daa:	78fa      	ldrb	r2, [r7, #3]
 8001dac:	6879      	ldr	r1, [r7, #4]
 8001dae:	4613      	mov	r3, r2
 8001db0:	011b      	lsls	r3, r3, #4
 8001db2:	1a9b      	subs	r3, r3, r2
 8001db4:	009b      	lsls	r3, r3, #2
 8001db6:	440b      	add	r3, r1
 8001db8:	334d      	adds	r3, #77	@ 0x4d
 8001dba:	2205      	movs	r2, #5
 8001dbc:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8001dbe:	78fa      	ldrb	r2, [r7, #3]
 8001dc0:	6879      	ldr	r1, [r7, #4]
 8001dc2:	4613      	mov	r3, r2
 8001dc4:	011b      	lsls	r3, r3, #4
 8001dc6:	1a9b      	subs	r3, r3, r2
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	440b      	add	r3, r1
 8001dcc:	331a      	adds	r3, #26
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d109      	bne.n	8001de8 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8001dd4:	78fa      	ldrb	r2, [r7, #3]
 8001dd6:	6879      	ldr	r1, [r7, #4]
 8001dd8:	4613      	mov	r3, r2
 8001dda:	011b      	lsls	r3, r3, #4
 8001ddc:	1a9b      	subs	r3, r3, r2
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	440b      	add	r3, r1
 8001de2:	3344      	adds	r3, #68	@ 0x44
 8001de4:	2200      	movs	r2, #0
 8001de6:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	78fa      	ldrb	r2, [r7, #3]
 8001dee:	4611      	mov	r1, r2
 8001df0:	4618      	mov	r0, r3
 8001df2:	f001 f819 	bl	8002e28 <USB_HC_Halt>
 8001df6:	e0b3      	b.n	8001f60 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	78fa      	ldrb	r2, [r7, #3]
 8001dfe:	4611      	mov	r1, r2
 8001e00:	4618      	mov	r0, r3
 8001e02:	f000 ff94 	bl	8002d2e <USB_ReadChInterrupts>
 8001e06:	4603      	mov	r3, r0
 8001e08:	f003 0310 	and.w	r3, r3, #16
 8001e0c:	2b10      	cmp	r3, #16
 8001e0e:	f040 80a7 	bne.w	8001f60 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8001e12:	78fa      	ldrb	r2, [r7, #3]
 8001e14:	6879      	ldr	r1, [r7, #4]
 8001e16:	4613      	mov	r3, r2
 8001e18:	011b      	lsls	r3, r3, #4
 8001e1a:	1a9b      	subs	r3, r3, r2
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	440b      	add	r3, r1
 8001e20:	3326      	adds	r3, #38	@ 0x26
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	2b03      	cmp	r3, #3
 8001e26:	d11b      	bne.n	8001e60 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8001e28:	78fa      	ldrb	r2, [r7, #3]
 8001e2a:	6879      	ldr	r1, [r7, #4]
 8001e2c:	4613      	mov	r3, r2
 8001e2e:	011b      	lsls	r3, r3, #4
 8001e30:	1a9b      	subs	r3, r3, r2
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	440b      	add	r3, r1
 8001e36:	3344      	adds	r3, #68	@ 0x44
 8001e38:	2200      	movs	r2, #0
 8001e3a:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8001e3c:	78fa      	ldrb	r2, [r7, #3]
 8001e3e:	6879      	ldr	r1, [r7, #4]
 8001e40:	4613      	mov	r3, r2
 8001e42:	011b      	lsls	r3, r3, #4
 8001e44:	1a9b      	subs	r3, r3, r2
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	440b      	add	r3, r1
 8001e4a:	334d      	adds	r3, #77	@ 0x4d
 8001e4c:	2204      	movs	r2, #4
 8001e4e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	78fa      	ldrb	r2, [r7, #3]
 8001e56:	4611      	mov	r1, r2
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f000 ffe5 	bl	8002e28 <USB_HC_Halt>
 8001e5e:	e03f      	b.n	8001ee0 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001e60:	78fa      	ldrb	r2, [r7, #3]
 8001e62:	6879      	ldr	r1, [r7, #4]
 8001e64:	4613      	mov	r3, r2
 8001e66:	011b      	lsls	r3, r3, #4
 8001e68:	1a9b      	subs	r3, r3, r2
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	440b      	add	r3, r1
 8001e6e:	3326      	adds	r3, #38	@ 0x26
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d00a      	beq.n	8001e8c <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001e76:	78fa      	ldrb	r2, [r7, #3]
 8001e78:	6879      	ldr	r1, [r7, #4]
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	011b      	lsls	r3, r3, #4
 8001e7e:	1a9b      	subs	r3, r3, r2
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	440b      	add	r3, r1
 8001e84:	3326      	adds	r3, #38	@ 0x26
 8001e86:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001e88:	2b02      	cmp	r3, #2
 8001e8a:	d129      	bne.n	8001ee0 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8001e8c:	78fa      	ldrb	r2, [r7, #3]
 8001e8e:	6879      	ldr	r1, [r7, #4]
 8001e90:	4613      	mov	r3, r2
 8001e92:	011b      	lsls	r3, r3, #4
 8001e94:	1a9b      	subs	r3, r3, r2
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	440b      	add	r3, r1
 8001e9a:	3344      	adds	r3, #68	@ 0x44
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	799b      	ldrb	r3, [r3, #6]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d00a      	beq.n	8001ebe <HCD_HC_IN_IRQHandler+0xc2a>
 8001ea8:	78fa      	ldrb	r2, [r7, #3]
 8001eaa:	6879      	ldr	r1, [r7, #4]
 8001eac:	4613      	mov	r3, r2
 8001eae:	011b      	lsls	r3, r3, #4
 8001eb0:	1a9b      	subs	r3, r3, r2
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	440b      	add	r3, r1
 8001eb6:	331b      	adds	r3, #27
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d110      	bne.n	8001ee0 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8001ebe:	78fa      	ldrb	r2, [r7, #3]
 8001ec0:	6879      	ldr	r1, [r7, #4]
 8001ec2:	4613      	mov	r3, r2
 8001ec4:	011b      	lsls	r3, r3, #4
 8001ec6:	1a9b      	subs	r3, r3, r2
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	440b      	add	r3, r1
 8001ecc:	334d      	adds	r3, #77	@ 0x4d
 8001ece:	2204      	movs	r2, #4
 8001ed0:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	78fa      	ldrb	r2, [r7, #3]
 8001ed8:	4611      	mov	r1, r2
 8001eda:	4618      	mov	r0, r3
 8001edc:	f000 ffa4 	bl	8002e28 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8001ee0:	78fa      	ldrb	r2, [r7, #3]
 8001ee2:	6879      	ldr	r1, [r7, #4]
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	011b      	lsls	r3, r3, #4
 8001ee8:	1a9b      	subs	r3, r3, r2
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	440b      	add	r3, r1
 8001eee:	331b      	adds	r3, #27
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d129      	bne.n	8001f4a <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8001ef6:	78fa      	ldrb	r2, [r7, #3]
 8001ef8:	6879      	ldr	r1, [r7, #4]
 8001efa:	4613      	mov	r3, r2
 8001efc:	011b      	lsls	r3, r3, #4
 8001efe:	1a9b      	subs	r3, r3, r2
 8001f00:	009b      	lsls	r3, r3, #2
 8001f02:	440b      	add	r3, r1
 8001f04:	331b      	adds	r3, #27
 8001f06:	2200      	movs	r2, #0
 8001f08:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8001f0a:	78fb      	ldrb	r3, [r7, #3]
 8001f0c:	015a      	lsls	r2, r3, #5
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	4413      	add	r3, r2
 8001f12:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	78fa      	ldrb	r2, [r7, #3]
 8001f1a:	0151      	lsls	r1, r2, #5
 8001f1c:	693a      	ldr	r2, [r7, #16]
 8001f1e:	440a      	add	r2, r1
 8001f20:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001f24:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f28:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8001f2a:	78fb      	ldrb	r3, [r7, #3]
 8001f2c:	015a      	lsls	r2, r3, #5
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	4413      	add	r3, r2
 8001f32:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	78fa      	ldrb	r2, [r7, #3]
 8001f3a:	0151      	lsls	r1, r2, #5
 8001f3c:	693a      	ldr	r2, [r7, #16]
 8001f3e:	440a      	add	r2, r1
 8001f40:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001f44:	f043 0320 	orr.w	r3, r3, #32
 8001f48:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8001f4a:	78fb      	ldrb	r3, [r7, #3]
 8001f4c:	015a      	lsls	r2, r3, #5
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	4413      	add	r3, r2
 8001f52:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f56:	461a      	mov	r2, r3
 8001f58:	2310      	movs	r3, #16
 8001f5a:	6093      	str	r3, [r2, #8]
 8001f5c:	e000      	b.n	8001f60 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8001f5e:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8001f60:	3718      	adds	r7, #24
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}

08001f66 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001f66:	b580      	push	{r7, lr}
 8001f68:	b086      	sub	sp, #24
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	6078      	str	r0, [r7, #4]
 8001f6e:	460b      	mov	r3, r1
 8001f70:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	78fa      	ldrb	r2, [r7, #3]
 8001f82:	4611      	mov	r1, r2
 8001f84:	4618      	mov	r0, r3
 8001f86:	f000 fed2 	bl	8002d2e <USB_ReadChInterrupts>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	f003 0304 	and.w	r3, r3, #4
 8001f90:	2b04      	cmp	r3, #4
 8001f92:	d11b      	bne.n	8001fcc <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8001f94:	78fb      	ldrb	r3, [r7, #3]
 8001f96:	015a      	lsls	r2, r3, #5
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	4413      	add	r3, r2
 8001f9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	2304      	movs	r3, #4
 8001fa4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001fa6:	78fa      	ldrb	r2, [r7, #3]
 8001fa8:	6879      	ldr	r1, [r7, #4]
 8001faa:	4613      	mov	r3, r2
 8001fac:	011b      	lsls	r3, r3, #4
 8001fae:	1a9b      	subs	r3, r3, r2
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	440b      	add	r3, r1
 8001fb4:	334d      	adds	r3, #77	@ 0x4d
 8001fb6:	2207      	movs	r2, #7
 8001fb8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	78fa      	ldrb	r2, [r7, #3]
 8001fc0:	4611      	mov	r1, r2
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f000 ff30 	bl	8002e28 <USB_HC_Halt>
 8001fc8:	f000 bc6f 	b.w	80028aa <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	78fa      	ldrb	r2, [r7, #3]
 8001fd2:	4611      	mov	r1, r2
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f000 feaa 	bl	8002d2e <USB_ReadChInterrupts>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	f003 0320 	and.w	r3, r3, #32
 8001fe0:	2b20      	cmp	r3, #32
 8001fe2:	f040 8082 	bne.w	80020ea <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8001fe6:	78fb      	ldrb	r3, [r7, #3]
 8001fe8:	015a      	lsls	r2, r3, #5
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	4413      	add	r3, r2
 8001fee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	2320      	movs	r3, #32
 8001ff6:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8001ff8:	78fa      	ldrb	r2, [r7, #3]
 8001ffa:	6879      	ldr	r1, [r7, #4]
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	011b      	lsls	r3, r3, #4
 8002000:	1a9b      	subs	r3, r3, r2
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	440b      	add	r3, r1
 8002006:	3319      	adds	r3, #25
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	2b01      	cmp	r3, #1
 800200c:	d124      	bne.n	8002058 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 800200e:	78fa      	ldrb	r2, [r7, #3]
 8002010:	6879      	ldr	r1, [r7, #4]
 8002012:	4613      	mov	r3, r2
 8002014:	011b      	lsls	r3, r3, #4
 8002016:	1a9b      	subs	r3, r3, r2
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	440b      	add	r3, r1
 800201c:	3319      	adds	r3, #25
 800201e:	2200      	movs	r2, #0
 8002020:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002022:	78fa      	ldrb	r2, [r7, #3]
 8002024:	6879      	ldr	r1, [r7, #4]
 8002026:	4613      	mov	r3, r2
 8002028:	011b      	lsls	r3, r3, #4
 800202a:	1a9b      	subs	r3, r3, r2
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	440b      	add	r3, r1
 8002030:	334c      	adds	r3, #76	@ 0x4c
 8002032:	2202      	movs	r2, #2
 8002034:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002036:	78fa      	ldrb	r2, [r7, #3]
 8002038:	6879      	ldr	r1, [r7, #4]
 800203a:	4613      	mov	r3, r2
 800203c:	011b      	lsls	r3, r3, #4
 800203e:	1a9b      	subs	r3, r3, r2
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	440b      	add	r3, r1
 8002044:	334d      	adds	r3, #77	@ 0x4d
 8002046:	2203      	movs	r2, #3
 8002048:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	78fa      	ldrb	r2, [r7, #3]
 8002050:	4611      	mov	r1, r2
 8002052:	4618      	mov	r0, r3
 8002054:	f000 fee8 	bl	8002e28 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8002058:	78fa      	ldrb	r2, [r7, #3]
 800205a:	6879      	ldr	r1, [r7, #4]
 800205c:	4613      	mov	r3, r2
 800205e:	011b      	lsls	r3, r3, #4
 8002060:	1a9b      	subs	r3, r3, r2
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	440b      	add	r3, r1
 8002066:	331a      	adds	r3, #26
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	2b01      	cmp	r3, #1
 800206c:	f040 841d 	bne.w	80028aa <HCD_HC_OUT_IRQHandler+0x944>
 8002070:	78fa      	ldrb	r2, [r7, #3]
 8002072:	6879      	ldr	r1, [r7, #4]
 8002074:	4613      	mov	r3, r2
 8002076:	011b      	lsls	r3, r3, #4
 8002078:	1a9b      	subs	r3, r3, r2
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	440b      	add	r3, r1
 800207e:	331b      	adds	r3, #27
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	2b00      	cmp	r3, #0
 8002084:	f040 8411 	bne.w	80028aa <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8002088:	78fa      	ldrb	r2, [r7, #3]
 800208a:	6879      	ldr	r1, [r7, #4]
 800208c:	4613      	mov	r3, r2
 800208e:	011b      	lsls	r3, r3, #4
 8002090:	1a9b      	subs	r3, r3, r2
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	440b      	add	r3, r1
 8002096:	3326      	adds	r3, #38	@ 0x26
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	2b01      	cmp	r3, #1
 800209c:	d009      	beq.n	80020b2 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 800209e:	78fa      	ldrb	r2, [r7, #3]
 80020a0:	6879      	ldr	r1, [r7, #4]
 80020a2:	4613      	mov	r3, r2
 80020a4:	011b      	lsls	r3, r3, #4
 80020a6:	1a9b      	subs	r3, r3, r2
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	440b      	add	r3, r1
 80020ac:	331b      	adds	r3, #27
 80020ae:	2201      	movs	r2, #1
 80020b0:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 80020b2:	78fa      	ldrb	r2, [r7, #3]
 80020b4:	6879      	ldr	r1, [r7, #4]
 80020b6:	4613      	mov	r3, r2
 80020b8:	011b      	lsls	r3, r3, #4
 80020ba:	1a9b      	subs	r3, r3, r2
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	440b      	add	r3, r1
 80020c0:	334d      	adds	r3, #77	@ 0x4d
 80020c2:	2203      	movs	r2, #3
 80020c4:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	78fa      	ldrb	r2, [r7, #3]
 80020cc:	4611      	mov	r1, r2
 80020ce:	4618      	mov	r0, r3
 80020d0:	f000 feaa 	bl	8002e28 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 80020d4:	78fa      	ldrb	r2, [r7, #3]
 80020d6:	6879      	ldr	r1, [r7, #4]
 80020d8:	4613      	mov	r3, r2
 80020da:	011b      	lsls	r3, r3, #4
 80020dc:	1a9b      	subs	r3, r3, r2
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	440b      	add	r3, r1
 80020e2:	3344      	adds	r3, #68	@ 0x44
 80020e4:	2200      	movs	r2, #0
 80020e6:	601a      	str	r2, [r3, #0]
 80020e8:	e3df      	b.n	80028aa <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	78fa      	ldrb	r2, [r7, #3]
 80020f0:	4611      	mov	r1, r2
 80020f2:	4618      	mov	r0, r3
 80020f4:	f000 fe1b 	bl	8002d2e <USB_ReadChInterrupts>
 80020f8:	4603      	mov	r3, r0
 80020fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80020fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002102:	d111      	bne.n	8002128 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002104:	78fb      	ldrb	r3, [r7, #3]
 8002106:	015a      	lsls	r2, r3, #5
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	4413      	add	r3, r2
 800210c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002110:	461a      	mov	r2, r3
 8002112:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002116:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	78fa      	ldrb	r2, [r7, #3]
 800211e:	4611      	mov	r1, r2
 8002120:	4618      	mov	r0, r3
 8002122:	f000 fe81 	bl	8002e28 <USB_HC_Halt>
 8002126:	e3c0      	b.n	80028aa <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	78fa      	ldrb	r2, [r7, #3]
 800212e:	4611      	mov	r1, r2
 8002130:	4618      	mov	r0, r3
 8002132:	f000 fdfc 	bl	8002d2e <USB_ReadChInterrupts>
 8002136:	4603      	mov	r3, r0
 8002138:	f003 0301 	and.w	r3, r3, #1
 800213c:	2b01      	cmp	r3, #1
 800213e:	d168      	bne.n	8002212 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002140:	78fa      	ldrb	r2, [r7, #3]
 8002142:	6879      	ldr	r1, [r7, #4]
 8002144:	4613      	mov	r3, r2
 8002146:	011b      	lsls	r3, r3, #4
 8002148:	1a9b      	subs	r3, r3, r2
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	440b      	add	r3, r1
 800214e:	3344      	adds	r3, #68	@ 0x44
 8002150:	2200      	movs	r2, #0
 8002152:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	78fa      	ldrb	r2, [r7, #3]
 800215a:	4611      	mov	r1, r2
 800215c:	4618      	mov	r0, r3
 800215e:	f000 fde6 	bl	8002d2e <USB_ReadChInterrupts>
 8002162:	4603      	mov	r3, r0
 8002164:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002168:	2b40      	cmp	r3, #64	@ 0x40
 800216a:	d112      	bne.n	8002192 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800216c:	78fa      	ldrb	r2, [r7, #3]
 800216e:	6879      	ldr	r1, [r7, #4]
 8002170:	4613      	mov	r3, r2
 8002172:	011b      	lsls	r3, r3, #4
 8002174:	1a9b      	subs	r3, r3, r2
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	440b      	add	r3, r1
 800217a:	3319      	adds	r3, #25
 800217c:	2201      	movs	r2, #1
 800217e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002180:	78fb      	ldrb	r3, [r7, #3]
 8002182:	015a      	lsls	r2, r3, #5
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	4413      	add	r3, r2
 8002188:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800218c:	461a      	mov	r2, r3
 800218e:	2340      	movs	r3, #64	@ 0x40
 8002190:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8002192:	78fa      	ldrb	r2, [r7, #3]
 8002194:	6879      	ldr	r1, [r7, #4]
 8002196:	4613      	mov	r3, r2
 8002198:	011b      	lsls	r3, r3, #4
 800219a:	1a9b      	subs	r3, r3, r2
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	440b      	add	r3, r1
 80021a0:	331b      	adds	r3, #27
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d019      	beq.n	80021dc <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80021a8:	78fa      	ldrb	r2, [r7, #3]
 80021aa:	6879      	ldr	r1, [r7, #4]
 80021ac:	4613      	mov	r3, r2
 80021ae:	011b      	lsls	r3, r3, #4
 80021b0:	1a9b      	subs	r3, r3, r2
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	440b      	add	r3, r1
 80021b6:	331b      	adds	r3, #27
 80021b8:	2200      	movs	r2, #0
 80021ba:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80021bc:	78fb      	ldrb	r3, [r7, #3]
 80021be:	015a      	lsls	r2, r3, #5
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	4413      	add	r3, r2
 80021c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	78fa      	ldrb	r2, [r7, #3]
 80021cc:	0151      	lsls	r1, r2, #5
 80021ce:	693a      	ldr	r2, [r7, #16]
 80021d0:	440a      	add	r2, r1
 80021d2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80021d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021da:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80021dc:	78fb      	ldrb	r3, [r7, #3]
 80021de:	015a      	lsls	r2, r3, #5
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	4413      	add	r3, r2
 80021e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80021e8:	461a      	mov	r2, r3
 80021ea:	2301      	movs	r3, #1
 80021ec:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 80021ee:	78fa      	ldrb	r2, [r7, #3]
 80021f0:	6879      	ldr	r1, [r7, #4]
 80021f2:	4613      	mov	r3, r2
 80021f4:	011b      	lsls	r3, r3, #4
 80021f6:	1a9b      	subs	r3, r3, r2
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	440b      	add	r3, r1
 80021fc:	334d      	adds	r3, #77	@ 0x4d
 80021fe:	2201      	movs	r2, #1
 8002200:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	78fa      	ldrb	r2, [r7, #3]
 8002208:	4611      	mov	r1, r2
 800220a:	4618      	mov	r0, r3
 800220c:	f000 fe0c 	bl	8002e28 <USB_HC_Halt>
 8002210:	e34b      	b.n	80028aa <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	78fa      	ldrb	r2, [r7, #3]
 8002218:	4611      	mov	r1, r2
 800221a:	4618      	mov	r0, r3
 800221c:	f000 fd87 	bl	8002d2e <USB_ReadChInterrupts>
 8002220:	4603      	mov	r3, r0
 8002222:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002226:	2b40      	cmp	r3, #64	@ 0x40
 8002228:	d139      	bne.n	800229e <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 800222a:	78fa      	ldrb	r2, [r7, #3]
 800222c:	6879      	ldr	r1, [r7, #4]
 800222e:	4613      	mov	r3, r2
 8002230:	011b      	lsls	r3, r3, #4
 8002232:	1a9b      	subs	r3, r3, r2
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	440b      	add	r3, r1
 8002238:	334d      	adds	r3, #77	@ 0x4d
 800223a:	2205      	movs	r2, #5
 800223c:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 800223e:	78fa      	ldrb	r2, [r7, #3]
 8002240:	6879      	ldr	r1, [r7, #4]
 8002242:	4613      	mov	r3, r2
 8002244:	011b      	lsls	r3, r3, #4
 8002246:	1a9b      	subs	r3, r3, r2
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	440b      	add	r3, r1
 800224c:	331a      	adds	r3, #26
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d109      	bne.n	8002268 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002254:	78fa      	ldrb	r2, [r7, #3]
 8002256:	6879      	ldr	r1, [r7, #4]
 8002258:	4613      	mov	r3, r2
 800225a:	011b      	lsls	r3, r3, #4
 800225c:	1a9b      	subs	r3, r3, r2
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	440b      	add	r3, r1
 8002262:	3319      	adds	r3, #25
 8002264:	2201      	movs	r2, #1
 8002266:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8002268:	78fa      	ldrb	r2, [r7, #3]
 800226a:	6879      	ldr	r1, [r7, #4]
 800226c:	4613      	mov	r3, r2
 800226e:	011b      	lsls	r3, r3, #4
 8002270:	1a9b      	subs	r3, r3, r2
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	440b      	add	r3, r1
 8002276:	3344      	adds	r3, #68	@ 0x44
 8002278:	2200      	movs	r2, #0
 800227a:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	78fa      	ldrb	r2, [r7, #3]
 8002282:	4611      	mov	r1, r2
 8002284:	4618      	mov	r0, r3
 8002286:	f000 fdcf 	bl	8002e28 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800228a:	78fb      	ldrb	r3, [r7, #3]
 800228c:	015a      	lsls	r2, r3, #5
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	4413      	add	r3, r2
 8002292:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002296:	461a      	mov	r2, r3
 8002298:	2340      	movs	r3, #64	@ 0x40
 800229a:	6093      	str	r3, [r2, #8]
 800229c:	e305      	b.n	80028aa <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	78fa      	ldrb	r2, [r7, #3]
 80022a4:	4611      	mov	r1, r2
 80022a6:	4618      	mov	r0, r3
 80022a8:	f000 fd41 	bl	8002d2e <USB_ReadChInterrupts>
 80022ac:	4603      	mov	r3, r0
 80022ae:	f003 0308 	and.w	r3, r3, #8
 80022b2:	2b08      	cmp	r3, #8
 80022b4:	d11a      	bne.n	80022ec <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80022b6:	78fb      	ldrb	r3, [r7, #3]
 80022b8:	015a      	lsls	r2, r3, #5
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	4413      	add	r3, r2
 80022be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80022c2:	461a      	mov	r2, r3
 80022c4:	2308      	movs	r3, #8
 80022c6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80022c8:	78fa      	ldrb	r2, [r7, #3]
 80022ca:	6879      	ldr	r1, [r7, #4]
 80022cc:	4613      	mov	r3, r2
 80022ce:	011b      	lsls	r3, r3, #4
 80022d0:	1a9b      	subs	r3, r3, r2
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	440b      	add	r3, r1
 80022d6:	334d      	adds	r3, #77	@ 0x4d
 80022d8:	2206      	movs	r2, #6
 80022da:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	78fa      	ldrb	r2, [r7, #3]
 80022e2:	4611      	mov	r1, r2
 80022e4:	4618      	mov	r0, r3
 80022e6:	f000 fd9f 	bl	8002e28 <USB_HC_Halt>
 80022ea:	e2de      	b.n	80028aa <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	78fa      	ldrb	r2, [r7, #3]
 80022f2:	4611      	mov	r1, r2
 80022f4:	4618      	mov	r0, r3
 80022f6:	f000 fd1a 	bl	8002d2e <USB_ReadChInterrupts>
 80022fa:	4603      	mov	r3, r0
 80022fc:	f003 0310 	and.w	r3, r3, #16
 8002300:	2b10      	cmp	r3, #16
 8002302:	d144      	bne.n	800238e <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002304:	78fa      	ldrb	r2, [r7, #3]
 8002306:	6879      	ldr	r1, [r7, #4]
 8002308:	4613      	mov	r3, r2
 800230a:	011b      	lsls	r3, r3, #4
 800230c:	1a9b      	subs	r3, r3, r2
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	440b      	add	r3, r1
 8002312:	3344      	adds	r3, #68	@ 0x44
 8002314:	2200      	movs	r2, #0
 8002316:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8002318:	78fa      	ldrb	r2, [r7, #3]
 800231a:	6879      	ldr	r1, [r7, #4]
 800231c:	4613      	mov	r3, r2
 800231e:	011b      	lsls	r3, r3, #4
 8002320:	1a9b      	subs	r3, r3, r2
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	440b      	add	r3, r1
 8002326:	334d      	adds	r3, #77	@ 0x4d
 8002328:	2204      	movs	r2, #4
 800232a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 800232c:	78fa      	ldrb	r2, [r7, #3]
 800232e:	6879      	ldr	r1, [r7, #4]
 8002330:	4613      	mov	r3, r2
 8002332:	011b      	lsls	r3, r3, #4
 8002334:	1a9b      	subs	r3, r3, r2
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	440b      	add	r3, r1
 800233a:	3319      	adds	r3, #25
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d114      	bne.n	800236c <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8002342:	78fa      	ldrb	r2, [r7, #3]
 8002344:	6879      	ldr	r1, [r7, #4]
 8002346:	4613      	mov	r3, r2
 8002348:	011b      	lsls	r3, r3, #4
 800234a:	1a9b      	subs	r3, r3, r2
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	440b      	add	r3, r1
 8002350:	3318      	adds	r3, #24
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d109      	bne.n	800236c <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8002358:	78fa      	ldrb	r2, [r7, #3]
 800235a:	6879      	ldr	r1, [r7, #4]
 800235c:	4613      	mov	r3, r2
 800235e:	011b      	lsls	r3, r3, #4
 8002360:	1a9b      	subs	r3, r3, r2
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	440b      	add	r3, r1
 8002366:	3319      	adds	r3, #25
 8002368:	2201      	movs	r2, #1
 800236a:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	78fa      	ldrb	r2, [r7, #3]
 8002372:	4611      	mov	r1, r2
 8002374:	4618      	mov	r0, r3
 8002376:	f000 fd57 	bl	8002e28 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800237a:	78fb      	ldrb	r3, [r7, #3]
 800237c:	015a      	lsls	r2, r3, #5
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	4413      	add	r3, r2
 8002382:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002386:	461a      	mov	r2, r3
 8002388:	2310      	movs	r3, #16
 800238a:	6093      	str	r3, [r2, #8]
 800238c:	e28d      	b.n	80028aa <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	78fa      	ldrb	r2, [r7, #3]
 8002394:	4611      	mov	r1, r2
 8002396:	4618      	mov	r0, r3
 8002398:	f000 fcc9 	bl	8002d2e <USB_ReadChInterrupts>
 800239c:	4603      	mov	r3, r0
 800239e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023a2:	2b80      	cmp	r3, #128	@ 0x80
 80023a4:	d169      	bne.n	800247a <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	799b      	ldrb	r3, [r3, #6]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d111      	bne.n	80023d2 <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 80023ae:	78fa      	ldrb	r2, [r7, #3]
 80023b0:	6879      	ldr	r1, [r7, #4]
 80023b2:	4613      	mov	r3, r2
 80023b4:	011b      	lsls	r3, r3, #4
 80023b6:	1a9b      	subs	r3, r3, r2
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	440b      	add	r3, r1
 80023bc:	334d      	adds	r3, #77	@ 0x4d
 80023be:	2207      	movs	r2, #7
 80023c0:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	78fa      	ldrb	r2, [r7, #3]
 80023c8:	4611      	mov	r1, r2
 80023ca:	4618      	mov	r0, r3
 80023cc:	f000 fd2c 	bl	8002e28 <USB_HC_Halt>
 80023d0:	e049      	b.n	8002466 <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 80023d2:	78fa      	ldrb	r2, [r7, #3]
 80023d4:	6879      	ldr	r1, [r7, #4]
 80023d6:	4613      	mov	r3, r2
 80023d8:	011b      	lsls	r3, r3, #4
 80023da:	1a9b      	subs	r3, r3, r2
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	440b      	add	r3, r1
 80023e0:	3344      	adds	r3, #68	@ 0x44
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	1c59      	adds	r1, r3, #1
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	4613      	mov	r3, r2
 80023ea:	011b      	lsls	r3, r3, #4
 80023ec:	1a9b      	subs	r3, r3, r2
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	4403      	add	r3, r0
 80023f2:	3344      	adds	r3, #68	@ 0x44
 80023f4:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80023f6:	78fa      	ldrb	r2, [r7, #3]
 80023f8:	6879      	ldr	r1, [r7, #4]
 80023fa:	4613      	mov	r3, r2
 80023fc:	011b      	lsls	r3, r3, #4
 80023fe:	1a9b      	subs	r3, r3, r2
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	440b      	add	r3, r1
 8002404:	3344      	adds	r3, #68	@ 0x44
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	2b02      	cmp	r3, #2
 800240a:	d922      	bls.n	8002452 <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800240c:	78fa      	ldrb	r2, [r7, #3]
 800240e:	6879      	ldr	r1, [r7, #4]
 8002410:	4613      	mov	r3, r2
 8002412:	011b      	lsls	r3, r3, #4
 8002414:	1a9b      	subs	r3, r3, r2
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	440b      	add	r3, r1
 800241a:	3344      	adds	r3, #68	@ 0x44
 800241c:	2200      	movs	r2, #0
 800241e:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002420:	78fa      	ldrb	r2, [r7, #3]
 8002422:	6879      	ldr	r1, [r7, #4]
 8002424:	4613      	mov	r3, r2
 8002426:	011b      	lsls	r3, r3, #4
 8002428:	1a9b      	subs	r3, r3, r2
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	440b      	add	r3, r1
 800242e:	334c      	adds	r3, #76	@ 0x4c
 8002430:	2204      	movs	r2, #4
 8002432:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002434:	78fa      	ldrb	r2, [r7, #3]
 8002436:	6879      	ldr	r1, [r7, #4]
 8002438:	4613      	mov	r3, r2
 800243a:	011b      	lsls	r3, r3, #4
 800243c:	1a9b      	subs	r3, r3, r2
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	440b      	add	r3, r1
 8002442:	334c      	adds	r3, #76	@ 0x4c
 8002444:	781a      	ldrb	r2, [r3, #0]
 8002446:	78fb      	ldrb	r3, [r7, #3]
 8002448:	4619      	mov	r1, r3
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f000 ff67 	bl	800331e <HAL_HCD_HC_NotifyURBChange_Callback>
 8002450:	e009      	b.n	8002466 <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002452:	78fa      	ldrb	r2, [r7, #3]
 8002454:	6879      	ldr	r1, [r7, #4]
 8002456:	4613      	mov	r3, r2
 8002458:	011b      	lsls	r3, r3, #4
 800245a:	1a9b      	subs	r3, r3, r2
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	440b      	add	r3, r1
 8002460:	334c      	adds	r3, #76	@ 0x4c
 8002462:	2202      	movs	r2, #2
 8002464:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002466:	78fb      	ldrb	r3, [r7, #3]
 8002468:	015a      	lsls	r2, r3, #5
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	4413      	add	r3, r2
 800246e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002472:	461a      	mov	r2, r3
 8002474:	2380      	movs	r3, #128	@ 0x80
 8002476:	6093      	str	r3, [r2, #8]
 8002478:	e217      	b.n	80028aa <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	78fa      	ldrb	r2, [r7, #3]
 8002480:	4611      	mov	r1, r2
 8002482:	4618      	mov	r0, r3
 8002484:	f000 fc53 	bl	8002d2e <USB_ReadChInterrupts>
 8002488:	4603      	mov	r3, r0
 800248a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800248e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002492:	d11b      	bne.n	80024cc <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002494:	78fa      	ldrb	r2, [r7, #3]
 8002496:	6879      	ldr	r1, [r7, #4]
 8002498:	4613      	mov	r3, r2
 800249a:	011b      	lsls	r3, r3, #4
 800249c:	1a9b      	subs	r3, r3, r2
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	440b      	add	r3, r1
 80024a2:	334d      	adds	r3, #77	@ 0x4d
 80024a4:	2209      	movs	r2, #9
 80024a6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	78fa      	ldrb	r2, [r7, #3]
 80024ae:	4611      	mov	r1, r2
 80024b0:	4618      	mov	r0, r3
 80024b2:	f000 fcb9 	bl	8002e28 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80024b6:	78fb      	ldrb	r3, [r7, #3]
 80024b8:	015a      	lsls	r2, r3, #5
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	4413      	add	r3, r2
 80024be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80024c2:	461a      	mov	r2, r3
 80024c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80024c8:	6093      	str	r3, [r2, #8]
 80024ca:	e1ee      	b.n	80028aa <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	78fa      	ldrb	r2, [r7, #3]
 80024d2:	4611      	mov	r1, r2
 80024d4:	4618      	mov	r0, r3
 80024d6:	f000 fc2a 	bl	8002d2e <USB_ReadChInterrupts>
 80024da:	4603      	mov	r3, r0
 80024dc:	f003 0302 	and.w	r3, r3, #2
 80024e0:	2b02      	cmp	r3, #2
 80024e2:	f040 81df 	bne.w	80028a4 <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80024e6:	78fb      	ldrb	r3, [r7, #3]
 80024e8:	015a      	lsls	r2, r3, #5
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	4413      	add	r3, r2
 80024ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80024f2:	461a      	mov	r2, r3
 80024f4:	2302      	movs	r3, #2
 80024f6:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80024f8:	78fa      	ldrb	r2, [r7, #3]
 80024fa:	6879      	ldr	r1, [r7, #4]
 80024fc:	4613      	mov	r3, r2
 80024fe:	011b      	lsls	r3, r3, #4
 8002500:	1a9b      	subs	r3, r3, r2
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	440b      	add	r3, r1
 8002506:	334d      	adds	r3, #77	@ 0x4d
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	2b01      	cmp	r3, #1
 800250c:	f040 8093 	bne.w	8002636 <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002510:	78fa      	ldrb	r2, [r7, #3]
 8002512:	6879      	ldr	r1, [r7, #4]
 8002514:	4613      	mov	r3, r2
 8002516:	011b      	lsls	r3, r3, #4
 8002518:	1a9b      	subs	r3, r3, r2
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	440b      	add	r3, r1
 800251e:	334d      	adds	r3, #77	@ 0x4d
 8002520:	2202      	movs	r2, #2
 8002522:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002524:	78fa      	ldrb	r2, [r7, #3]
 8002526:	6879      	ldr	r1, [r7, #4]
 8002528:	4613      	mov	r3, r2
 800252a:	011b      	lsls	r3, r3, #4
 800252c:	1a9b      	subs	r3, r3, r2
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	440b      	add	r3, r1
 8002532:	334c      	adds	r3, #76	@ 0x4c
 8002534:	2201      	movs	r2, #1
 8002536:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8002538:	78fa      	ldrb	r2, [r7, #3]
 800253a:	6879      	ldr	r1, [r7, #4]
 800253c:	4613      	mov	r3, r2
 800253e:	011b      	lsls	r3, r3, #4
 8002540:	1a9b      	subs	r3, r3, r2
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	440b      	add	r3, r1
 8002546:	3326      	adds	r3, #38	@ 0x26
 8002548:	781b      	ldrb	r3, [r3, #0]
 800254a:	2b02      	cmp	r3, #2
 800254c:	d00b      	beq.n	8002566 <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 800254e:	78fa      	ldrb	r2, [r7, #3]
 8002550:	6879      	ldr	r1, [r7, #4]
 8002552:	4613      	mov	r3, r2
 8002554:	011b      	lsls	r3, r3, #4
 8002556:	1a9b      	subs	r3, r3, r2
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	440b      	add	r3, r1
 800255c:	3326      	adds	r3, #38	@ 0x26
 800255e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8002560:	2b03      	cmp	r3, #3
 8002562:	f040 8190 	bne.w	8002886 <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	799b      	ldrb	r3, [r3, #6]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d115      	bne.n	800259a <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 800256e:	78fa      	ldrb	r2, [r7, #3]
 8002570:	6879      	ldr	r1, [r7, #4]
 8002572:	4613      	mov	r3, r2
 8002574:	011b      	lsls	r3, r3, #4
 8002576:	1a9b      	subs	r3, r3, r2
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	440b      	add	r3, r1
 800257c:	333d      	adds	r3, #61	@ 0x3d
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	78fa      	ldrb	r2, [r7, #3]
 8002582:	f083 0301 	eor.w	r3, r3, #1
 8002586:	b2d8      	uxtb	r0, r3
 8002588:	6879      	ldr	r1, [r7, #4]
 800258a:	4613      	mov	r3, r2
 800258c:	011b      	lsls	r3, r3, #4
 800258e:	1a9b      	subs	r3, r3, r2
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	440b      	add	r3, r1
 8002594:	333d      	adds	r3, #61	@ 0x3d
 8002596:	4602      	mov	r2, r0
 8002598:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	799b      	ldrb	r3, [r3, #6]
 800259e:	2b01      	cmp	r3, #1
 80025a0:	f040 8171 	bne.w	8002886 <HCD_HC_OUT_IRQHandler+0x920>
 80025a4:	78fa      	ldrb	r2, [r7, #3]
 80025a6:	6879      	ldr	r1, [r7, #4]
 80025a8:	4613      	mov	r3, r2
 80025aa:	011b      	lsls	r3, r3, #4
 80025ac:	1a9b      	subs	r3, r3, r2
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	440b      	add	r3, r1
 80025b2:	3334      	adds	r3, #52	@ 0x34
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	f000 8165 	beq.w	8002886 <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 80025bc:	78fa      	ldrb	r2, [r7, #3]
 80025be:	6879      	ldr	r1, [r7, #4]
 80025c0:	4613      	mov	r3, r2
 80025c2:	011b      	lsls	r3, r3, #4
 80025c4:	1a9b      	subs	r3, r3, r2
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	440b      	add	r3, r1
 80025ca:	3334      	adds	r3, #52	@ 0x34
 80025cc:	6819      	ldr	r1, [r3, #0]
 80025ce:	78fa      	ldrb	r2, [r7, #3]
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	4613      	mov	r3, r2
 80025d4:	011b      	lsls	r3, r3, #4
 80025d6:	1a9b      	subs	r3, r3, r2
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	4403      	add	r3, r0
 80025dc:	3328      	adds	r3, #40	@ 0x28
 80025de:	881b      	ldrh	r3, [r3, #0]
 80025e0:	440b      	add	r3, r1
 80025e2:	1e59      	subs	r1, r3, #1
 80025e4:	78fa      	ldrb	r2, [r7, #3]
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	4613      	mov	r3, r2
 80025ea:	011b      	lsls	r3, r3, #4
 80025ec:	1a9b      	subs	r3, r3, r2
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	4403      	add	r3, r0
 80025f2:	3328      	adds	r3, #40	@ 0x28
 80025f4:	881b      	ldrh	r3, [r3, #0]
 80025f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80025fa:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	f003 0301 	and.w	r3, r3, #1
 8002602:	2b00      	cmp	r3, #0
 8002604:	f000 813f 	beq.w	8002886 <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8002608:	78fa      	ldrb	r2, [r7, #3]
 800260a:	6879      	ldr	r1, [r7, #4]
 800260c:	4613      	mov	r3, r2
 800260e:	011b      	lsls	r3, r3, #4
 8002610:	1a9b      	subs	r3, r3, r2
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	440b      	add	r3, r1
 8002616:	333d      	adds	r3, #61	@ 0x3d
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	78fa      	ldrb	r2, [r7, #3]
 800261c:	f083 0301 	eor.w	r3, r3, #1
 8002620:	b2d8      	uxtb	r0, r3
 8002622:	6879      	ldr	r1, [r7, #4]
 8002624:	4613      	mov	r3, r2
 8002626:	011b      	lsls	r3, r3, #4
 8002628:	1a9b      	subs	r3, r3, r2
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	440b      	add	r3, r1
 800262e:	333d      	adds	r3, #61	@ 0x3d
 8002630:	4602      	mov	r2, r0
 8002632:	701a      	strb	r2, [r3, #0]
 8002634:	e127      	b.n	8002886 <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002636:	78fa      	ldrb	r2, [r7, #3]
 8002638:	6879      	ldr	r1, [r7, #4]
 800263a:	4613      	mov	r3, r2
 800263c:	011b      	lsls	r3, r3, #4
 800263e:	1a9b      	subs	r3, r3, r2
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	440b      	add	r3, r1
 8002644:	334d      	adds	r3, #77	@ 0x4d
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	2b03      	cmp	r3, #3
 800264a:	d120      	bne.n	800268e <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800264c:	78fa      	ldrb	r2, [r7, #3]
 800264e:	6879      	ldr	r1, [r7, #4]
 8002650:	4613      	mov	r3, r2
 8002652:	011b      	lsls	r3, r3, #4
 8002654:	1a9b      	subs	r3, r3, r2
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	440b      	add	r3, r1
 800265a:	334d      	adds	r3, #77	@ 0x4d
 800265c:	2202      	movs	r2, #2
 800265e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002660:	78fa      	ldrb	r2, [r7, #3]
 8002662:	6879      	ldr	r1, [r7, #4]
 8002664:	4613      	mov	r3, r2
 8002666:	011b      	lsls	r3, r3, #4
 8002668:	1a9b      	subs	r3, r3, r2
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	440b      	add	r3, r1
 800266e:	331b      	adds	r3, #27
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	2b01      	cmp	r3, #1
 8002674:	f040 8107 	bne.w	8002886 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002678:	78fa      	ldrb	r2, [r7, #3]
 800267a:	6879      	ldr	r1, [r7, #4]
 800267c:	4613      	mov	r3, r2
 800267e:	011b      	lsls	r3, r3, #4
 8002680:	1a9b      	subs	r3, r3, r2
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	440b      	add	r3, r1
 8002686:	334c      	adds	r3, #76	@ 0x4c
 8002688:	2202      	movs	r2, #2
 800268a:	701a      	strb	r2, [r3, #0]
 800268c:	e0fb      	b.n	8002886 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800268e:	78fa      	ldrb	r2, [r7, #3]
 8002690:	6879      	ldr	r1, [r7, #4]
 8002692:	4613      	mov	r3, r2
 8002694:	011b      	lsls	r3, r3, #4
 8002696:	1a9b      	subs	r3, r3, r2
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	440b      	add	r3, r1
 800269c:	334d      	adds	r3, #77	@ 0x4d
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	2b04      	cmp	r3, #4
 80026a2:	d13a      	bne.n	800271a <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80026a4:	78fa      	ldrb	r2, [r7, #3]
 80026a6:	6879      	ldr	r1, [r7, #4]
 80026a8:	4613      	mov	r3, r2
 80026aa:	011b      	lsls	r3, r3, #4
 80026ac:	1a9b      	subs	r3, r3, r2
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	440b      	add	r3, r1
 80026b2:	334d      	adds	r3, #77	@ 0x4d
 80026b4:	2202      	movs	r2, #2
 80026b6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80026b8:	78fa      	ldrb	r2, [r7, #3]
 80026ba:	6879      	ldr	r1, [r7, #4]
 80026bc:	4613      	mov	r3, r2
 80026be:	011b      	lsls	r3, r3, #4
 80026c0:	1a9b      	subs	r3, r3, r2
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	440b      	add	r3, r1
 80026c6:	334c      	adds	r3, #76	@ 0x4c
 80026c8:	2202      	movs	r2, #2
 80026ca:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80026cc:	78fa      	ldrb	r2, [r7, #3]
 80026ce:	6879      	ldr	r1, [r7, #4]
 80026d0:	4613      	mov	r3, r2
 80026d2:	011b      	lsls	r3, r3, #4
 80026d4:	1a9b      	subs	r3, r3, r2
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	440b      	add	r3, r1
 80026da:	331b      	adds	r3, #27
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	2b01      	cmp	r3, #1
 80026e0:	f040 80d1 	bne.w	8002886 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 80026e4:	78fa      	ldrb	r2, [r7, #3]
 80026e6:	6879      	ldr	r1, [r7, #4]
 80026e8:	4613      	mov	r3, r2
 80026ea:	011b      	lsls	r3, r3, #4
 80026ec:	1a9b      	subs	r3, r3, r2
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	440b      	add	r3, r1
 80026f2:	331b      	adds	r3, #27
 80026f4:	2200      	movs	r2, #0
 80026f6:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80026f8:	78fb      	ldrb	r3, [r7, #3]
 80026fa:	015a      	lsls	r2, r3, #5
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	4413      	add	r3, r2
 8002700:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	78fa      	ldrb	r2, [r7, #3]
 8002708:	0151      	lsls	r1, r2, #5
 800270a:	693a      	ldr	r2, [r7, #16]
 800270c:	440a      	add	r2, r1
 800270e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002712:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002716:	6053      	str	r3, [r2, #4]
 8002718:	e0b5      	b.n	8002886 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800271a:	78fa      	ldrb	r2, [r7, #3]
 800271c:	6879      	ldr	r1, [r7, #4]
 800271e:	4613      	mov	r3, r2
 8002720:	011b      	lsls	r3, r3, #4
 8002722:	1a9b      	subs	r3, r3, r2
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	440b      	add	r3, r1
 8002728:	334d      	adds	r3, #77	@ 0x4d
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	2b05      	cmp	r3, #5
 800272e:	d114      	bne.n	800275a <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002730:	78fa      	ldrb	r2, [r7, #3]
 8002732:	6879      	ldr	r1, [r7, #4]
 8002734:	4613      	mov	r3, r2
 8002736:	011b      	lsls	r3, r3, #4
 8002738:	1a9b      	subs	r3, r3, r2
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	440b      	add	r3, r1
 800273e:	334d      	adds	r3, #77	@ 0x4d
 8002740:	2202      	movs	r2, #2
 8002742:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8002744:	78fa      	ldrb	r2, [r7, #3]
 8002746:	6879      	ldr	r1, [r7, #4]
 8002748:	4613      	mov	r3, r2
 800274a:	011b      	lsls	r3, r3, #4
 800274c:	1a9b      	subs	r3, r3, r2
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	440b      	add	r3, r1
 8002752:	334c      	adds	r3, #76	@ 0x4c
 8002754:	2202      	movs	r2, #2
 8002756:	701a      	strb	r2, [r3, #0]
 8002758:	e095      	b.n	8002886 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800275a:	78fa      	ldrb	r2, [r7, #3]
 800275c:	6879      	ldr	r1, [r7, #4]
 800275e:	4613      	mov	r3, r2
 8002760:	011b      	lsls	r3, r3, #4
 8002762:	1a9b      	subs	r3, r3, r2
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	440b      	add	r3, r1
 8002768:	334d      	adds	r3, #77	@ 0x4d
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	2b06      	cmp	r3, #6
 800276e:	d114      	bne.n	800279a <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002770:	78fa      	ldrb	r2, [r7, #3]
 8002772:	6879      	ldr	r1, [r7, #4]
 8002774:	4613      	mov	r3, r2
 8002776:	011b      	lsls	r3, r3, #4
 8002778:	1a9b      	subs	r3, r3, r2
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	440b      	add	r3, r1
 800277e:	334d      	adds	r3, #77	@ 0x4d
 8002780:	2202      	movs	r2, #2
 8002782:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8002784:	78fa      	ldrb	r2, [r7, #3]
 8002786:	6879      	ldr	r1, [r7, #4]
 8002788:	4613      	mov	r3, r2
 800278a:	011b      	lsls	r3, r3, #4
 800278c:	1a9b      	subs	r3, r3, r2
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	440b      	add	r3, r1
 8002792:	334c      	adds	r3, #76	@ 0x4c
 8002794:	2205      	movs	r2, #5
 8002796:	701a      	strb	r2, [r3, #0]
 8002798:	e075      	b.n	8002886 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800279a:	78fa      	ldrb	r2, [r7, #3]
 800279c:	6879      	ldr	r1, [r7, #4]
 800279e:	4613      	mov	r3, r2
 80027a0:	011b      	lsls	r3, r3, #4
 80027a2:	1a9b      	subs	r3, r3, r2
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	440b      	add	r3, r1
 80027a8:	334d      	adds	r3, #77	@ 0x4d
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	2b07      	cmp	r3, #7
 80027ae:	d00a      	beq.n	80027c6 <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80027b0:	78fa      	ldrb	r2, [r7, #3]
 80027b2:	6879      	ldr	r1, [r7, #4]
 80027b4:	4613      	mov	r3, r2
 80027b6:	011b      	lsls	r3, r3, #4
 80027b8:	1a9b      	subs	r3, r3, r2
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	440b      	add	r3, r1
 80027be:	334d      	adds	r3, #77	@ 0x4d
 80027c0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80027c2:	2b09      	cmp	r3, #9
 80027c4:	d170      	bne.n	80028a8 <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80027c6:	78fa      	ldrb	r2, [r7, #3]
 80027c8:	6879      	ldr	r1, [r7, #4]
 80027ca:	4613      	mov	r3, r2
 80027cc:	011b      	lsls	r3, r3, #4
 80027ce:	1a9b      	subs	r3, r3, r2
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	440b      	add	r3, r1
 80027d4:	334d      	adds	r3, #77	@ 0x4d
 80027d6:	2202      	movs	r2, #2
 80027d8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80027da:	78fa      	ldrb	r2, [r7, #3]
 80027dc:	6879      	ldr	r1, [r7, #4]
 80027de:	4613      	mov	r3, r2
 80027e0:	011b      	lsls	r3, r3, #4
 80027e2:	1a9b      	subs	r3, r3, r2
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	440b      	add	r3, r1
 80027e8:	3344      	adds	r3, #68	@ 0x44
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	1c59      	adds	r1, r3, #1
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	4613      	mov	r3, r2
 80027f2:	011b      	lsls	r3, r3, #4
 80027f4:	1a9b      	subs	r3, r3, r2
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	4403      	add	r3, r0
 80027fa:	3344      	adds	r3, #68	@ 0x44
 80027fc:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80027fe:	78fa      	ldrb	r2, [r7, #3]
 8002800:	6879      	ldr	r1, [r7, #4]
 8002802:	4613      	mov	r3, r2
 8002804:	011b      	lsls	r3, r3, #4
 8002806:	1a9b      	subs	r3, r3, r2
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	440b      	add	r3, r1
 800280c:	3344      	adds	r3, #68	@ 0x44
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	2b02      	cmp	r3, #2
 8002812:	d914      	bls.n	800283e <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002814:	78fa      	ldrb	r2, [r7, #3]
 8002816:	6879      	ldr	r1, [r7, #4]
 8002818:	4613      	mov	r3, r2
 800281a:	011b      	lsls	r3, r3, #4
 800281c:	1a9b      	subs	r3, r3, r2
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	440b      	add	r3, r1
 8002822:	3344      	adds	r3, #68	@ 0x44
 8002824:	2200      	movs	r2, #0
 8002826:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002828:	78fa      	ldrb	r2, [r7, #3]
 800282a:	6879      	ldr	r1, [r7, #4]
 800282c:	4613      	mov	r3, r2
 800282e:	011b      	lsls	r3, r3, #4
 8002830:	1a9b      	subs	r3, r3, r2
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	440b      	add	r3, r1
 8002836:	334c      	adds	r3, #76	@ 0x4c
 8002838:	2204      	movs	r2, #4
 800283a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800283c:	e022      	b.n	8002884 <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800283e:	78fa      	ldrb	r2, [r7, #3]
 8002840:	6879      	ldr	r1, [r7, #4]
 8002842:	4613      	mov	r3, r2
 8002844:	011b      	lsls	r3, r3, #4
 8002846:	1a9b      	subs	r3, r3, r2
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	440b      	add	r3, r1
 800284c:	334c      	adds	r3, #76	@ 0x4c
 800284e:	2202      	movs	r2, #2
 8002850:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002852:	78fb      	ldrb	r3, [r7, #3]
 8002854:	015a      	lsls	r2, r3, #5
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	4413      	add	r3, r2
 800285a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002868:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002870:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002872:	78fb      	ldrb	r3, [r7, #3]
 8002874:	015a      	lsls	r2, r3, #5
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	4413      	add	r3, r2
 800287a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800287e:	461a      	mov	r2, r3
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002884:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002886:	78fa      	ldrb	r2, [r7, #3]
 8002888:	6879      	ldr	r1, [r7, #4]
 800288a:	4613      	mov	r3, r2
 800288c:	011b      	lsls	r3, r3, #4
 800288e:	1a9b      	subs	r3, r3, r2
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	440b      	add	r3, r1
 8002894:	334c      	adds	r3, #76	@ 0x4c
 8002896:	781a      	ldrb	r2, [r3, #0]
 8002898:	78fb      	ldrb	r3, [r7, #3]
 800289a:	4619      	mov	r1, r3
 800289c:	6878      	ldr	r0, [r7, #4]
 800289e:	f000 fd3e 	bl	800331e <HAL_HCD_HC_NotifyURBChange_Callback>
 80028a2:	e002      	b.n	80028aa <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 80028a4:	bf00      	nop
 80028a6:	e000      	b.n	80028aa <HCD_HC_OUT_IRQHandler+0x944>
      return;
 80028a8:	bf00      	nop
  }
}
 80028aa:	3718      	adds	r7, #24
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}

080028b0 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b08a      	sub	sp, #40	@ 0x28
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80028be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028c0:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	6a1b      	ldr	r3, [r3, #32]
 80028c8:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	f003 030f 	and.w	r3, r3, #15
 80028d0:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	0c5b      	lsrs	r3, r3, #17
 80028d6:	f003 030f 	and.w	r3, r3, #15
 80028da:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	091b      	lsrs	r3, r3, #4
 80028e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80028e4:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d004      	beq.n	80028f6 <HCD_RXQLVL_IRQHandler+0x46>
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	2b05      	cmp	r3, #5
 80028f0:	f000 80b6 	beq.w	8002a60 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80028f4:	e0b7      	b.n	8002a66 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	f000 80b3 	beq.w	8002a64 <HCD_RXQLVL_IRQHandler+0x1b4>
 80028fe:	6879      	ldr	r1, [r7, #4]
 8002900:	69ba      	ldr	r2, [r7, #24]
 8002902:	4613      	mov	r3, r2
 8002904:	011b      	lsls	r3, r3, #4
 8002906:	1a9b      	subs	r3, r3, r2
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	440b      	add	r3, r1
 800290c:	332c      	adds	r3, #44	@ 0x2c
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	2b00      	cmp	r3, #0
 8002912:	f000 80a7 	beq.w	8002a64 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8002916:	6879      	ldr	r1, [r7, #4]
 8002918:	69ba      	ldr	r2, [r7, #24]
 800291a:	4613      	mov	r3, r2
 800291c:	011b      	lsls	r3, r3, #4
 800291e:	1a9b      	subs	r3, r3, r2
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	440b      	add	r3, r1
 8002924:	3338      	adds	r3, #56	@ 0x38
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	18d1      	adds	r1, r2, r3
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	69ba      	ldr	r2, [r7, #24]
 8002930:	4613      	mov	r3, r2
 8002932:	011b      	lsls	r3, r3, #4
 8002934:	1a9b      	subs	r3, r3, r2
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	4403      	add	r3, r0
 800293a:	3334      	adds	r3, #52	@ 0x34
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4299      	cmp	r1, r3
 8002940:	f200 8083 	bhi.w	8002a4a <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6818      	ldr	r0, [r3, #0]
 8002948:	6879      	ldr	r1, [r7, #4]
 800294a:	69ba      	ldr	r2, [r7, #24]
 800294c:	4613      	mov	r3, r2
 800294e:	011b      	lsls	r3, r3, #4
 8002950:	1a9b      	subs	r3, r3, r2
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	440b      	add	r3, r1
 8002956:	332c      	adds	r3, #44	@ 0x2c
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	693a      	ldr	r2, [r7, #16]
 800295c:	b292      	uxth	r2, r2
 800295e:	4619      	mov	r1, r3
 8002960:	f000 f97a 	bl	8002c58 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8002964:	6879      	ldr	r1, [r7, #4]
 8002966:	69ba      	ldr	r2, [r7, #24]
 8002968:	4613      	mov	r3, r2
 800296a:	011b      	lsls	r3, r3, #4
 800296c:	1a9b      	subs	r3, r3, r2
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	440b      	add	r3, r1
 8002972:	332c      	adds	r3, #44	@ 0x2c
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	18d1      	adds	r1, r2, r3
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	69ba      	ldr	r2, [r7, #24]
 800297e:	4613      	mov	r3, r2
 8002980:	011b      	lsls	r3, r3, #4
 8002982:	1a9b      	subs	r3, r3, r2
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	4403      	add	r3, r0
 8002988:	332c      	adds	r3, #44	@ 0x2c
 800298a:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 800298c:	6879      	ldr	r1, [r7, #4]
 800298e:	69ba      	ldr	r2, [r7, #24]
 8002990:	4613      	mov	r3, r2
 8002992:	011b      	lsls	r3, r3, #4
 8002994:	1a9b      	subs	r3, r3, r2
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	440b      	add	r3, r1
 800299a:	3338      	adds	r3, #56	@ 0x38
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	18d1      	adds	r1, r2, r3
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	69ba      	ldr	r2, [r7, #24]
 80029a6:	4613      	mov	r3, r2
 80029a8:	011b      	lsls	r3, r3, #4
 80029aa:	1a9b      	subs	r3, r3, r2
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	4403      	add	r3, r0
 80029b0:	3338      	adds	r3, #56	@ 0x38
 80029b2:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80029b4:	69bb      	ldr	r3, [r7, #24]
 80029b6:	015a      	lsls	r2, r3, #5
 80029b8:	6a3b      	ldr	r3, [r7, #32]
 80029ba:	4413      	add	r3, r2
 80029bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029c0:	691b      	ldr	r3, [r3, #16]
 80029c2:	0cdb      	lsrs	r3, r3, #19
 80029c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029c8:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80029ca:	6879      	ldr	r1, [r7, #4]
 80029cc:	69ba      	ldr	r2, [r7, #24]
 80029ce:	4613      	mov	r3, r2
 80029d0:	011b      	lsls	r3, r3, #4
 80029d2:	1a9b      	subs	r3, r3, r2
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	440b      	add	r3, r1
 80029d8:	3328      	adds	r3, #40	@ 0x28
 80029da:	881b      	ldrh	r3, [r3, #0]
 80029dc:	461a      	mov	r2, r3
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d13f      	bne.n	8002a64 <HCD_RXQLVL_IRQHandler+0x1b4>
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d03c      	beq.n	8002a64 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 80029ea:	69bb      	ldr	r3, [r7, #24]
 80029ec:	015a      	lsls	r2, r3, #5
 80029ee:	6a3b      	ldr	r3, [r7, #32]
 80029f0:	4413      	add	r3, r2
 80029f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002a00:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002a08:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8002a0a:	69bb      	ldr	r3, [r7, #24]
 8002a0c:	015a      	lsls	r2, r3, #5
 8002a0e:	6a3b      	ldr	r3, [r7, #32]
 8002a10:	4413      	add	r3, r2
 8002a12:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a16:	461a      	mov	r2, r3
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8002a1c:	6879      	ldr	r1, [r7, #4]
 8002a1e:	69ba      	ldr	r2, [r7, #24]
 8002a20:	4613      	mov	r3, r2
 8002a22:	011b      	lsls	r3, r3, #4
 8002a24:	1a9b      	subs	r3, r3, r2
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	440b      	add	r3, r1
 8002a2a:	333c      	adds	r3, #60	@ 0x3c
 8002a2c:	781b      	ldrb	r3, [r3, #0]
 8002a2e:	f083 0301 	eor.w	r3, r3, #1
 8002a32:	b2d8      	uxtb	r0, r3
 8002a34:	6879      	ldr	r1, [r7, #4]
 8002a36:	69ba      	ldr	r2, [r7, #24]
 8002a38:	4613      	mov	r3, r2
 8002a3a:	011b      	lsls	r3, r3, #4
 8002a3c:	1a9b      	subs	r3, r3, r2
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	440b      	add	r3, r1
 8002a42:	333c      	adds	r3, #60	@ 0x3c
 8002a44:	4602      	mov	r2, r0
 8002a46:	701a      	strb	r2, [r3, #0]
      break;
 8002a48:	e00c      	b.n	8002a64 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8002a4a:	6879      	ldr	r1, [r7, #4]
 8002a4c:	69ba      	ldr	r2, [r7, #24]
 8002a4e:	4613      	mov	r3, r2
 8002a50:	011b      	lsls	r3, r3, #4
 8002a52:	1a9b      	subs	r3, r3, r2
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	440b      	add	r3, r1
 8002a58:	334c      	adds	r3, #76	@ 0x4c
 8002a5a:	2204      	movs	r2, #4
 8002a5c:	701a      	strb	r2, [r3, #0]
      break;
 8002a5e:	e001      	b.n	8002a64 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8002a60:	bf00      	nop
 8002a62:	e000      	b.n	8002a66 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8002a64:	bf00      	nop
  }
}
 8002a66:	bf00      	nop
 8002a68:	3728      	adds	r7, #40	@ 0x28
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}

08002a6e <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002a6e:	b580      	push	{r7, lr}
 8002a70:	b086      	sub	sp, #24
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8002a9a:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	f003 0302 	and.w	r3, r3, #2
 8002aa2:	2b02      	cmp	r3, #2
 8002aa4:	d10b      	bne.n	8002abe <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	f003 0301 	and.w	r3, r3, #1
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d102      	bne.n	8002ab6 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f000 fc18 	bl	80032e6 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	f043 0302 	orr.w	r3, r3, #2
 8002abc:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	f003 0308 	and.w	r3, r3, #8
 8002ac4:	2b08      	cmp	r3, #8
 8002ac6:	d132      	bne.n	8002b2e <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	f043 0308 	orr.w	r3, r3, #8
 8002ace:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	f003 0304 	and.w	r3, r3, #4
 8002ad6:	2b04      	cmp	r3, #4
 8002ad8:	d126      	bne.n	8002b28 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	7a5b      	ldrb	r3, [r3, #9]
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d113      	bne.n	8002b0a <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8002ae8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002aec:	d106      	bne.n	8002afc <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	2102      	movs	r1, #2
 8002af4:	4618      	mov	r0, r3
 8002af6:	f000 f949 	bl	8002d8c <USB_InitFSLSPClkSel>
 8002afa:	e011      	b.n	8002b20 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	2101      	movs	r1, #1
 8002b02:	4618      	mov	r0, r3
 8002b04:	f000 f942 	bl	8002d8c <USB_InitFSLSPClkSel>
 8002b08:	e00a      	b.n	8002b20 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	79db      	ldrb	r3, [r3, #7]
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d106      	bne.n	8002b20 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002b18:	461a      	mov	r2, r3
 8002b1a:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8002b1e:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	f000 fc0a 	bl	800333a <HAL_HCD_PortEnabled_Callback>
 8002b26:	e002      	b.n	8002b2e <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	f000 fc14 	bl	8003356 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	f003 0320 	and.w	r3, r3, #32
 8002b34:	2b20      	cmp	r3, #32
 8002b36:	d103      	bne.n	8002b40 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	f043 0320 	orr.w	r3, r3, #32
 8002b3e:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8002b46:	461a      	mov	r2, r3
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	6013      	str	r3, [r2, #0]
}
 8002b4c:	bf00      	nop
 8002b4e:	3718      	adds	r7, #24
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}

08002b54 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	f043 0201 	orr.w	r2, r3, #1
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002b68:	2300      	movs	r3, #0
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	370c      	adds	r7, #12
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr

08002b76 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002b76:	b480      	push	{r7}
 8002b78:	b083      	sub	sp, #12
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	f023 0201 	bic.w	r2, r3, #1
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002b8a:	2300      	movs	r3, #0
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	370c      	adds	r7, #12
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr

08002b98 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b085      	sub	sp, #20
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	3301      	adds	r3, #1
 8002baa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8002bb2:	d901      	bls.n	8002bb8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	e01b      	b.n	8002bf0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	691b      	ldr	r3, [r3, #16]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	daf2      	bge.n	8002ba6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	019b      	lsls	r3, r3, #6
 8002bc8:	f043 0220 	orr.w	r2, r3, #32
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	3301      	adds	r3, #1
 8002bd4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8002bdc:	d901      	bls.n	8002be2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	e006      	b.n	8002bf0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	691b      	ldr	r3, [r3, #16]
 8002be6:	f003 0320 	and.w	r3, r3, #32
 8002bea:	2b20      	cmp	r3, #32
 8002bec:	d0f0      	beq.n	8002bd0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8002bee:	2300      	movs	r3, #0
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3714      	adds	r7, #20
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr

08002bfc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b085      	sub	sp, #20
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002c04:	2300      	movs	r3, #0
 8002c06:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8002c14:	d901      	bls.n	8002c1a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8002c16:	2303      	movs	r3, #3
 8002c18:	e018      	b.n	8002c4c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	691b      	ldr	r3, [r3, #16]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	daf2      	bge.n	8002c08 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8002c22:	2300      	movs	r3, #0
 8002c24:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2210      	movs	r2, #16
 8002c2a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	3301      	adds	r3, #1
 8002c30:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8002c38:	d901      	bls.n	8002c3e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	e006      	b.n	8002c4c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	691b      	ldr	r3, [r3, #16]
 8002c42:	f003 0310 	and.w	r3, r3, #16
 8002c46:	2b10      	cmp	r3, #16
 8002c48:	d0f0      	beq.n	8002c2c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8002c4a:	2300      	movs	r3, #0
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3714      	adds	r7, #20
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr

08002c58 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b08b      	sub	sp, #44	@ 0x2c
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	60f8      	str	r0, [r7, #12]
 8002c60:	60b9      	str	r1, [r7, #8]
 8002c62:	4613      	mov	r3, r2
 8002c64:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8002c6e:	88fb      	ldrh	r3, [r7, #6]
 8002c70:	089b      	lsrs	r3, r3, #2
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8002c76:	88fb      	ldrh	r3, [r7, #6]
 8002c78:	f003 0303 	and.w	r3, r3, #3
 8002c7c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8002c7e:	2300      	movs	r3, #0
 8002c80:	623b      	str	r3, [r7, #32]
 8002c82:	e014      	b.n	8002cae <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8002c84:	69bb      	ldr	r3, [r7, #24]
 8002c86:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c8e:	601a      	str	r2, [r3, #0]
    pDest++;
 8002c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c92:	3301      	adds	r3, #1
 8002c94:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8002c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c98:	3301      	adds	r3, #1
 8002c9a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8002c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c9e:	3301      	adds	r3, #1
 8002ca0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8002ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ca4:	3301      	adds	r3, #1
 8002ca6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8002ca8:	6a3b      	ldr	r3, [r7, #32]
 8002caa:	3301      	adds	r3, #1
 8002cac:	623b      	str	r3, [r7, #32]
 8002cae:	6a3a      	ldr	r2, [r7, #32]
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	d3e6      	bcc.n	8002c84 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8002cb6:	8bfb      	ldrh	r3, [r7, #30]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d01e      	beq.n	8002cfa <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8002cc0:	69bb      	ldr	r3, [r7, #24]
 8002cc2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	f107 0310 	add.w	r3, r7, #16
 8002ccc:	6812      	ldr	r2, [r2, #0]
 8002cce:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8002cd0:	693a      	ldr	r2, [r7, #16]
 8002cd2:	6a3b      	ldr	r3, [r7, #32]
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	00db      	lsls	r3, r3, #3
 8002cd8:	fa22 f303 	lsr.w	r3, r2, r3
 8002cdc:	b2da      	uxtb	r2, r3
 8002cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ce0:	701a      	strb	r2, [r3, #0]
      i++;
 8002ce2:	6a3b      	ldr	r3, [r7, #32]
 8002ce4:	3301      	adds	r3, #1
 8002ce6:	623b      	str	r3, [r7, #32]
      pDest++;
 8002ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cea:	3301      	adds	r3, #1
 8002cec:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8002cee:	8bfb      	ldrh	r3, [r7, #30]
 8002cf0:	3b01      	subs	r3, #1
 8002cf2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8002cf4:	8bfb      	ldrh	r3, [r7, #30]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d1ea      	bne.n	8002cd0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8002cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	372c      	adds	r7, #44	@ 0x2c
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr

08002d08 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b085      	sub	sp, #20
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	695b      	ldr	r3, [r3, #20]
 8002d14:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	699b      	ldr	r3, [r3, #24]
 8002d1a:	68fa      	ldr	r2, [r7, #12]
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8002d20:	68fb      	ldr	r3, [r7, #12]
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3714      	adds	r7, #20
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr

08002d2e <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8002d2e:	b480      	push	{r7}
 8002d30:	b085      	sub	sp, #20
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6078      	str	r0, [r7, #4]
 8002d36:	460b      	mov	r3, r1
 8002d38:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8002d3e:	78fb      	ldrb	r3, [r7, #3]
 8002d40:	015a      	lsls	r2, r3, #5
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	4413      	add	r3, r2
 8002d46:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8002d4e:	78fb      	ldrb	r3, [r7, #3]
 8002d50:	015a      	lsls	r2, r3, #5
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	4413      	add	r3, r2
 8002d56:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	68ba      	ldr	r2, [r7, #8]
 8002d5e:	4013      	ands	r3, r2
 8002d60:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8002d62:	68bb      	ldr	r3, [r7, #8]
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3714      	adds	r7, #20
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr

08002d70 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	695b      	ldr	r3, [r3, #20]
 8002d7c:	f003 0301 	and.w	r3, r3, #1
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	370c      	adds	r7, #12
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr

08002d8c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b085      	sub	sp, #20
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	460b      	mov	r3, r1
 8002d96:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	68fa      	ldr	r2, [r7, #12]
 8002da6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002daa:	f023 0303 	bic.w	r3, r3, #3
 8002dae:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	78fb      	ldrb	r3, [r7, #3]
 8002dba:	f003 0303 	and.w	r3, r3, #3
 8002dbe:	68f9      	ldr	r1, [r7, #12]
 8002dc0:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8002dc8:	78fb      	ldrb	r3, [r7, #3]
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d107      	bne.n	8002dde <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8002dda:	6053      	str	r3, [r2, #4]
 8002ddc:	e00c      	b.n	8002df8 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8002dde:	78fb      	ldrb	r3, [r7, #3]
 8002de0:	2b02      	cmp	r3, #2
 8002de2:	d107      	bne.n	8002df4 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002dea:	461a      	mov	r2, r3
 8002dec:	f241 7370 	movw	r3, #6000	@ 0x1770
 8002df0:	6053      	str	r3, [r2, #4]
 8002df2:	e001      	b.n	8002df8 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	e000      	b.n	8002dfa <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8002df8:	2300      	movs	r3, #0
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3714      	adds	r7, #20
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr

08002e06 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8002e06:	b480      	push	{r7}
 8002e08:	b085      	sub	sp, #20
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002e18:	695b      	ldr	r3, [r3, #20]
 8002e1a:	b29b      	uxth	r3, r3
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3714      	adds	r7, #20
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr

08002e28 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b089      	sub	sp, #36	@ 0x24
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	460b      	mov	r3, r1
 8002e32:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8002e38:	78fb      	ldrb	r3, [r7, #3]
 8002e3a:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8002e40:	69bb      	ldr	r3, [r7, #24]
 8002e42:	015a      	lsls	r2, r3, #5
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	4413      	add	r3, r2
 8002e48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	0c9b      	lsrs	r3, r3, #18
 8002e50:	f003 0303 	and.w	r3, r3, #3
 8002e54:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8002e56:	69bb      	ldr	r3, [r7, #24]
 8002e58:	015a      	lsls	r2, r3, #5
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	4413      	add	r3, r2
 8002e5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	0fdb      	lsrs	r3, r3, #31
 8002e66:	f003 0301 	and.w	r3, r3, #1
 8002e6a:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8002e6c:	69bb      	ldr	r3, [r7, #24]
 8002e6e:	015a      	lsls	r2, r3, #5
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	4413      	add	r3, r2
 8002e74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	0fdb      	lsrs	r3, r3, #31
 8002e7c:	f003 0301 	and.w	r3, r3, #1
 8002e80:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	f003 0320 	and.w	r3, r3, #32
 8002e8a:	2b20      	cmp	r3, #32
 8002e8c:	d10d      	bne.n	8002eaa <USB_HC_Halt+0x82>
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d10a      	bne.n	8002eaa <USB_HC_Halt+0x82>
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d005      	beq.n	8002ea6 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d002      	beq.n	8002ea6 <USB_HC_Halt+0x7e>
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	2b03      	cmp	r3, #3
 8002ea4:	d101      	bne.n	8002eaa <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	e0d8      	b.n	800305c <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d002      	beq.n	8002eb6 <USB_HC_Halt+0x8e>
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	2b02      	cmp	r3, #2
 8002eb4:	d173      	bne.n	8002f9e <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	015a      	lsls	r2, r3, #5
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	4413      	add	r3, r2
 8002ebe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	69ba      	ldr	r2, [r7, #24]
 8002ec6:	0151      	lsls	r1, r2, #5
 8002ec8:	69fa      	ldr	r2, [r7, #28]
 8002eca:	440a      	add	r2, r1
 8002ecc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002ed0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002ed4:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	f003 0320 	and.w	r3, r3, #32
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d14a      	bne.n	8002f78 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ee6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d133      	bne.n	8002f56 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8002eee:	69bb      	ldr	r3, [r7, #24]
 8002ef0:	015a      	lsls	r2, r3, #5
 8002ef2:	69fb      	ldr	r3, [r7, #28]
 8002ef4:	4413      	add	r3, r2
 8002ef6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	69ba      	ldr	r2, [r7, #24]
 8002efe:	0151      	lsls	r1, r2, #5
 8002f00:	69fa      	ldr	r2, [r7, #28]
 8002f02:	440a      	add	r2, r1
 8002f04:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002f08:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002f0c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8002f0e:	69bb      	ldr	r3, [r7, #24]
 8002f10:	015a      	lsls	r2, r3, #5
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	4413      	add	r3, r2
 8002f16:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	69ba      	ldr	r2, [r7, #24]
 8002f1e:	0151      	lsls	r1, r2, #5
 8002f20:	69fa      	ldr	r2, [r7, #28]
 8002f22:	440a      	add	r2, r1
 8002f24:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002f28:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002f2c:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	3301      	adds	r3, #1
 8002f32:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002f3a:	d82e      	bhi.n	8002f9a <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8002f3c:	69bb      	ldr	r3, [r7, #24]
 8002f3e:	015a      	lsls	r2, r3, #5
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	4413      	add	r3, r2
 8002f44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002f4e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002f52:	d0ec      	beq.n	8002f2e <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8002f54:	e081      	b.n	800305a <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8002f56:	69bb      	ldr	r3, [r7, #24]
 8002f58:	015a      	lsls	r2, r3, #5
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	4413      	add	r3, r2
 8002f5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	69ba      	ldr	r2, [r7, #24]
 8002f66:	0151      	lsls	r1, r2, #5
 8002f68:	69fa      	ldr	r2, [r7, #28]
 8002f6a:	440a      	add	r2, r1
 8002f6c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002f70:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002f74:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8002f76:	e070      	b.n	800305a <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8002f78:	69bb      	ldr	r3, [r7, #24]
 8002f7a:	015a      	lsls	r2, r3, #5
 8002f7c:	69fb      	ldr	r3, [r7, #28]
 8002f7e:	4413      	add	r3, r2
 8002f80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	69ba      	ldr	r2, [r7, #24]
 8002f88:	0151      	lsls	r1, r2, #5
 8002f8a:	69fa      	ldr	r2, [r7, #28]
 8002f8c:	440a      	add	r2, r1
 8002f8e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002f92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002f96:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8002f98:	e05f      	b.n	800305a <USB_HC_Halt+0x232>
            break;
 8002f9a:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8002f9c:	e05d      	b.n	800305a <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8002f9e:	69bb      	ldr	r3, [r7, #24]
 8002fa0:	015a      	lsls	r2, r3, #5
 8002fa2:	69fb      	ldr	r3, [r7, #28]
 8002fa4:	4413      	add	r3, r2
 8002fa6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	69ba      	ldr	r2, [r7, #24]
 8002fae:	0151      	lsls	r1, r2, #5
 8002fb0:	69fa      	ldr	r2, [r7, #28]
 8002fb2:	440a      	add	r2, r1
 8002fb4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002fb8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002fbc:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002fc4:	691b      	ldr	r3, [r3, #16]
 8002fc6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d133      	bne.n	8003036 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8002fce:	69bb      	ldr	r3, [r7, #24]
 8002fd0:	015a      	lsls	r2, r3, #5
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	4413      	add	r3, r2
 8002fd6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	69ba      	ldr	r2, [r7, #24]
 8002fde:	0151      	lsls	r1, r2, #5
 8002fe0:	69fa      	ldr	r2, [r7, #28]
 8002fe2:	440a      	add	r2, r1
 8002fe4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002fe8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002fec:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8002fee:	69bb      	ldr	r3, [r7, #24]
 8002ff0:	015a      	lsls	r2, r3, #5
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	4413      	add	r3, r2
 8002ff6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	69ba      	ldr	r2, [r7, #24]
 8002ffe:	0151      	lsls	r1, r2, #5
 8003000:	69fa      	ldr	r2, [r7, #28]
 8003002:	440a      	add	r2, r1
 8003004:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003008:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800300c:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	3301      	adds	r3, #1
 8003012:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800301a:	d81d      	bhi.n	8003058 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800301c:	69bb      	ldr	r3, [r7, #24]
 800301e:	015a      	lsls	r2, r3, #5
 8003020:	69fb      	ldr	r3, [r7, #28]
 8003022:	4413      	add	r3, r2
 8003024:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800302e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003032:	d0ec      	beq.n	800300e <USB_HC_Halt+0x1e6>
 8003034:	e011      	b.n	800305a <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8003036:	69bb      	ldr	r3, [r7, #24]
 8003038:	015a      	lsls	r2, r3, #5
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	4413      	add	r3, r2
 800303e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	69ba      	ldr	r2, [r7, #24]
 8003046:	0151      	lsls	r1, r2, #5
 8003048:	69fa      	ldr	r2, [r7, #28]
 800304a:	440a      	add	r2, r1
 800304c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003050:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003054:	6013      	str	r3, [r2, #0]
 8003056:	e000      	b.n	800305a <USB_HC_Halt+0x232>
          break;
 8003058:	bf00      	nop
    }
  }

  return HAL_OK;
 800305a:	2300      	movs	r3, #0
}
 800305c:	4618      	mov	r0, r3
 800305e:	3724      	adds	r7, #36	@ 0x24
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr

08003068 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b088      	sub	sp, #32
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8003070:	2300      	movs	r3, #0
 8003072:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8003078:	2300      	movs	r3, #0
 800307a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	f7ff fd7a 	bl	8002b76 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003082:	2110      	movs	r1, #16
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f7ff fd87 	bl	8002b98 <USB_FlushTxFifo>
 800308a:	4603      	mov	r3, r0
 800308c:	2b00      	cmp	r3, #0
 800308e:	d001      	beq.n	8003094 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f7ff fdb1 	bl	8002bfc <USB_FlushRxFifo>
 800309a:	4603      	mov	r3, r0
 800309c:	2b00      	cmp	r3, #0
 800309e:	d001      	beq.n	80030a4 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80030a4:	2300      	movs	r3, #0
 80030a6:	61bb      	str	r3, [r7, #24]
 80030a8:	e01f      	b.n	80030ea <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80030aa:	69bb      	ldr	r3, [r7, #24]
 80030ac:	015a      	lsls	r2, r3, #5
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	4413      	add	r3, r2
 80030b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80030c0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80030c8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80030d0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80030d2:	69bb      	ldr	r3, [r7, #24]
 80030d4:	015a      	lsls	r2, r3, #5
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	4413      	add	r3, r2
 80030da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030de:	461a      	mov	r2, r3
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80030e4:	69bb      	ldr	r3, [r7, #24]
 80030e6:	3301      	adds	r3, #1
 80030e8:	61bb      	str	r3, [r7, #24]
 80030ea:	69bb      	ldr	r3, [r7, #24]
 80030ec:	2b0f      	cmp	r3, #15
 80030ee:	d9dc      	bls.n	80030aa <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80030f0:	2300      	movs	r3, #0
 80030f2:	61bb      	str	r3, [r7, #24]
 80030f4:	e034      	b.n	8003160 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80030f6:	69bb      	ldr	r3, [r7, #24]
 80030f8:	015a      	lsls	r2, r3, #5
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	4413      	add	r3, r2
 80030fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800310c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003114:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800311c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800311e:	69bb      	ldr	r3, [r7, #24]
 8003120:	015a      	lsls	r2, r3, #5
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	4413      	add	r3, r2
 8003126:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800312a:	461a      	mov	r2, r3
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	3301      	adds	r3, #1
 8003134:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800313c:	d80c      	bhi.n	8003158 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800313e:	69bb      	ldr	r3, [r7, #24]
 8003140:	015a      	lsls	r2, r3, #5
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	4413      	add	r3, r2
 8003146:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003150:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003154:	d0ec      	beq.n	8003130 <USB_StopHost+0xc8>
 8003156:	e000      	b.n	800315a <USB_StopHost+0xf2>
        break;
 8003158:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	3301      	adds	r3, #1
 800315e:	61bb      	str	r3, [r7, #24]
 8003160:	69bb      	ldr	r3, [r7, #24]
 8003162:	2b0f      	cmp	r3, #15
 8003164:	d9c7      	bls.n	80030f6 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800316c:	461a      	mov	r2, r3
 800316e:	f04f 33ff 	mov.w	r3, #4294967295
 8003172:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	f04f 32ff 	mov.w	r2, #4294967295
 800317a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	f7ff fce9 	bl	8002b54 <USB_EnableGlobalInt>

  return ret;
 8003182:	7ffb      	ldrb	r3, [r7, #31]
}
 8003184:	4618      	mov	r0, r3
 8003186:	3720      	adds	r7, #32
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}

0800318c <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b082      	sub	sp, #8
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800319a:	1c5a      	adds	r2, r3, #1
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f000 f804 	bl	80031b0 <USBH_HandleSof>
}
 80031a8:	bf00      	nop
 80031aa:	3708      	adds	r7, #8
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}

080031b0 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b082      	sub	sp, #8
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	2b0b      	cmp	r3, #11
 80031c0:	d10a      	bne.n	80031d8 <USBH_HandleSof+0x28>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d005      	beq.n	80031d8 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80031d2:	699b      	ldr	r3, [r3, #24]
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	4798      	blx	r3
  }
}
 80031d8:	bf00      	nop
 80031da:	3708      	adds	r7, #8
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}

080031e0 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b083      	sub	sp, #12
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2201      	movs	r2, #1
 80031ec:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80031f0:	bf00      	nop
}
 80031f2:	370c      	adds	r7, #12
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr

080031fc <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b083      	sub	sp, #12
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2200      	movs	r2, #0
 8003208:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 800320c:	bf00      	nop
}
 800320e:	370c      	adds	r7, #12
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr

08003218 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8003218:	b480      	push	{r7}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2201      	movs	r2, #1
 8003224:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2200      	movs	r2, #0
 800322c:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8003238:	2300      	movs	r3, #0
}
 800323a:	4618      	mov	r0, r3
 800323c:	370c      	adds	r7, #12
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr

08003246 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8003246:	b580      	push	{r7, lr}
 8003248:	b082      	sub	sp, #8
 800324a:	af00      	add	r7, sp, #0
 800324c:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2201      	movs	r2, #1
 8003252:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2200      	movs	r2, #0
 8003262:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f000 f883 	bl	8003372 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	791b      	ldrb	r3, [r3, #4]
 8003270:	4619      	mov	r1, r3
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f000 f80b 	bl	800328e <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	795b      	ldrb	r3, [r3, #5]
 800327c:	4619      	mov	r1, r3
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f000 f805 	bl	800328e <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8003284:	2300      	movs	r3, #0
}
 8003286:	4618      	mov	r0, r3
 8003288:	3708      	adds	r7, #8
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}

0800328e <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800328e:	b480      	push	{r7}
 8003290:	b083      	sub	sp, #12
 8003292:	af00      	add	r7, sp, #0
 8003294:	6078      	str	r0, [r7, #4]
 8003296:	460b      	mov	r3, r1
 8003298:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800329a:	78fb      	ldrb	r3, [r7, #3]
 800329c:	2b0f      	cmp	r3, #15
 800329e:	d80d      	bhi.n	80032bc <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80032a0:	78fb      	ldrb	r3, [r7, #3]
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	33e0      	adds	r3, #224	@ 0xe0
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	4413      	add	r3, r2
 80032aa:	685a      	ldr	r2, [r3, #4]
 80032ac:	78fb      	ldrb	r3, [r7, #3]
 80032ae:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80032b2:	6879      	ldr	r1, [r7, #4]
 80032b4:	33e0      	adds	r3, #224	@ 0xe0
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	440b      	add	r3, r1
 80032ba:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80032bc:	2300      	movs	r3, #0
}
 80032be:	4618      	mov	r0, r3
 80032c0:	370c      	adds	r7, #12
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr

080032ca <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80032ca:	b580      	push	{r7, lr}
 80032cc:	b082      	sub	sp, #8
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80032d8:	4618      	mov	r0, r3
 80032da:	f7ff ff57 	bl	800318c <USBH_LL_IncTimer>
}
 80032de:	bf00      	nop
 80032e0:	3708      	adds	r7, #8
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}

080032e6 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80032e6:	b580      	push	{r7, lr}
 80032e8:	b082      	sub	sp, #8
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80032f4:	4618      	mov	r0, r3
 80032f6:	f7ff ff8f 	bl	8003218 <USBH_LL_Connect>
}
 80032fa:	bf00      	nop
 80032fc:	3708      	adds	r7, #8
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}

08003302 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8003302:	b580      	push	{r7, lr}
 8003304:	b082      	sub	sp, #8
 8003306:	af00      	add	r7, sp, #0
 8003308:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8003310:	4618      	mov	r0, r3
 8003312:	f7ff ff98 	bl	8003246 <USBH_LL_Disconnect>
}
 8003316:	bf00      	nop
 8003318:	3708      	adds	r7, #8
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}

0800331e <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800331e:	b480      	push	{r7}
 8003320:	b083      	sub	sp, #12
 8003322:	af00      	add	r7, sp, #0
 8003324:	6078      	str	r0, [r7, #4]
 8003326:	460b      	mov	r3, r1
 8003328:	70fb      	strb	r3, [r7, #3]
 800332a:	4613      	mov	r3, r2
 800332c:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800332e:	bf00      	nop
 8003330:	370c      	adds	r7, #12
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr

0800333a <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800333a:	b580      	push	{r7, lr}
 800333c:	b082      	sub	sp, #8
 800333e:	af00      	add	r7, sp, #0
 8003340:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8003348:	4618      	mov	r0, r3
 800334a:	f7ff ff49 	bl	80031e0 <USBH_LL_PortEnabled>
}
 800334e:	bf00      	nop
 8003350:	3708      	adds	r7, #8
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}

08003356 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8003356:	b580      	push	{r7, lr}
 8003358:	b082      	sub	sp, #8
 800335a:	af00      	add	r7, sp, #0
 800335c:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8003364:	4618      	mov	r0, r3
 8003366:	f7ff ff49 	bl	80031fc <USBH_LL_PortDisabled>
}
 800336a:	bf00      	nop
 800336c:	3708      	adds	r7, #8
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}

08003372 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8003372:	b580      	push	{r7, lr}
 8003374:	b084      	sub	sp, #16
 8003376:	af00      	add	r7, sp, #0
 8003378:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800337a:	2300      	movs	r3, #0
 800337c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800337e:	2300      	movs	r3, #0
 8003380:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8003388:	4618      	mov	r0, r3
 800338a:	f7fd ff66 	bl	800125a <HAL_HCD_Stop>
 800338e:	4603      	mov	r3, r0
 8003390:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8003392:	7bfb      	ldrb	r3, [r7, #15]
 8003394:	4618      	mov	r0, r3
 8003396:	f000 f807 	bl	80033a8 <USBH_Get_USB_Status>
 800339a:	4603      	mov	r3, r0
 800339c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800339e:	7bbb      	ldrb	r3, [r7, #14]
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	3710      	adds	r7, #16
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}

080033a8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b085      	sub	sp, #20
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	4603      	mov	r3, r0
 80033b0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80033b2:	2300      	movs	r3, #0
 80033b4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80033b6:	79fb      	ldrb	r3, [r7, #7]
 80033b8:	2b03      	cmp	r3, #3
 80033ba:	d817      	bhi.n	80033ec <USBH_Get_USB_Status+0x44>
 80033bc:	a201      	add	r2, pc, #4	@ (adr r2, 80033c4 <USBH_Get_USB_Status+0x1c>)
 80033be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033c2:	bf00      	nop
 80033c4:	080033d5 	.word	0x080033d5
 80033c8:	080033db 	.word	0x080033db
 80033cc:	080033e1 	.word	0x080033e1
 80033d0:	080033e7 	.word	0x080033e7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80033d4:	2300      	movs	r3, #0
 80033d6:	73fb      	strb	r3, [r7, #15]
    break;
 80033d8:	e00b      	b.n	80033f2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80033da:	2302      	movs	r3, #2
 80033dc:	73fb      	strb	r3, [r7, #15]
    break;
 80033de:	e008      	b.n	80033f2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80033e0:	2301      	movs	r3, #1
 80033e2:	73fb      	strb	r3, [r7, #15]
    break;
 80033e4:	e005      	b.n	80033f2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80033e6:	2302      	movs	r3, #2
 80033e8:	73fb      	strb	r3, [r7, #15]
    break;
 80033ea:	e002      	b.n	80033f2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80033ec:	2302      	movs	r3, #2
 80033ee:	73fb      	strb	r3, [r7, #15]
    break;
 80033f0:	bf00      	nop
  }
  return usb_status;
 80033f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3714      	adds	r7, #20
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr

08003400 <sbrk_aligned>:
 8003400:	b570      	push	{r4, r5, r6, lr}
 8003402:	4e0f      	ldr	r6, [pc, #60]	@ (8003440 <sbrk_aligned+0x40>)
 8003404:	460c      	mov	r4, r1
 8003406:	6831      	ldr	r1, [r6, #0]
 8003408:	4605      	mov	r5, r0
 800340a:	b911      	cbnz	r1, 8003412 <sbrk_aligned+0x12>
 800340c:	f000 f9fa 	bl	8003804 <_sbrk_r>
 8003410:	6030      	str	r0, [r6, #0]
 8003412:	4621      	mov	r1, r4
 8003414:	4628      	mov	r0, r5
 8003416:	f000 f9f5 	bl	8003804 <_sbrk_r>
 800341a:	1c43      	adds	r3, r0, #1
 800341c:	d103      	bne.n	8003426 <sbrk_aligned+0x26>
 800341e:	f04f 34ff 	mov.w	r4, #4294967295
 8003422:	4620      	mov	r0, r4
 8003424:	bd70      	pop	{r4, r5, r6, pc}
 8003426:	1cc4      	adds	r4, r0, #3
 8003428:	f024 0403 	bic.w	r4, r4, #3
 800342c:	42a0      	cmp	r0, r4
 800342e:	d0f8      	beq.n	8003422 <sbrk_aligned+0x22>
 8003430:	1a21      	subs	r1, r4, r0
 8003432:	4628      	mov	r0, r5
 8003434:	f000 f9e6 	bl	8003804 <_sbrk_r>
 8003438:	3001      	adds	r0, #1
 800343a:	d1f2      	bne.n	8003422 <sbrk_aligned+0x22>
 800343c:	e7ef      	b.n	800341e <sbrk_aligned+0x1e>
 800343e:	bf00      	nop
 8003440:	200004a0 	.word	0x200004a0

08003444 <_malloc_r>:
 8003444:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003448:	1ccd      	adds	r5, r1, #3
 800344a:	f025 0503 	bic.w	r5, r5, #3
 800344e:	3508      	adds	r5, #8
 8003450:	2d0c      	cmp	r5, #12
 8003452:	bf38      	it	cc
 8003454:	250c      	movcc	r5, #12
 8003456:	2d00      	cmp	r5, #0
 8003458:	4606      	mov	r6, r0
 800345a:	db01      	blt.n	8003460 <_malloc_r+0x1c>
 800345c:	42a9      	cmp	r1, r5
 800345e:	d904      	bls.n	800346a <_malloc_r+0x26>
 8003460:	230c      	movs	r3, #12
 8003462:	6033      	str	r3, [r6, #0]
 8003464:	2000      	movs	r0, #0
 8003466:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800346a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003540 <_malloc_r+0xfc>
 800346e:	f000 f869 	bl	8003544 <__malloc_lock>
 8003472:	f8d8 3000 	ldr.w	r3, [r8]
 8003476:	461c      	mov	r4, r3
 8003478:	bb44      	cbnz	r4, 80034cc <_malloc_r+0x88>
 800347a:	4629      	mov	r1, r5
 800347c:	4630      	mov	r0, r6
 800347e:	f7ff ffbf 	bl	8003400 <sbrk_aligned>
 8003482:	1c43      	adds	r3, r0, #1
 8003484:	4604      	mov	r4, r0
 8003486:	d158      	bne.n	800353a <_malloc_r+0xf6>
 8003488:	f8d8 4000 	ldr.w	r4, [r8]
 800348c:	4627      	mov	r7, r4
 800348e:	2f00      	cmp	r7, #0
 8003490:	d143      	bne.n	800351a <_malloc_r+0xd6>
 8003492:	2c00      	cmp	r4, #0
 8003494:	d04b      	beq.n	800352e <_malloc_r+0xea>
 8003496:	6823      	ldr	r3, [r4, #0]
 8003498:	4639      	mov	r1, r7
 800349a:	4630      	mov	r0, r6
 800349c:	eb04 0903 	add.w	r9, r4, r3
 80034a0:	f000 f9b0 	bl	8003804 <_sbrk_r>
 80034a4:	4581      	cmp	r9, r0
 80034a6:	d142      	bne.n	800352e <_malloc_r+0xea>
 80034a8:	6821      	ldr	r1, [r4, #0]
 80034aa:	1a6d      	subs	r5, r5, r1
 80034ac:	4629      	mov	r1, r5
 80034ae:	4630      	mov	r0, r6
 80034b0:	f7ff ffa6 	bl	8003400 <sbrk_aligned>
 80034b4:	3001      	adds	r0, #1
 80034b6:	d03a      	beq.n	800352e <_malloc_r+0xea>
 80034b8:	6823      	ldr	r3, [r4, #0]
 80034ba:	442b      	add	r3, r5
 80034bc:	6023      	str	r3, [r4, #0]
 80034be:	f8d8 3000 	ldr.w	r3, [r8]
 80034c2:	685a      	ldr	r2, [r3, #4]
 80034c4:	bb62      	cbnz	r2, 8003520 <_malloc_r+0xdc>
 80034c6:	f8c8 7000 	str.w	r7, [r8]
 80034ca:	e00f      	b.n	80034ec <_malloc_r+0xa8>
 80034cc:	6822      	ldr	r2, [r4, #0]
 80034ce:	1b52      	subs	r2, r2, r5
 80034d0:	d420      	bmi.n	8003514 <_malloc_r+0xd0>
 80034d2:	2a0b      	cmp	r2, #11
 80034d4:	d917      	bls.n	8003506 <_malloc_r+0xc2>
 80034d6:	1961      	adds	r1, r4, r5
 80034d8:	42a3      	cmp	r3, r4
 80034da:	6025      	str	r5, [r4, #0]
 80034dc:	bf18      	it	ne
 80034de:	6059      	strne	r1, [r3, #4]
 80034e0:	6863      	ldr	r3, [r4, #4]
 80034e2:	bf08      	it	eq
 80034e4:	f8c8 1000 	streq.w	r1, [r8]
 80034e8:	5162      	str	r2, [r4, r5]
 80034ea:	604b      	str	r3, [r1, #4]
 80034ec:	4630      	mov	r0, r6
 80034ee:	f000 f82f 	bl	8003550 <__malloc_unlock>
 80034f2:	f104 000b 	add.w	r0, r4, #11
 80034f6:	1d23      	adds	r3, r4, #4
 80034f8:	f020 0007 	bic.w	r0, r0, #7
 80034fc:	1ac2      	subs	r2, r0, r3
 80034fe:	bf1c      	itt	ne
 8003500:	1a1b      	subne	r3, r3, r0
 8003502:	50a3      	strne	r3, [r4, r2]
 8003504:	e7af      	b.n	8003466 <_malloc_r+0x22>
 8003506:	6862      	ldr	r2, [r4, #4]
 8003508:	42a3      	cmp	r3, r4
 800350a:	bf0c      	ite	eq
 800350c:	f8c8 2000 	streq.w	r2, [r8]
 8003510:	605a      	strne	r2, [r3, #4]
 8003512:	e7eb      	b.n	80034ec <_malloc_r+0xa8>
 8003514:	4623      	mov	r3, r4
 8003516:	6864      	ldr	r4, [r4, #4]
 8003518:	e7ae      	b.n	8003478 <_malloc_r+0x34>
 800351a:	463c      	mov	r4, r7
 800351c:	687f      	ldr	r7, [r7, #4]
 800351e:	e7b6      	b.n	800348e <_malloc_r+0x4a>
 8003520:	461a      	mov	r2, r3
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	42a3      	cmp	r3, r4
 8003526:	d1fb      	bne.n	8003520 <_malloc_r+0xdc>
 8003528:	2300      	movs	r3, #0
 800352a:	6053      	str	r3, [r2, #4]
 800352c:	e7de      	b.n	80034ec <_malloc_r+0xa8>
 800352e:	230c      	movs	r3, #12
 8003530:	6033      	str	r3, [r6, #0]
 8003532:	4630      	mov	r0, r6
 8003534:	f000 f80c 	bl	8003550 <__malloc_unlock>
 8003538:	e794      	b.n	8003464 <_malloc_r+0x20>
 800353a:	6005      	str	r5, [r0, #0]
 800353c:	e7d6      	b.n	80034ec <_malloc_r+0xa8>
 800353e:	bf00      	nop
 8003540:	200004a4 	.word	0x200004a4

08003544 <__malloc_lock>:
 8003544:	4801      	ldr	r0, [pc, #4]	@ (800354c <__malloc_lock+0x8>)
 8003546:	f000 b9aa 	b.w	800389e <__retarget_lock_acquire_recursive>
 800354a:	bf00      	nop
 800354c:	200005e8 	.word	0x200005e8

08003550 <__malloc_unlock>:
 8003550:	4801      	ldr	r0, [pc, #4]	@ (8003558 <__malloc_unlock+0x8>)
 8003552:	f000 b9a5 	b.w	80038a0 <__retarget_lock_release_recursive>
 8003556:	bf00      	nop
 8003558:	200005e8 	.word	0x200005e8

0800355c <std>:
 800355c:	2300      	movs	r3, #0
 800355e:	b510      	push	{r4, lr}
 8003560:	4604      	mov	r4, r0
 8003562:	e9c0 3300 	strd	r3, r3, [r0]
 8003566:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800356a:	6083      	str	r3, [r0, #8]
 800356c:	8181      	strh	r1, [r0, #12]
 800356e:	6643      	str	r3, [r0, #100]	@ 0x64
 8003570:	81c2      	strh	r2, [r0, #14]
 8003572:	6183      	str	r3, [r0, #24]
 8003574:	4619      	mov	r1, r3
 8003576:	2208      	movs	r2, #8
 8003578:	305c      	adds	r0, #92	@ 0x5c
 800357a:	f000 f906 	bl	800378a <memset>
 800357e:	4b0d      	ldr	r3, [pc, #52]	@ (80035b4 <std+0x58>)
 8003580:	6263      	str	r3, [r4, #36]	@ 0x24
 8003582:	4b0d      	ldr	r3, [pc, #52]	@ (80035b8 <std+0x5c>)
 8003584:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003586:	4b0d      	ldr	r3, [pc, #52]	@ (80035bc <std+0x60>)
 8003588:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800358a:	4b0d      	ldr	r3, [pc, #52]	@ (80035c0 <std+0x64>)
 800358c:	6323      	str	r3, [r4, #48]	@ 0x30
 800358e:	4b0d      	ldr	r3, [pc, #52]	@ (80035c4 <std+0x68>)
 8003590:	6224      	str	r4, [r4, #32]
 8003592:	429c      	cmp	r4, r3
 8003594:	d006      	beq.n	80035a4 <std+0x48>
 8003596:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800359a:	4294      	cmp	r4, r2
 800359c:	d002      	beq.n	80035a4 <std+0x48>
 800359e:	33d0      	adds	r3, #208	@ 0xd0
 80035a0:	429c      	cmp	r4, r3
 80035a2:	d105      	bne.n	80035b0 <std+0x54>
 80035a4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80035a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80035ac:	f000 b976 	b.w	800389c <__retarget_lock_init_recursive>
 80035b0:	bd10      	pop	{r4, pc}
 80035b2:	bf00      	nop
 80035b4:	08003705 	.word	0x08003705
 80035b8:	08003727 	.word	0x08003727
 80035bc:	0800375f 	.word	0x0800375f
 80035c0:	08003783 	.word	0x08003783
 80035c4:	200004a8 	.word	0x200004a8

080035c8 <stdio_exit_handler>:
 80035c8:	4a02      	ldr	r2, [pc, #8]	@ (80035d4 <stdio_exit_handler+0xc>)
 80035ca:	4903      	ldr	r1, [pc, #12]	@ (80035d8 <stdio_exit_handler+0x10>)
 80035cc:	4803      	ldr	r0, [pc, #12]	@ (80035dc <stdio_exit_handler+0x14>)
 80035ce:	f000 b869 	b.w	80036a4 <_fwalk_sglue>
 80035d2:	bf00      	nop
 80035d4:	2000002c 	.word	0x2000002c
 80035d8:	08003fe1 	.word	0x08003fe1
 80035dc:	2000003c 	.word	0x2000003c

080035e0 <cleanup_stdio>:
 80035e0:	6841      	ldr	r1, [r0, #4]
 80035e2:	4b0c      	ldr	r3, [pc, #48]	@ (8003614 <cleanup_stdio+0x34>)
 80035e4:	4299      	cmp	r1, r3
 80035e6:	b510      	push	{r4, lr}
 80035e8:	4604      	mov	r4, r0
 80035ea:	d001      	beq.n	80035f0 <cleanup_stdio+0x10>
 80035ec:	f000 fcf8 	bl	8003fe0 <_fflush_r>
 80035f0:	68a1      	ldr	r1, [r4, #8]
 80035f2:	4b09      	ldr	r3, [pc, #36]	@ (8003618 <cleanup_stdio+0x38>)
 80035f4:	4299      	cmp	r1, r3
 80035f6:	d002      	beq.n	80035fe <cleanup_stdio+0x1e>
 80035f8:	4620      	mov	r0, r4
 80035fa:	f000 fcf1 	bl	8003fe0 <_fflush_r>
 80035fe:	68e1      	ldr	r1, [r4, #12]
 8003600:	4b06      	ldr	r3, [pc, #24]	@ (800361c <cleanup_stdio+0x3c>)
 8003602:	4299      	cmp	r1, r3
 8003604:	d004      	beq.n	8003610 <cleanup_stdio+0x30>
 8003606:	4620      	mov	r0, r4
 8003608:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800360c:	f000 bce8 	b.w	8003fe0 <_fflush_r>
 8003610:	bd10      	pop	{r4, pc}
 8003612:	bf00      	nop
 8003614:	200004a8 	.word	0x200004a8
 8003618:	20000510 	.word	0x20000510
 800361c:	20000578 	.word	0x20000578

08003620 <global_stdio_init.part.0>:
 8003620:	b510      	push	{r4, lr}
 8003622:	4b0b      	ldr	r3, [pc, #44]	@ (8003650 <global_stdio_init.part.0+0x30>)
 8003624:	4c0b      	ldr	r4, [pc, #44]	@ (8003654 <global_stdio_init.part.0+0x34>)
 8003626:	4a0c      	ldr	r2, [pc, #48]	@ (8003658 <global_stdio_init.part.0+0x38>)
 8003628:	601a      	str	r2, [r3, #0]
 800362a:	4620      	mov	r0, r4
 800362c:	2200      	movs	r2, #0
 800362e:	2104      	movs	r1, #4
 8003630:	f7ff ff94 	bl	800355c <std>
 8003634:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003638:	2201      	movs	r2, #1
 800363a:	2109      	movs	r1, #9
 800363c:	f7ff ff8e 	bl	800355c <std>
 8003640:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003644:	2202      	movs	r2, #2
 8003646:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800364a:	2112      	movs	r1, #18
 800364c:	f7ff bf86 	b.w	800355c <std>
 8003650:	200005e0 	.word	0x200005e0
 8003654:	200004a8 	.word	0x200004a8
 8003658:	080035c9 	.word	0x080035c9

0800365c <__sfp_lock_acquire>:
 800365c:	4801      	ldr	r0, [pc, #4]	@ (8003664 <__sfp_lock_acquire+0x8>)
 800365e:	f000 b91e 	b.w	800389e <__retarget_lock_acquire_recursive>
 8003662:	bf00      	nop
 8003664:	200005e9 	.word	0x200005e9

08003668 <__sfp_lock_release>:
 8003668:	4801      	ldr	r0, [pc, #4]	@ (8003670 <__sfp_lock_release+0x8>)
 800366a:	f000 b919 	b.w	80038a0 <__retarget_lock_release_recursive>
 800366e:	bf00      	nop
 8003670:	200005e9 	.word	0x200005e9

08003674 <__sinit>:
 8003674:	b510      	push	{r4, lr}
 8003676:	4604      	mov	r4, r0
 8003678:	f7ff fff0 	bl	800365c <__sfp_lock_acquire>
 800367c:	6a23      	ldr	r3, [r4, #32]
 800367e:	b11b      	cbz	r3, 8003688 <__sinit+0x14>
 8003680:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003684:	f7ff bff0 	b.w	8003668 <__sfp_lock_release>
 8003688:	4b04      	ldr	r3, [pc, #16]	@ (800369c <__sinit+0x28>)
 800368a:	6223      	str	r3, [r4, #32]
 800368c:	4b04      	ldr	r3, [pc, #16]	@ (80036a0 <__sinit+0x2c>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d1f5      	bne.n	8003680 <__sinit+0xc>
 8003694:	f7ff ffc4 	bl	8003620 <global_stdio_init.part.0>
 8003698:	e7f2      	b.n	8003680 <__sinit+0xc>
 800369a:	bf00      	nop
 800369c:	080035e1 	.word	0x080035e1
 80036a0:	200005e0 	.word	0x200005e0

080036a4 <_fwalk_sglue>:
 80036a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80036a8:	4607      	mov	r7, r0
 80036aa:	4688      	mov	r8, r1
 80036ac:	4614      	mov	r4, r2
 80036ae:	2600      	movs	r6, #0
 80036b0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80036b4:	f1b9 0901 	subs.w	r9, r9, #1
 80036b8:	d505      	bpl.n	80036c6 <_fwalk_sglue+0x22>
 80036ba:	6824      	ldr	r4, [r4, #0]
 80036bc:	2c00      	cmp	r4, #0
 80036be:	d1f7      	bne.n	80036b0 <_fwalk_sglue+0xc>
 80036c0:	4630      	mov	r0, r6
 80036c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80036c6:	89ab      	ldrh	r3, [r5, #12]
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d907      	bls.n	80036dc <_fwalk_sglue+0x38>
 80036cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80036d0:	3301      	adds	r3, #1
 80036d2:	d003      	beq.n	80036dc <_fwalk_sglue+0x38>
 80036d4:	4629      	mov	r1, r5
 80036d6:	4638      	mov	r0, r7
 80036d8:	47c0      	blx	r8
 80036da:	4306      	orrs	r6, r0
 80036dc:	3568      	adds	r5, #104	@ 0x68
 80036de:	e7e9      	b.n	80036b4 <_fwalk_sglue+0x10>

080036e0 <iprintf>:
 80036e0:	b40f      	push	{r0, r1, r2, r3}
 80036e2:	b507      	push	{r0, r1, r2, lr}
 80036e4:	4906      	ldr	r1, [pc, #24]	@ (8003700 <iprintf+0x20>)
 80036e6:	ab04      	add	r3, sp, #16
 80036e8:	6808      	ldr	r0, [r1, #0]
 80036ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80036ee:	6881      	ldr	r1, [r0, #8]
 80036f0:	9301      	str	r3, [sp, #4]
 80036f2:	f000 f94b 	bl	800398c <_vfiprintf_r>
 80036f6:	b003      	add	sp, #12
 80036f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80036fc:	b004      	add	sp, #16
 80036fe:	4770      	bx	lr
 8003700:	20000038 	.word	0x20000038

08003704 <__sread>:
 8003704:	b510      	push	{r4, lr}
 8003706:	460c      	mov	r4, r1
 8003708:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800370c:	f000 f868 	bl	80037e0 <_read_r>
 8003710:	2800      	cmp	r0, #0
 8003712:	bfab      	itete	ge
 8003714:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003716:	89a3      	ldrhlt	r3, [r4, #12]
 8003718:	181b      	addge	r3, r3, r0
 800371a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800371e:	bfac      	ite	ge
 8003720:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003722:	81a3      	strhlt	r3, [r4, #12]
 8003724:	bd10      	pop	{r4, pc}

08003726 <__swrite>:
 8003726:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800372a:	461f      	mov	r7, r3
 800372c:	898b      	ldrh	r3, [r1, #12]
 800372e:	05db      	lsls	r3, r3, #23
 8003730:	4605      	mov	r5, r0
 8003732:	460c      	mov	r4, r1
 8003734:	4616      	mov	r6, r2
 8003736:	d505      	bpl.n	8003744 <__swrite+0x1e>
 8003738:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800373c:	2302      	movs	r3, #2
 800373e:	2200      	movs	r2, #0
 8003740:	f000 f83c 	bl	80037bc <_lseek_r>
 8003744:	89a3      	ldrh	r3, [r4, #12]
 8003746:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800374a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800374e:	81a3      	strh	r3, [r4, #12]
 8003750:	4632      	mov	r2, r6
 8003752:	463b      	mov	r3, r7
 8003754:	4628      	mov	r0, r5
 8003756:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800375a:	f000 b863 	b.w	8003824 <_write_r>

0800375e <__sseek>:
 800375e:	b510      	push	{r4, lr}
 8003760:	460c      	mov	r4, r1
 8003762:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003766:	f000 f829 	bl	80037bc <_lseek_r>
 800376a:	1c43      	adds	r3, r0, #1
 800376c:	89a3      	ldrh	r3, [r4, #12]
 800376e:	bf15      	itete	ne
 8003770:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003772:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003776:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800377a:	81a3      	strheq	r3, [r4, #12]
 800377c:	bf18      	it	ne
 800377e:	81a3      	strhne	r3, [r4, #12]
 8003780:	bd10      	pop	{r4, pc}

08003782 <__sclose>:
 8003782:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003786:	f000 b809 	b.w	800379c <_close_r>

0800378a <memset>:
 800378a:	4402      	add	r2, r0
 800378c:	4603      	mov	r3, r0
 800378e:	4293      	cmp	r3, r2
 8003790:	d100      	bne.n	8003794 <memset+0xa>
 8003792:	4770      	bx	lr
 8003794:	f803 1b01 	strb.w	r1, [r3], #1
 8003798:	e7f9      	b.n	800378e <memset+0x4>
	...

0800379c <_close_r>:
 800379c:	b538      	push	{r3, r4, r5, lr}
 800379e:	4d06      	ldr	r5, [pc, #24]	@ (80037b8 <_close_r+0x1c>)
 80037a0:	2300      	movs	r3, #0
 80037a2:	4604      	mov	r4, r0
 80037a4:	4608      	mov	r0, r1
 80037a6:	602b      	str	r3, [r5, #0]
 80037a8:	f7fd f82b 	bl	8000802 <_close>
 80037ac:	1c43      	adds	r3, r0, #1
 80037ae:	d102      	bne.n	80037b6 <_close_r+0x1a>
 80037b0:	682b      	ldr	r3, [r5, #0]
 80037b2:	b103      	cbz	r3, 80037b6 <_close_r+0x1a>
 80037b4:	6023      	str	r3, [r4, #0]
 80037b6:	bd38      	pop	{r3, r4, r5, pc}
 80037b8:	200005e4 	.word	0x200005e4

080037bc <_lseek_r>:
 80037bc:	b538      	push	{r3, r4, r5, lr}
 80037be:	4d07      	ldr	r5, [pc, #28]	@ (80037dc <_lseek_r+0x20>)
 80037c0:	4604      	mov	r4, r0
 80037c2:	4608      	mov	r0, r1
 80037c4:	4611      	mov	r1, r2
 80037c6:	2200      	movs	r2, #0
 80037c8:	602a      	str	r2, [r5, #0]
 80037ca:	461a      	mov	r2, r3
 80037cc:	f7fd f840 	bl	8000850 <_lseek>
 80037d0:	1c43      	adds	r3, r0, #1
 80037d2:	d102      	bne.n	80037da <_lseek_r+0x1e>
 80037d4:	682b      	ldr	r3, [r5, #0]
 80037d6:	b103      	cbz	r3, 80037da <_lseek_r+0x1e>
 80037d8:	6023      	str	r3, [r4, #0]
 80037da:	bd38      	pop	{r3, r4, r5, pc}
 80037dc:	200005e4 	.word	0x200005e4

080037e0 <_read_r>:
 80037e0:	b538      	push	{r3, r4, r5, lr}
 80037e2:	4d07      	ldr	r5, [pc, #28]	@ (8003800 <_read_r+0x20>)
 80037e4:	4604      	mov	r4, r0
 80037e6:	4608      	mov	r0, r1
 80037e8:	4611      	mov	r1, r2
 80037ea:	2200      	movs	r2, #0
 80037ec:	602a      	str	r2, [r5, #0]
 80037ee:	461a      	mov	r2, r3
 80037f0:	f7fc ffce 	bl	8000790 <_read>
 80037f4:	1c43      	adds	r3, r0, #1
 80037f6:	d102      	bne.n	80037fe <_read_r+0x1e>
 80037f8:	682b      	ldr	r3, [r5, #0]
 80037fa:	b103      	cbz	r3, 80037fe <_read_r+0x1e>
 80037fc:	6023      	str	r3, [r4, #0]
 80037fe:	bd38      	pop	{r3, r4, r5, pc}
 8003800:	200005e4 	.word	0x200005e4

08003804 <_sbrk_r>:
 8003804:	b538      	push	{r3, r4, r5, lr}
 8003806:	4d06      	ldr	r5, [pc, #24]	@ (8003820 <_sbrk_r+0x1c>)
 8003808:	2300      	movs	r3, #0
 800380a:	4604      	mov	r4, r0
 800380c:	4608      	mov	r0, r1
 800380e:	602b      	str	r3, [r5, #0]
 8003810:	f7fd f82c 	bl	800086c <_sbrk>
 8003814:	1c43      	adds	r3, r0, #1
 8003816:	d102      	bne.n	800381e <_sbrk_r+0x1a>
 8003818:	682b      	ldr	r3, [r5, #0]
 800381a:	b103      	cbz	r3, 800381e <_sbrk_r+0x1a>
 800381c:	6023      	str	r3, [r4, #0]
 800381e:	bd38      	pop	{r3, r4, r5, pc}
 8003820:	200005e4 	.word	0x200005e4

08003824 <_write_r>:
 8003824:	b538      	push	{r3, r4, r5, lr}
 8003826:	4d07      	ldr	r5, [pc, #28]	@ (8003844 <_write_r+0x20>)
 8003828:	4604      	mov	r4, r0
 800382a:	4608      	mov	r0, r1
 800382c:	4611      	mov	r1, r2
 800382e:	2200      	movs	r2, #0
 8003830:	602a      	str	r2, [r5, #0]
 8003832:	461a      	mov	r2, r3
 8003834:	f7fc ffc9 	bl	80007ca <_write>
 8003838:	1c43      	adds	r3, r0, #1
 800383a:	d102      	bne.n	8003842 <_write_r+0x1e>
 800383c:	682b      	ldr	r3, [r5, #0]
 800383e:	b103      	cbz	r3, 8003842 <_write_r+0x1e>
 8003840:	6023      	str	r3, [r4, #0]
 8003842:	bd38      	pop	{r3, r4, r5, pc}
 8003844:	200005e4 	.word	0x200005e4

08003848 <__errno>:
 8003848:	4b01      	ldr	r3, [pc, #4]	@ (8003850 <__errno+0x8>)
 800384a:	6818      	ldr	r0, [r3, #0]
 800384c:	4770      	bx	lr
 800384e:	bf00      	nop
 8003850:	20000038 	.word	0x20000038

08003854 <__libc_init_array>:
 8003854:	b570      	push	{r4, r5, r6, lr}
 8003856:	4d0d      	ldr	r5, [pc, #52]	@ (800388c <__libc_init_array+0x38>)
 8003858:	4c0d      	ldr	r4, [pc, #52]	@ (8003890 <__libc_init_array+0x3c>)
 800385a:	1b64      	subs	r4, r4, r5
 800385c:	10a4      	asrs	r4, r4, #2
 800385e:	2600      	movs	r6, #0
 8003860:	42a6      	cmp	r6, r4
 8003862:	d109      	bne.n	8003878 <__libc_init_array+0x24>
 8003864:	4d0b      	ldr	r5, [pc, #44]	@ (8003894 <__libc_init_array+0x40>)
 8003866:	4c0c      	ldr	r4, [pc, #48]	@ (8003898 <__libc_init_array+0x44>)
 8003868:	f000 fcfa 	bl	8004260 <_init>
 800386c:	1b64      	subs	r4, r4, r5
 800386e:	10a4      	asrs	r4, r4, #2
 8003870:	2600      	movs	r6, #0
 8003872:	42a6      	cmp	r6, r4
 8003874:	d105      	bne.n	8003882 <__libc_init_array+0x2e>
 8003876:	bd70      	pop	{r4, r5, r6, pc}
 8003878:	f855 3b04 	ldr.w	r3, [r5], #4
 800387c:	4798      	blx	r3
 800387e:	3601      	adds	r6, #1
 8003880:	e7ee      	b.n	8003860 <__libc_init_array+0xc>
 8003882:	f855 3b04 	ldr.w	r3, [r5], #4
 8003886:	4798      	blx	r3
 8003888:	3601      	adds	r6, #1
 800388a:	e7f2      	b.n	8003872 <__libc_init_array+0x1e>
 800388c:	080042c0 	.word	0x080042c0
 8003890:	080042c0 	.word	0x080042c0
 8003894:	080042c0 	.word	0x080042c0
 8003898:	080042c4 	.word	0x080042c4

0800389c <__retarget_lock_init_recursive>:
 800389c:	4770      	bx	lr

0800389e <__retarget_lock_acquire_recursive>:
 800389e:	4770      	bx	lr

080038a0 <__retarget_lock_release_recursive>:
 80038a0:	4770      	bx	lr
	...

080038a4 <_free_r>:
 80038a4:	b538      	push	{r3, r4, r5, lr}
 80038a6:	4605      	mov	r5, r0
 80038a8:	2900      	cmp	r1, #0
 80038aa:	d041      	beq.n	8003930 <_free_r+0x8c>
 80038ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80038b0:	1f0c      	subs	r4, r1, #4
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	bfb8      	it	lt
 80038b6:	18e4      	addlt	r4, r4, r3
 80038b8:	f7ff fe44 	bl	8003544 <__malloc_lock>
 80038bc:	4a1d      	ldr	r2, [pc, #116]	@ (8003934 <_free_r+0x90>)
 80038be:	6813      	ldr	r3, [r2, #0]
 80038c0:	b933      	cbnz	r3, 80038d0 <_free_r+0x2c>
 80038c2:	6063      	str	r3, [r4, #4]
 80038c4:	6014      	str	r4, [r2, #0]
 80038c6:	4628      	mov	r0, r5
 80038c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80038cc:	f7ff be40 	b.w	8003550 <__malloc_unlock>
 80038d0:	42a3      	cmp	r3, r4
 80038d2:	d908      	bls.n	80038e6 <_free_r+0x42>
 80038d4:	6820      	ldr	r0, [r4, #0]
 80038d6:	1821      	adds	r1, r4, r0
 80038d8:	428b      	cmp	r3, r1
 80038da:	bf01      	itttt	eq
 80038dc:	6819      	ldreq	r1, [r3, #0]
 80038de:	685b      	ldreq	r3, [r3, #4]
 80038e0:	1809      	addeq	r1, r1, r0
 80038e2:	6021      	streq	r1, [r4, #0]
 80038e4:	e7ed      	b.n	80038c2 <_free_r+0x1e>
 80038e6:	461a      	mov	r2, r3
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	b10b      	cbz	r3, 80038f0 <_free_r+0x4c>
 80038ec:	42a3      	cmp	r3, r4
 80038ee:	d9fa      	bls.n	80038e6 <_free_r+0x42>
 80038f0:	6811      	ldr	r1, [r2, #0]
 80038f2:	1850      	adds	r0, r2, r1
 80038f4:	42a0      	cmp	r0, r4
 80038f6:	d10b      	bne.n	8003910 <_free_r+0x6c>
 80038f8:	6820      	ldr	r0, [r4, #0]
 80038fa:	4401      	add	r1, r0
 80038fc:	1850      	adds	r0, r2, r1
 80038fe:	4283      	cmp	r3, r0
 8003900:	6011      	str	r1, [r2, #0]
 8003902:	d1e0      	bne.n	80038c6 <_free_r+0x22>
 8003904:	6818      	ldr	r0, [r3, #0]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	6053      	str	r3, [r2, #4]
 800390a:	4408      	add	r0, r1
 800390c:	6010      	str	r0, [r2, #0]
 800390e:	e7da      	b.n	80038c6 <_free_r+0x22>
 8003910:	d902      	bls.n	8003918 <_free_r+0x74>
 8003912:	230c      	movs	r3, #12
 8003914:	602b      	str	r3, [r5, #0]
 8003916:	e7d6      	b.n	80038c6 <_free_r+0x22>
 8003918:	6820      	ldr	r0, [r4, #0]
 800391a:	1821      	adds	r1, r4, r0
 800391c:	428b      	cmp	r3, r1
 800391e:	bf04      	itt	eq
 8003920:	6819      	ldreq	r1, [r3, #0]
 8003922:	685b      	ldreq	r3, [r3, #4]
 8003924:	6063      	str	r3, [r4, #4]
 8003926:	bf04      	itt	eq
 8003928:	1809      	addeq	r1, r1, r0
 800392a:	6021      	streq	r1, [r4, #0]
 800392c:	6054      	str	r4, [r2, #4]
 800392e:	e7ca      	b.n	80038c6 <_free_r+0x22>
 8003930:	bd38      	pop	{r3, r4, r5, pc}
 8003932:	bf00      	nop
 8003934:	200004a4 	.word	0x200004a4

08003938 <__sfputc_r>:
 8003938:	6893      	ldr	r3, [r2, #8]
 800393a:	3b01      	subs	r3, #1
 800393c:	2b00      	cmp	r3, #0
 800393e:	b410      	push	{r4}
 8003940:	6093      	str	r3, [r2, #8]
 8003942:	da08      	bge.n	8003956 <__sfputc_r+0x1e>
 8003944:	6994      	ldr	r4, [r2, #24]
 8003946:	42a3      	cmp	r3, r4
 8003948:	db01      	blt.n	800394e <__sfputc_r+0x16>
 800394a:	290a      	cmp	r1, #10
 800394c:	d103      	bne.n	8003956 <__sfputc_r+0x1e>
 800394e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003952:	f000 bb6d 	b.w	8004030 <__swbuf_r>
 8003956:	6813      	ldr	r3, [r2, #0]
 8003958:	1c58      	adds	r0, r3, #1
 800395a:	6010      	str	r0, [r2, #0]
 800395c:	7019      	strb	r1, [r3, #0]
 800395e:	4608      	mov	r0, r1
 8003960:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003964:	4770      	bx	lr

08003966 <__sfputs_r>:
 8003966:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003968:	4606      	mov	r6, r0
 800396a:	460f      	mov	r7, r1
 800396c:	4614      	mov	r4, r2
 800396e:	18d5      	adds	r5, r2, r3
 8003970:	42ac      	cmp	r4, r5
 8003972:	d101      	bne.n	8003978 <__sfputs_r+0x12>
 8003974:	2000      	movs	r0, #0
 8003976:	e007      	b.n	8003988 <__sfputs_r+0x22>
 8003978:	f814 1b01 	ldrb.w	r1, [r4], #1
 800397c:	463a      	mov	r2, r7
 800397e:	4630      	mov	r0, r6
 8003980:	f7ff ffda 	bl	8003938 <__sfputc_r>
 8003984:	1c43      	adds	r3, r0, #1
 8003986:	d1f3      	bne.n	8003970 <__sfputs_r+0xa>
 8003988:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800398c <_vfiprintf_r>:
 800398c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003990:	460d      	mov	r5, r1
 8003992:	b09d      	sub	sp, #116	@ 0x74
 8003994:	4614      	mov	r4, r2
 8003996:	4698      	mov	r8, r3
 8003998:	4606      	mov	r6, r0
 800399a:	b118      	cbz	r0, 80039a4 <_vfiprintf_r+0x18>
 800399c:	6a03      	ldr	r3, [r0, #32]
 800399e:	b90b      	cbnz	r3, 80039a4 <_vfiprintf_r+0x18>
 80039a0:	f7ff fe68 	bl	8003674 <__sinit>
 80039a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80039a6:	07d9      	lsls	r1, r3, #31
 80039a8:	d405      	bmi.n	80039b6 <_vfiprintf_r+0x2a>
 80039aa:	89ab      	ldrh	r3, [r5, #12]
 80039ac:	059a      	lsls	r2, r3, #22
 80039ae:	d402      	bmi.n	80039b6 <_vfiprintf_r+0x2a>
 80039b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80039b2:	f7ff ff74 	bl	800389e <__retarget_lock_acquire_recursive>
 80039b6:	89ab      	ldrh	r3, [r5, #12]
 80039b8:	071b      	lsls	r3, r3, #28
 80039ba:	d501      	bpl.n	80039c0 <_vfiprintf_r+0x34>
 80039bc:	692b      	ldr	r3, [r5, #16]
 80039be:	b99b      	cbnz	r3, 80039e8 <_vfiprintf_r+0x5c>
 80039c0:	4629      	mov	r1, r5
 80039c2:	4630      	mov	r0, r6
 80039c4:	f000 fb72 	bl	80040ac <__swsetup_r>
 80039c8:	b170      	cbz	r0, 80039e8 <_vfiprintf_r+0x5c>
 80039ca:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80039cc:	07dc      	lsls	r4, r3, #31
 80039ce:	d504      	bpl.n	80039da <_vfiprintf_r+0x4e>
 80039d0:	f04f 30ff 	mov.w	r0, #4294967295
 80039d4:	b01d      	add	sp, #116	@ 0x74
 80039d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039da:	89ab      	ldrh	r3, [r5, #12]
 80039dc:	0598      	lsls	r0, r3, #22
 80039de:	d4f7      	bmi.n	80039d0 <_vfiprintf_r+0x44>
 80039e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80039e2:	f7ff ff5d 	bl	80038a0 <__retarget_lock_release_recursive>
 80039e6:	e7f3      	b.n	80039d0 <_vfiprintf_r+0x44>
 80039e8:	2300      	movs	r3, #0
 80039ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80039ec:	2320      	movs	r3, #32
 80039ee:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80039f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80039f6:	2330      	movs	r3, #48	@ 0x30
 80039f8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8003ba8 <_vfiprintf_r+0x21c>
 80039fc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003a00:	f04f 0901 	mov.w	r9, #1
 8003a04:	4623      	mov	r3, r4
 8003a06:	469a      	mov	sl, r3
 8003a08:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003a0c:	b10a      	cbz	r2, 8003a12 <_vfiprintf_r+0x86>
 8003a0e:	2a25      	cmp	r2, #37	@ 0x25
 8003a10:	d1f9      	bne.n	8003a06 <_vfiprintf_r+0x7a>
 8003a12:	ebba 0b04 	subs.w	fp, sl, r4
 8003a16:	d00b      	beq.n	8003a30 <_vfiprintf_r+0xa4>
 8003a18:	465b      	mov	r3, fp
 8003a1a:	4622      	mov	r2, r4
 8003a1c:	4629      	mov	r1, r5
 8003a1e:	4630      	mov	r0, r6
 8003a20:	f7ff ffa1 	bl	8003966 <__sfputs_r>
 8003a24:	3001      	adds	r0, #1
 8003a26:	f000 80a7 	beq.w	8003b78 <_vfiprintf_r+0x1ec>
 8003a2a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003a2c:	445a      	add	r2, fp
 8003a2e:	9209      	str	r2, [sp, #36]	@ 0x24
 8003a30:	f89a 3000 	ldrb.w	r3, [sl]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	f000 809f 	beq.w	8003b78 <_vfiprintf_r+0x1ec>
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	f04f 32ff 	mov.w	r2, #4294967295
 8003a40:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003a44:	f10a 0a01 	add.w	sl, sl, #1
 8003a48:	9304      	str	r3, [sp, #16]
 8003a4a:	9307      	str	r3, [sp, #28]
 8003a4c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003a50:	931a      	str	r3, [sp, #104]	@ 0x68
 8003a52:	4654      	mov	r4, sl
 8003a54:	2205      	movs	r2, #5
 8003a56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a5a:	4853      	ldr	r0, [pc, #332]	@ (8003ba8 <_vfiprintf_r+0x21c>)
 8003a5c:	f7fc fbb8 	bl	80001d0 <memchr>
 8003a60:	9a04      	ldr	r2, [sp, #16]
 8003a62:	b9d8      	cbnz	r0, 8003a9c <_vfiprintf_r+0x110>
 8003a64:	06d1      	lsls	r1, r2, #27
 8003a66:	bf44      	itt	mi
 8003a68:	2320      	movmi	r3, #32
 8003a6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003a6e:	0713      	lsls	r3, r2, #28
 8003a70:	bf44      	itt	mi
 8003a72:	232b      	movmi	r3, #43	@ 0x2b
 8003a74:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003a78:	f89a 3000 	ldrb.w	r3, [sl]
 8003a7c:	2b2a      	cmp	r3, #42	@ 0x2a
 8003a7e:	d015      	beq.n	8003aac <_vfiprintf_r+0x120>
 8003a80:	9a07      	ldr	r2, [sp, #28]
 8003a82:	4654      	mov	r4, sl
 8003a84:	2000      	movs	r0, #0
 8003a86:	f04f 0c0a 	mov.w	ip, #10
 8003a8a:	4621      	mov	r1, r4
 8003a8c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003a90:	3b30      	subs	r3, #48	@ 0x30
 8003a92:	2b09      	cmp	r3, #9
 8003a94:	d94b      	bls.n	8003b2e <_vfiprintf_r+0x1a2>
 8003a96:	b1b0      	cbz	r0, 8003ac6 <_vfiprintf_r+0x13a>
 8003a98:	9207      	str	r2, [sp, #28]
 8003a9a:	e014      	b.n	8003ac6 <_vfiprintf_r+0x13a>
 8003a9c:	eba0 0308 	sub.w	r3, r0, r8
 8003aa0:	fa09 f303 	lsl.w	r3, r9, r3
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	9304      	str	r3, [sp, #16]
 8003aa8:	46a2      	mov	sl, r4
 8003aaa:	e7d2      	b.n	8003a52 <_vfiprintf_r+0xc6>
 8003aac:	9b03      	ldr	r3, [sp, #12]
 8003aae:	1d19      	adds	r1, r3, #4
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	9103      	str	r1, [sp, #12]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	bfbb      	ittet	lt
 8003ab8:	425b      	neglt	r3, r3
 8003aba:	f042 0202 	orrlt.w	r2, r2, #2
 8003abe:	9307      	strge	r3, [sp, #28]
 8003ac0:	9307      	strlt	r3, [sp, #28]
 8003ac2:	bfb8      	it	lt
 8003ac4:	9204      	strlt	r2, [sp, #16]
 8003ac6:	7823      	ldrb	r3, [r4, #0]
 8003ac8:	2b2e      	cmp	r3, #46	@ 0x2e
 8003aca:	d10a      	bne.n	8003ae2 <_vfiprintf_r+0x156>
 8003acc:	7863      	ldrb	r3, [r4, #1]
 8003ace:	2b2a      	cmp	r3, #42	@ 0x2a
 8003ad0:	d132      	bne.n	8003b38 <_vfiprintf_r+0x1ac>
 8003ad2:	9b03      	ldr	r3, [sp, #12]
 8003ad4:	1d1a      	adds	r2, r3, #4
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	9203      	str	r2, [sp, #12]
 8003ada:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003ade:	3402      	adds	r4, #2
 8003ae0:	9305      	str	r3, [sp, #20]
 8003ae2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8003bb8 <_vfiprintf_r+0x22c>
 8003ae6:	7821      	ldrb	r1, [r4, #0]
 8003ae8:	2203      	movs	r2, #3
 8003aea:	4650      	mov	r0, sl
 8003aec:	f7fc fb70 	bl	80001d0 <memchr>
 8003af0:	b138      	cbz	r0, 8003b02 <_vfiprintf_r+0x176>
 8003af2:	9b04      	ldr	r3, [sp, #16]
 8003af4:	eba0 000a 	sub.w	r0, r0, sl
 8003af8:	2240      	movs	r2, #64	@ 0x40
 8003afa:	4082      	lsls	r2, r0
 8003afc:	4313      	orrs	r3, r2
 8003afe:	3401      	adds	r4, #1
 8003b00:	9304      	str	r3, [sp, #16]
 8003b02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b06:	4829      	ldr	r0, [pc, #164]	@ (8003bac <_vfiprintf_r+0x220>)
 8003b08:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003b0c:	2206      	movs	r2, #6
 8003b0e:	f7fc fb5f 	bl	80001d0 <memchr>
 8003b12:	2800      	cmp	r0, #0
 8003b14:	d03f      	beq.n	8003b96 <_vfiprintf_r+0x20a>
 8003b16:	4b26      	ldr	r3, [pc, #152]	@ (8003bb0 <_vfiprintf_r+0x224>)
 8003b18:	bb1b      	cbnz	r3, 8003b62 <_vfiprintf_r+0x1d6>
 8003b1a:	9b03      	ldr	r3, [sp, #12]
 8003b1c:	3307      	adds	r3, #7
 8003b1e:	f023 0307 	bic.w	r3, r3, #7
 8003b22:	3308      	adds	r3, #8
 8003b24:	9303      	str	r3, [sp, #12]
 8003b26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003b28:	443b      	add	r3, r7
 8003b2a:	9309      	str	r3, [sp, #36]	@ 0x24
 8003b2c:	e76a      	b.n	8003a04 <_vfiprintf_r+0x78>
 8003b2e:	fb0c 3202 	mla	r2, ip, r2, r3
 8003b32:	460c      	mov	r4, r1
 8003b34:	2001      	movs	r0, #1
 8003b36:	e7a8      	b.n	8003a8a <_vfiprintf_r+0xfe>
 8003b38:	2300      	movs	r3, #0
 8003b3a:	3401      	adds	r4, #1
 8003b3c:	9305      	str	r3, [sp, #20]
 8003b3e:	4619      	mov	r1, r3
 8003b40:	f04f 0c0a 	mov.w	ip, #10
 8003b44:	4620      	mov	r0, r4
 8003b46:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003b4a:	3a30      	subs	r2, #48	@ 0x30
 8003b4c:	2a09      	cmp	r2, #9
 8003b4e:	d903      	bls.n	8003b58 <_vfiprintf_r+0x1cc>
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d0c6      	beq.n	8003ae2 <_vfiprintf_r+0x156>
 8003b54:	9105      	str	r1, [sp, #20]
 8003b56:	e7c4      	b.n	8003ae2 <_vfiprintf_r+0x156>
 8003b58:	fb0c 2101 	mla	r1, ip, r1, r2
 8003b5c:	4604      	mov	r4, r0
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e7f0      	b.n	8003b44 <_vfiprintf_r+0x1b8>
 8003b62:	ab03      	add	r3, sp, #12
 8003b64:	9300      	str	r3, [sp, #0]
 8003b66:	462a      	mov	r2, r5
 8003b68:	4b12      	ldr	r3, [pc, #72]	@ (8003bb4 <_vfiprintf_r+0x228>)
 8003b6a:	a904      	add	r1, sp, #16
 8003b6c:	4630      	mov	r0, r6
 8003b6e:	f3af 8000 	nop.w
 8003b72:	4607      	mov	r7, r0
 8003b74:	1c78      	adds	r0, r7, #1
 8003b76:	d1d6      	bne.n	8003b26 <_vfiprintf_r+0x19a>
 8003b78:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003b7a:	07d9      	lsls	r1, r3, #31
 8003b7c:	d405      	bmi.n	8003b8a <_vfiprintf_r+0x1fe>
 8003b7e:	89ab      	ldrh	r3, [r5, #12]
 8003b80:	059a      	lsls	r2, r3, #22
 8003b82:	d402      	bmi.n	8003b8a <_vfiprintf_r+0x1fe>
 8003b84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003b86:	f7ff fe8b 	bl	80038a0 <__retarget_lock_release_recursive>
 8003b8a:	89ab      	ldrh	r3, [r5, #12]
 8003b8c:	065b      	lsls	r3, r3, #25
 8003b8e:	f53f af1f 	bmi.w	80039d0 <_vfiprintf_r+0x44>
 8003b92:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003b94:	e71e      	b.n	80039d4 <_vfiprintf_r+0x48>
 8003b96:	ab03      	add	r3, sp, #12
 8003b98:	9300      	str	r3, [sp, #0]
 8003b9a:	462a      	mov	r2, r5
 8003b9c:	4b05      	ldr	r3, [pc, #20]	@ (8003bb4 <_vfiprintf_r+0x228>)
 8003b9e:	a904      	add	r1, sp, #16
 8003ba0:	4630      	mov	r0, r6
 8003ba2:	f000 f879 	bl	8003c98 <_printf_i>
 8003ba6:	e7e4      	b.n	8003b72 <_vfiprintf_r+0x1e6>
 8003ba8:	08004283 	.word	0x08004283
 8003bac:	0800428d 	.word	0x0800428d
 8003bb0:	00000000 	.word	0x00000000
 8003bb4:	08003967 	.word	0x08003967
 8003bb8:	08004289 	.word	0x08004289

08003bbc <_printf_common>:
 8003bbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003bc0:	4616      	mov	r6, r2
 8003bc2:	4698      	mov	r8, r3
 8003bc4:	688a      	ldr	r2, [r1, #8]
 8003bc6:	690b      	ldr	r3, [r1, #16]
 8003bc8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	bfb8      	it	lt
 8003bd0:	4613      	movlt	r3, r2
 8003bd2:	6033      	str	r3, [r6, #0]
 8003bd4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003bd8:	4607      	mov	r7, r0
 8003bda:	460c      	mov	r4, r1
 8003bdc:	b10a      	cbz	r2, 8003be2 <_printf_common+0x26>
 8003bde:	3301      	adds	r3, #1
 8003be0:	6033      	str	r3, [r6, #0]
 8003be2:	6823      	ldr	r3, [r4, #0]
 8003be4:	0699      	lsls	r1, r3, #26
 8003be6:	bf42      	ittt	mi
 8003be8:	6833      	ldrmi	r3, [r6, #0]
 8003bea:	3302      	addmi	r3, #2
 8003bec:	6033      	strmi	r3, [r6, #0]
 8003bee:	6825      	ldr	r5, [r4, #0]
 8003bf0:	f015 0506 	ands.w	r5, r5, #6
 8003bf4:	d106      	bne.n	8003c04 <_printf_common+0x48>
 8003bf6:	f104 0a19 	add.w	sl, r4, #25
 8003bfa:	68e3      	ldr	r3, [r4, #12]
 8003bfc:	6832      	ldr	r2, [r6, #0]
 8003bfe:	1a9b      	subs	r3, r3, r2
 8003c00:	42ab      	cmp	r3, r5
 8003c02:	dc26      	bgt.n	8003c52 <_printf_common+0x96>
 8003c04:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003c08:	6822      	ldr	r2, [r4, #0]
 8003c0a:	3b00      	subs	r3, #0
 8003c0c:	bf18      	it	ne
 8003c0e:	2301      	movne	r3, #1
 8003c10:	0692      	lsls	r2, r2, #26
 8003c12:	d42b      	bmi.n	8003c6c <_printf_common+0xb0>
 8003c14:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003c18:	4641      	mov	r1, r8
 8003c1a:	4638      	mov	r0, r7
 8003c1c:	47c8      	blx	r9
 8003c1e:	3001      	adds	r0, #1
 8003c20:	d01e      	beq.n	8003c60 <_printf_common+0xa4>
 8003c22:	6823      	ldr	r3, [r4, #0]
 8003c24:	6922      	ldr	r2, [r4, #16]
 8003c26:	f003 0306 	and.w	r3, r3, #6
 8003c2a:	2b04      	cmp	r3, #4
 8003c2c:	bf02      	ittt	eq
 8003c2e:	68e5      	ldreq	r5, [r4, #12]
 8003c30:	6833      	ldreq	r3, [r6, #0]
 8003c32:	1aed      	subeq	r5, r5, r3
 8003c34:	68a3      	ldr	r3, [r4, #8]
 8003c36:	bf0c      	ite	eq
 8003c38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003c3c:	2500      	movne	r5, #0
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	bfc4      	itt	gt
 8003c42:	1a9b      	subgt	r3, r3, r2
 8003c44:	18ed      	addgt	r5, r5, r3
 8003c46:	2600      	movs	r6, #0
 8003c48:	341a      	adds	r4, #26
 8003c4a:	42b5      	cmp	r5, r6
 8003c4c:	d11a      	bne.n	8003c84 <_printf_common+0xc8>
 8003c4e:	2000      	movs	r0, #0
 8003c50:	e008      	b.n	8003c64 <_printf_common+0xa8>
 8003c52:	2301      	movs	r3, #1
 8003c54:	4652      	mov	r2, sl
 8003c56:	4641      	mov	r1, r8
 8003c58:	4638      	mov	r0, r7
 8003c5a:	47c8      	blx	r9
 8003c5c:	3001      	adds	r0, #1
 8003c5e:	d103      	bne.n	8003c68 <_printf_common+0xac>
 8003c60:	f04f 30ff 	mov.w	r0, #4294967295
 8003c64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c68:	3501      	adds	r5, #1
 8003c6a:	e7c6      	b.n	8003bfa <_printf_common+0x3e>
 8003c6c:	18e1      	adds	r1, r4, r3
 8003c6e:	1c5a      	adds	r2, r3, #1
 8003c70:	2030      	movs	r0, #48	@ 0x30
 8003c72:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003c76:	4422      	add	r2, r4
 8003c78:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003c7c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003c80:	3302      	adds	r3, #2
 8003c82:	e7c7      	b.n	8003c14 <_printf_common+0x58>
 8003c84:	2301      	movs	r3, #1
 8003c86:	4622      	mov	r2, r4
 8003c88:	4641      	mov	r1, r8
 8003c8a:	4638      	mov	r0, r7
 8003c8c:	47c8      	blx	r9
 8003c8e:	3001      	adds	r0, #1
 8003c90:	d0e6      	beq.n	8003c60 <_printf_common+0xa4>
 8003c92:	3601      	adds	r6, #1
 8003c94:	e7d9      	b.n	8003c4a <_printf_common+0x8e>
	...

08003c98 <_printf_i>:
 8003c98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003c9c:	7e0f      	ldrb	r7, [r1, #24]
 8003c9e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003ca0:	2f78      	cmp	r7, #120	@ 0x78
 8003ca2:	4691      	mov	r9, r2
 8003ca4:	4680      	mov	r8, r0
 8003ca6:	460c      	mov	r4, r1
 8003ca8:	469a      	mov	sl, r3
 8003caa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003cae:	d807      	bhi.n	8003cc0 <_printf_i+0x28>
 8003cb0:	2f62      	cmp	r7, #98	@ 0x62
 8003cb2:	d80a      	bhi.n	8003cca <_printf_i+0x32>
 8003cb4:	2f00      	cmp	r7, #0
 8003cb6:	f000 80d2 	beq.w	8003e5e <_printf_i+0x1c6>
 8003cba:	2f58      	cmp	r7, #88	@ 0x58
 8003cbc:	f000 80b9 	beq.w	8003e32 <_printf_i+0x19a>
 8003cc0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003cc4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003cc8:	e03a      	b.n	8003d40 <_printf_i+0xa8>
 8003cca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003cce:	2b15      	cmp	r3, #21
 8003cd0:	d8f6      	bhi.n	8003cc0 <_printf_i+0x28>
 8003cd2:	a101      	add	r1, pc, #4	@ (adr r1, 8003cd8 <_printf_i+0x40>)
 8003cd4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003cd8:	08003d31 	.word	0x08003d31
 8003cdc:	08003d45 	.word	0x08003d45
 8003ce0:	08003cc1 	.word	0x08003cc1
 8003ce4:	08003cc1 	.word	0x08003cc1
 8003ce8:	08003cc1 	.word	0x08003cc1
 8003cec:	08003cc1 	.word	0x08003cc1
 8003cf0:	08003d45 	.word	0x08003d45
 8003cf4:	08003cc1 	.word	0x08003cc1
 8003cf8:	08003cc1 	.word	0x08003cc1
 8003cfc:	08003cc1 	.word	0x08003cc1
 8003d00:	08003cc1 	.word	0x08003cc1
 8003d04:	08003e45 	.word	0x08003e45
 8003d08:	08003d6f 	.word	0x08003d6f
 8003d0c:	08003dff 	.word	0x08003dff
 8003d10:	08003cc1 	.word	0x08003cc1
 8003d14:	08003cc1 	.word	0x08003cc1
 8003d18:	08003e67 	.word	0x08003e67
 8003d1c:	08003cc1 	.word	0x08003cc1
 8003d20:	08003d6f 	.word	0x08003d6f
 8003d24:	08003cc1 	.word	0x08003cc1
 8003d28:	08003cc1 	.word	0x08003cc1
 8003d2c:	08003e07 	.word	0x08003e07
 8003d30:	6833      	ldr	r3, [r6, #0]
 8003d32:	1d1a      	adds	r2, r3, #4
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	6032      	str	r2, [r6, #0]
 8003d38:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003d3c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003d40:	2301      	movs	r3, #1
 8003d42:	e09d      	b.n	8003e80 <_printf_i+0x1e8>
 8003d44:	6833      	ldr	r3, [r6, #0]
 8003d46:	6820      	ldr	r0, [r4, #0]
 8003d48:	1d19      	adds	r1, r3, #4
 8003d4a:	6031      	str	r1, [r6, #0]
 8003d4c:	0606      	lsls	r6, r0, #24
 8003d4e:	d501      	bpl.n	8003d54 <_printf_i+0xbc>
 8003d50:	681d      	ldr	r5, [r3, #0]
 8003d52:	e003      	b.n	8003d5c <_printf_i+0xc4>
 8003d54:	0645      	lsls	r5, r0, #25
 8003d56:	d5fb      	bpl.n	8003d50 <_printf_i+0xb8>
 8003d58:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003d5c:	2d00      	cmp	r5, #0
 8003d5e:	da03      	bge.n	8003d68 <_printf_i+0xd0>
 8003d60:	232d      	movs	r3, #45	@ 0x2d
 8003d62:	426d      	negs	r5, r5
 8003d64:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003d68:	4859      	ldr	r0, [pc, #356]	@ (8003ed0 <_printf_i+0x238>)
 8003d6a:	230a      	movs	r3, #10
 8003d6c:	e011      	b.n	8003d92 <_printf_i+0xfa>
 8003d6e:	6821      	ldr	r1, [r4, #0]
 8003d70:	6833      	ldr	r3, [r6, #0]
 8003d72:	0608      	lsls	r0, r1, #24
 8003d74:	f853 5b04 	ldr.w	r5, [r3], #4
 8003d78:	d402      	bmi.n	8003d80 <_printf_i+0xe8>
 8003d7a:	0649      	lsls	r1, r1, #25
 8003d7c:	bf48      	it	mi
 8003d7e:	b2ad      	uxthmi	r5, r5
 8003d80:	2f6f      	cmp	r7, #111	@ 0x6f
 8003d82:	4853      	ldr	r0, [pc, #332]	@ (8003ed0 <_printf_i+0x238>)
 8003d84:	6033      	str	r3, [r6, #0]
 8003d86:	bf14      	ite	ne
 8003d88:	230a      	movne	r3, #10
 8003d8a:	2308      	moveq	r3, #8
 8003d8c:	2100      	movs	r1, #0
 8003d8e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003d92:	6866      	ldr	r6, [r4, #4]
 8003d94:	60a6      	str	r6, [r4, #8]
 8003d96:	2e00      	cmp	r6, #0
 8003d98:	bfa2      	ittt	ge
 8003d9a:	6821      	ldrge	r1, [r4, #0]
 8003d9c:	f021 0104 	bicge.w	r1, r1, #4
 8003da0:	6021      	strge	r1, [r4, #0]
 8003da2:	b90d      	cbnz	r5, 8003da8 <_printf_i+0x110>
 8003da4:	2e00      	cmp	r6, #0
 8003da6:	d04b      	beq.n	8003e40 <_printf_i+0x1a8>
 8003da8:	4616      	mov	r6, r2
 8003daa:	fbb5 f1f3 	udiv	r1, r5, r3
 8003dae:	fb03 5711 	mls	r7, r3, r1, r5
 8003db2:	5dc7      	ldrb	r7, [r0, r7]
 8003db4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003db8:	462f      	mov	r7, r5
 8003dba:	42bb      	cmp	r3, r7
 8003dbc:	460d      	mov	r5, r1
 8003dbe:	d9f4      	bls.n	8003daa <_printf_i+0x112>
 8003dc0:	2b08      	cmp	r3, #8
 8003dc2:	d10b      	bne.n	8003ddc <_printf_i+0x144>
 8003dc4:	6823      	ldr	r3, [r4, #0]
 8003dc6:	07df      	lsls	r7, r3, #31
 8003dc8:	d508      	bpl.n	8003ddc <_printf_i+0x144>
 8003dca:	6923      	ldr	r3, [r4, #16]
 8003dcc:	6861      	ldr	r1, [r4, #4]
 8003dce:	4299      	cmp	r1, r3
 8003dd0:	bfde      	ittt	le
 8003dd2:	2330      	movle	r3, #48	@ 0x30
 8003dd4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003dd8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003ddc:	1b92      	subs	r2, r2, r6
 8003dde:	6122      	str	r2, [r4, #16]
 8003de0:	f8cd a000 	str.w	sl, [sp]
 8003de4:	464b      	mov	r3, r9
 8003de6:	aa03      	add	r2, sp, #12
 8003de8:	4621      	mov	r1, r4
 8003dea:	4640      	mov	r0, r8
 8003dec:	f7ff fee6 	bl	8003bbc <_printf_common>
 8003df0:	3001      	adds	r0, #1
 8003df2:	d14a      	bne.n	8003e8a <_printf_i+0x1f2>
 8003df4:	f04f 30ff 	mov.w	r0, #4294967295
 8003df8:	b004      	add	sp, #16
 8003dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003dfe:	6823      	ldr	r3, [r4, #0]
 8003e00:	f043 0320 	orr.w	r3, r3, #32
 8003e04:	6023      	str	r3, [r4, #0]
 8003e06:	4833      	ldr	r0, [pc, #204]	@ (8003ed4 <_printf_i+0x23c>)
 8003e08:	2778      	movs	r7, #120	@ 0x78
 8003e0a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003e0e:	6823      	ldr	r3, [r4, #0]
 8003e10:	6831      	ldr	r1, [r6, #0]
 8003e12:	061f      	lsls	r7, r3, #24
 8003e14:	f851 5b04 	ldr.w	r5, [r1], #4
 8003e18:	d402      	bmi.n	8003e20 <_printf_i+0x188>
 8003e1a:	065f      	lsls	r7, r3, #25
 8003e1c:	bf48      	it	mi
 8003e1e:	b2ad      	uxthmi	r5, r5
 8003e20:	6031      	str	r1, [r6, #0]
 8003e22:	07d9      	lsls	r1, r3, #31
 8003e24:	bf44      	itt	mi
 8003e26:	f043 0320 	orrmi.w	r3, r3, #32
 8003e2a:	6023      	strmi	r3, [r4, #0]
 8003e2c:	b11d      	cbz	r5, 8003e36 <_printf_i+0x19e>
 8003e2e:	2310      	movs	r3, #16
 8003e30:	e7ac      	b.n	8003d8c <_printf_i+0xf4>
 8003e32:	4827      	ldr	r0, [pc, #156]	@ (8003ed0 <_printf_i+0x238>)
 8003e34:	e7e9      	b.n	8003e0a <_printf_i+0x172>
 8003e36:	6823      	ldr	r3, [r4, #0]
 8003e38:	f023 0320 	bic.w	r3, r3, #32
 8003e3c:	6023      	str	r3, [r4, #0]
 8003e3e:	e7f6      	b.n	8003e2e <_printf_i+0x196>
 8003e40:	4616      	mov	r6, r2
 8003e42:	e7bd      	b.n	8003dc0 <_printf_i+0x128>
 8003e44:	6833      	ldr	r3, [r6, #0]
 8003e46:	6825      	ldr	r5, [r4, #0]
 8003e48:	6961      	ldr	r1, [r4, #20]
 8003e4a:	1d18      	adds	r0, r3, #4
 8003e4c:	6030      	str	r0, [r6, #0]
 8003e4e:	062e      	lsls	r6, r5, #24
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	d501      	bpl.n	8003e58 <_printf_i+0x1c0>
 8003e54:	6019      	str	r1, [r3, #0]
 8003e56:	e002      	b.n	8003e5e <_printf_i+0x1c6>
 8003e58:	0668      	lsls	r0, r5, #25
 8003e5a:	d5fb      	bpl.n	8003e54 <_printf_i+0x1bc>
 8003e5c:	8019      	strh	r1, [r3, #0]
 8003e5e:	2300      	movs	r3, #0
 8003e60:	6123      	str	r3, [r4, #16]
 8003e62:	4616      	mov	r6, r2
 8003e64:	e7bc      	b.n	8003de0 <_printf_i+0x148>
 8003e66:	6833      	ldr	r3, [r6, #0]
 8003e68:	1d1a      	adds	r2, r3, #4
 8003e6a:	6032      	str	r2, [r6, #0]
 8003e6c:	681e      	ldr	r6, [r3, #0]
 8003e6e:	6862      	ldr	r2, [r4, #4]
 8003e70:	2100      	movs	r1, #0
 8003e72:	4630      	mov	r0, r6
 8003e74:	f7fc f9ac 	bl	80001d0 <memchr>
 8003e78:	b108      	cbz	r0, 8003e7e <_printf_i+0x1e6>
 8003e7a:	1b80      	subs	r0, r0, r6
 8003e7c:	6060      	str	r0, [r4, #4]
 8003e7e:	6863      	ldr	r3, [r4, #4]
 8003e80:	6123      	str	r3, [r4, #16]
 8003e82:	2300      	movs	r3, #0
 8003e84:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003e88:	e7aa      	b.n	8003de0 <_printf_i+0x148>
 8003e8a:	6923      	ldr	r3, [r4, #16]
 8003e8c:	4632      	mov	r2, r6
 8003e8e:	4649      	mov	r1, r9
 8003e90:	4640      	mov	r0, r8
 8003e92:	47d0      	blx	sl
 8003e94:	3001      	adds	r0, #1
 8003e96:	d0ad      	beq.n	8003df4 <_printf_i+0x15c>
 8003e98:	6823      	ldr	r3, [r4, #0]
 8003e9a:	079b      	lsls	r3, r3, #30
 8003e9c:	d413      	bmi.n	8003ec6 <_printf_i+0x22e>
 8003e9e:	68e0      	ldr	r0, [r4, #12]
 8003ea0:	9b03      	ldr	r3, [sp, #12]
 8003ea2:	4298      	cmp	r0, r3
 8003ea4:	bfb8      	it	lt
 8003ea6:	4618      	movlt	r0, r3
 8003ea8:	e7a6      	b.n	8003df8 <_printf_i+0x160>
 8003eaa:	2301      	movs	r3, #1
 8003eac:	4632      	mov	r2, r6
 8003eae:	4649      	mov	r1, r9
 8003eb0:	4640      	mov	r0, r8
 8003eb2:	47d0      	blx	sl
 8003eb4:	3001      	adds	r0, #1
 8003eb6:	d09d      	beq.n	8003df4 <_printf_i+0x15c>
 8003eb8:	3501      	adds	r5, #1
 8003eba:	68e3      	ldr	r3, [r4, #12]
 8003ebc:	9903      	ldr	r1, [sp, #12]
 8003ebe:	1a5b      	subs	r3, r3, r1
 8003ec0:	42ab      	cmp	r3, r5
 8003ec2:	dcf2      	bgt.n	8003eaa <_printf_i+0x212>
 8003ec4:	e7eb      	b.n	8003e9e <_printf_i+0x206>
 8003ec6:	2500      	movs	r5, #0
 8003ec8:	f104 0619 	add.w	r6, r4, #25
 8003ecc:	e7f5      	b.n	8003eba <_printf_i+0x222>
 8003ece:	bf00      	nop
 8003ed0:	08004294 	.word	0x08004294
 8003ed4:	080042a5 	.word	0x080042a5

08003ed8 <__sflush_r>:
 8003ed8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003edc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ee0:	0716      	lsls	r6, r2, #28
 8003ee2:	4605      	mov	r5, r0
 8003ee4:	460c      	mov	r4, r1
 8003ee6:	d454      	bmi.n	8003f92 <__sflush_r+0xba>
 8003ee8:	684b      	ldr	r3, [r1, #4]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	dc02      	bgt.n	8003ef4 <__sflush_r+0x1c>
 8003eee:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	dd48      	ble.n	8003f86 <__sflush_r+0xae>
 8003ef4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003ef6:	2e00      	cmp	r6, #0
 8003ef8:	d045      	beq.n	8003f86 <__sflush_r+0xae>
 8003efa:	2300      	movs	r3, #0
 8003efc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003f00:	682f      	ldr	r7, [r5, #0]
 8003f02:	6a21      	ldr	r1, [r4, #32]
 8003f04:	602b      	str	r3, [r5, #0]
 8003f06:	d030      	beq.n	8003f6a <__sflush_r+0x92>
 8003f08:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003f0a:	89a3      	ldrh	r3, [r4, #12]
 8003f0c:	0759      	lsls	r1, r3, #29
 8003f0e:	d505      	bpl.n	8003f1c <__sflush_r+0x44>
 8003f10:	6863      	ldr	r3, [r4, #4]
 8003f12:	1ad2      	subs	r2, r2, r3
 8003f14:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003f16:	b10b      	cbz	r3, 8003f1c <__sflush_r+0x44>
 8003f18:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003f1a:	1ad2      	subs	r2, r2, r3
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003f20:	6a21      	ldr	r1, [r4, #32]
 8003f22:	4628      	mov	r0, r5
 8003f24:	47b0      	blx	r6
 8003f26:	1c43      	adds	r3, r0, #1
 8003f28:	89a3      	ldrh	r3, [r4, #12]
 8003f2a:	d106      	bne.n	8003f3a <__sflush_r+0x62>
 8003f2c:	6829      	ldr	r1, [r5, #0]
 8003f2e:	291d      	cmp	r1, #29
 8003f30:	d82b      	bhi.n	8003f8a <__sflush_r+0xb2>
 8003f32:	4a2a      	ldr	r2, [pc, #168]	@ (8003fdc <__sflush_r+0x104>)
 8003f34:	410a      	asrs	r2, r1
 8003f36:	07d6      	lsls	r6, r2, #31
 8003f38:	d427      	bmi.n	8003f8a <__sflush_r+0xb2>
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	6062      	str	r2, [r4, #4]
 8003f3e:	04d9      	lsls	r1, r3, #19
 8003f40:	6922      	ldr	r2, [r4, #16]
 8003f42:	6022      	str	r2, [r4, #0]
 8003f44:	d504      	bpl.n	8003f50 <__sflush_r+0x78>
 8003f46:	1c42      	adds	r2, r0, #1
 8003f48:	d101      	bne.n	8003f4e <__sflush_r+0x76>
 8003f4a:	682b      	ldr	r3, [r5, #0]
 8003f4c:	b903      	cbnz	r3, 8003f50 <__sflush_r+0x78>
 8003f4e:	6560      	str	r0, [r4, #84]	@ 0x54
 8003f50:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003f52:	602f      	str	r7, [r5, #0]
 8003f54:	b1b9      	cbz	r1, 8003f86 <__sflush_r+0xae>
 8003f56:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003f5a:	4299      	cmp	r1, r3
 8003f5c:	d002      	beq.n	8003f64 <__sflush_r+0x8c>
 8003f5e:	4628      	mov	r0, r5
 8003f60:	f7ff fca0 	bl	80038a4 <_free_r>
 8003f64:	2300      	movs	r3, #0
 8003f66:	6363      	str	r3, [r4, #52]	@ 0x34
 8003f68:	e00d      	b.n	8003f86 <__sflush_r+0xae>
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	4628      	mov	r0, r5
 8003f6e:	47b0      	blx	r6
 8003f70:	4602      	mov	r2, r0
 8003f72:	1c50      	adds	r0, r2, #1
 8003f74:	d1c9      	bne.n	8003f0a <__sflush_r+0x32>
 8003f76:	682b      	ldr	r3, [r5, #0]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d0c6      	beq.n	8003f0a <__sflush_r+0x32>
 8003f7c:	2b1d      	cmp	r3, #29
 8003f7e:	d001      	beq.n	8003f84 <__sflush_r+0xac>
 8003f80:	2b16      	cmp	r3, #22
 8003f82:	d11e      	bne.n	8003fc2 <__sflush_r+0xea>
 8003f84:	602f      	str	r7, [r5, #0]
 8003f86:	2000      	movs	r0, #0
 8003f88:	e022      	b.n	8003fd0 <__sflush_r+0xf8>
 8003f8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003f8e:	b21b      	sxth	r3, r3
 8003f90:	e01b      	b.n	8003fca <__sflush_r+0xf2>
 8003f92:	690f      	ldr	r7, [r1, #16]
 8003f94:	2f00      	cmp	r7, #0
 8003f96:	d0f6      	beq.n	8003f86 <__sflush_r+0xae>
 8003f98:	0793      	lsls	r3, r2, #30
 8003f9a:	680e      	ldr	r6, [r1, #0]
 8003f9c:	bf08      	it	eq
 8003f9e:	694b      	ldreq	r3, [r1, #20]
 8003fa0:	600f      	str	r7, [r1, #0]
 8003fa2:	bf18      	it	ne
 8003fa4:	2300      	movne	r3, #0
 8003fa6:	eba6 0807 	sub.w	r8, r6, r7
 8003faa:	608b      	str	r3, [r1, #8]
 8003fac:	f1b8 0f00 	cmp.w	r8, #0
 8003fb0:	dde9      	ble.n	8003f86 <__sflush_r+0xae>
 8003fb2:	6a21      	ldr	r1, [r4, #32]
 8003fb4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003fb6:	4643      	mov	r3, r8
 8003fb8:	463a      	mov	r2, r7
 8003fba:	4628      	mov	r0, r5
 8003fbc:	47b0      	blx	r6
 8003fbe:	2800      	cmp	r0, #0
 8003fc0:	dc08      	bgt.n	8003fd4 <__sflush_r+0xfc>
 8003fc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003fc6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003fca:	81a3      	strh	r3, [r4, #12]
 8003fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8003fd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003fd4:	4407      	add	r7, r0
 8003fd6:	eba8 0800 	sub.w	r8, r8, r0
 8003fda:	e7e7      	b.n	8003fac <__sflush_r+0xd4>
 8003fdc:	dfbffffe 	.word	0xdfbffffe

08003fe0 <_fflush_r>:
 8003fe0:	b538      	push	{r3, r4, r5, lr}
 8003fe2:	690b      	ldr	r3, [r1, #16]
 8003fe4:	4605      	mov	r5, r0
 8003fe6:	460c      	mov	r4, r1
 8003fe8:	b913      	cbnz	r3, 8003ff0 <_fflush_r+0x10>
 8003fea:	2500      	movs	r5, #0
 8003fec:	4628      	mov	r0, r5
 8003fee:	bd38      	pop	{r3, r4, r5, pc}
 8003ff0:	b118      	cbz	r0, 8003ffa <_fflush_r+0x1a>
 8003ff2:	6a03      	ldr	r3, [r0, #32]
 8003ff4:	b90b      	cbnz	r3, 8003ffa <_fflush_r+0x1a>
 8003ff6:	f7ff fb3d 	bl	8003674 <__sinit>
 8003ffa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d0f3      	beq.n	8003fea <_fflush_r+0xa>
 8004002:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004004:	07d0      	lsls	r0, r2, #31
 8004006:	d404      	bmi.n	8004012 <_fflush_r+0x32>
 8004008:	0599      	lsls	r1, r3, #22
 800400a:	d402      	bmi.n	8004012 <_fflush_r+0x32>
 800400c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800400e:	f7ff fc46 	bl	800389e <__retarget_lock_acquire_recursive>
 8004012:	4628      	mov	r0, r5
 8004014:	4621      	mov	r1, r4
 8004016:	f7ff ff5f 	bl	8003ed8 <__sflush_r>
 800401a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800401c:	07da      	lsls	r2, r3, #31
 800401e:	4605      	mov	r5, r0
 8004020:	d4e4      	bmi.n	8003fec <_fflush_r+0xc>
 8004022:	89a3      	ldrh	r3, [r4, #12]
 8004024:	059b      	lsls	r3, r3, #22
 8004026:	d4e1      	bmi.n	8003fec <_fflush_r+0xc>
 8004028:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800402a:	f7ff fc39 	bl	80038a0 <__retarget_lock_release_recursive>
 800402e:	e7dd      	b.n	8003fec <_fflush_r+0xc>

08004030 <__swbuf_r>:
 8004030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004032:	460e      	mov	r6, r1
 8004034:	4614      	mov	r4, r2
 8004036:	4605      	mov	r5, r0
 8004038:	b118      	cbz	r0, 8004042 <__swbuf_r+0x12>
 800403a:	6a03      	ldr	r3, [r0, #32]
 800403c:	b90b      	cbnz	r3, 8004042 <__swbuf_r+0x12>
 800403e:	f7ff fb19 	bl	8003674 <__sinit>
 8004042:	69a3      	ldr	r3, [r4, #24]
 8004044:	60a3      	str	r3, [r4, #8]
 8004046:	89a3      	ldrh	r3, [r4, #12]
 8004048:	071a      	lsls	r2, r3, #28
 800404a:	d501      	bpl.n	8004050 <__swbuf_r+0x20>
 800404c:	6923      	ldr	r3, [r4, #16]
 800404e:	b943      	cbnz	r3, 8004062 <__swbuf_r+0x32>
 8004050:	4621      	mov	r1, r4
 8004052:	4628      	mov	r0, r5
 8004054:	f000 f82a 	bl	80040ac <__swsetup_r>
 8004058:	b118      	cbz	r0, 8004062 <__swbuf_r+0x32>
 800405a:	f04f 37ff 	mov.w	r7, #4294967295
 800405e:	4638      	mov	r0, r7
 8004060:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004062:	6823      	ldr	r3, [r4, #0]
 8004064:	6922      	ldr	r2, [r4, #16]
 8004066:	1a98      	subs	r0, r3, r2
 8004068:	6963      	ldr	r3, [r4, #20]
 800406a:	b2f6      	uxtb	r6, r6
 800406c:	4283      	cmp	r3, r0
 800406e:	4637      	mov	r7, r6
 8004070:	dc05      	bgt.n	800407e <__swbuf_r+0x4e>
 8004072:	4621      	mov	r1, r4
 8004074:	4628      	mov	r0, r5
 8004076:	f7ff ffb3 	bl	8003fe0 <_fflush_r>
 800407a:	2800      	cmp	r0, #0
 800407c:	d1ed      	bne.n	800405a <__swbuf_r+0x2a>
 800407e:	68a3      	ldr	r3, [r4, #8]
 8004080:	3b01      	subs	r3, #1
 8004082:	60a3      	str	r3, [r4, #8]
 8004084:	6823      	ldr	r3, [r4, #0]
 8004086:	1c5a      	adds	r2, r3, #1
 8004088:	6022      	str	r2, [r4, #0]
 800408a:	701e      	strb	r6, [r3, #0]
 800408c:	6962      	ldr	r2, [r4, #20]
 800408e:	1c43      	adds	r3, r0, #1
 8004090:	429a      	cmp	r2, r3
 8004092:	d004      	beq.n	800409e <__swbuf_r+0x6e>
 8004094:	89a3      	ldrh	r3, [r4, #12]
 8004096:	07db      	lsls	r3, r3, #31
 8004098:	d5e1      	bpl.n	800405e <__swbuf_r+0x2e>
 800409a:	2e0a      	cmp	r6, #10
 800409c:	d1df      	bne.n	800405e <__swbuf_r+0x2e>
 800409e:	4621      	mov	r1, r4
 80040a0:	4628      	mov	r0, r5
 80040a2:	f7ff ff9d 	bl	8003fe0 <_fflush_r>
 80040a6:	2800      	cmp	r0, #0
 80040a8:	d0d9      	beq.n	800405e <__swbuf_r+0x2e>
 80040aa:	e7d6      	b.n	800405a <__swbuf_r+0x2a>

080040ac <__swsetup_r>:
 80040ac:	b538      	push	{r3, r4, r5, lr}
 80040ae:	4b29      	ldr	r3, [pc, #164]	@ (8004154 <__swsetup_r+0xa8>)
 80040b0:	4605      	mov	r5, r0
 80040b2:	6818      	ldr	r0, [r3, #0]
 80040b4:	460c      	mov	r4, r1
 80040b6:	b118      	cbz	r0, 80040c0 <__swsetup_r+0x14>
 80040b8:	6a03      	ldr	r3, [r0, #32]
 80040ba:	b90b      	cbnz	r3, 80040c0 <__swsetup_r+0x14>
 80040bc:	f7ff fada 	bl	8003674 <__sinit>
 80040c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80040c4:	0719      	lsls	r1, r3, #28
 80040c6:	d422      	bmi.n	800410e <__swsetup_r+0x62>
 80040c8:	06da      	lsls	r2, r3, #27
 80040ca:	d407      	bmi.n	80040dc <__swsetup_r+0x30>
 80040cc:	2209      	movs	r2, #9
 80040ce:	602a      	str	r2, [r5, #0]
 80040d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80040d4:	81a3      	strh	r3, [r4, #12]
 80040d6:	f04f 30ff 	mov.w	r0, #4294967295
 80040da:	e033      	b.n	8004144 <__swsetup_r+0x98>
 80040dc:	0758      	lsls	r0, r3, #29
 80040de:	d512      	bpl.n	8004106 <__swsetup_r+0x5a>
 80040e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80040e2:	b141      	cbz	r1, 80040f6 <__swsetup_r+0x4a>
 80040e4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80040e8:	4299      	cmp	r1, r3
 80040ea:	d002      	beq.n	80040f2 <__swsetup_r+0x46>
 80040ec:	4628      	mov	r0, r5
 80040ee:	f7ff fbd9 	bl	80038a4 <_free_r>
 80040f2:	2300      	movs	r3, #0
 80040f4:	6363      	str	r3, [r4, #52]	@ 0x34
 80040f6:	89a3      	ldrh	r3, [r4, #12]
 80040f8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80040fc:	81a3      	strh	r3, [r4, #12]
 80040fe:	2300      	movs	r3, #0
 8004100:	6063      	str	r3, [r4, #4]
 8004102:	6923      	ldr	r3, [r4, #16]
 8004104:	6023      	str	r3, [r4, #0]
 8004106:	89a3      	ldrh	r3, [r4, #12]
 8004108:	f043 0308 	orr.w	r3, r3, #8
 800410c:	81a3      	strh	r3, [r4, #12]
 800410e:	6923      	ldr	r3, [r4, #16]
 8004110:	b94b      	cbnz	r3, 8004126 <__swsetup_r+0x7a>
 8004112:	89a3      	ldrh	r3, [r4, #12]
 8004114:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004118:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800411c:	d003      	beq.n	8004126 <__swsetup_r+0x7a>
 800411e:	4621      	mov	r1, r4
 8004120:	4628      	mov	r0, r5
 8004122:	f000 f83f 	bl	80041a4 <__smakebuf_r>
 8004126:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800412a:	f013 0201 	ands.w	r2, r3, #1
 800412e:	d00a      	beq.n	8004146 <__swsetup_r+0x9a>
 8004130:	2200      	movs	r2, #0
 8004132:	60a2      	str	r2, [r4, #8]
 8004134:	6962      	ldr	r2, [r4, #20]
 8004136:	4252      	negs	r2, r2
 8004138:	61a2      	str	r2, [r4, #24]
 800413a:	6922      	ldr	r2, [r4, #16]
 800413c:	b942      	cbnz	r2, 8004150 <__swsetup_r+0xa4>
 800413e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004142:	d1c5      	bne.n	80040d0 <__swsetup_r+0x24>
 8004144:	bd38      	pop	{r3, r4, r5, pc}
 8004146:	0799      	lsls	r1, r3, #30
 8004148:	bf58      	it	pl
 800414a:	6962      	ldrpl	r2, [r4, #20]
 800414c:	60a2      	str	r2, [r4, #8]
 800414e:	e7f4      	b.n	800413a <__swsetup_r+0x8e>
 8004150:	2000      	movs	r0, #0
 8004152:	e7f7      	b.n	8004144 <__swsetup_r+0x98>
 8004154:	20000038 	.word	0x20000038

08004158 <__swhatbuf_r>:
 8004158:	b570      	push	{r4, r5, r6, lr}
 800415a:	460c      	mov	r4, r1
 800415c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004160:	2900      	cmp	r1, #0
 8004162:	b096      	sub	sp, #88	@ 0x58
 8004164:	4615      	mov	r5, r2
 8004166:	461e      	mov	r6, r3
 8004168:	da0d      	bge.n	8004186 <__swhatbuf_r+0x2e>
 800416a:	89a3      	ldrh	r3, [r4, #12]
 800416c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004170:	f04f 0100 	mov.w	r1, #0
 8004174:	bf14      	ite	ne
 8004176:	2340      	movne	r3, #64	@ 0x40
 8004178:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800417c:	2000      	movs	r0, #0
 800417e:	6031      	str	r1, [r6, #0]
 8004180:	602b      	str	r3, [r5, #0]
 8004182:	b016      	add	sp, #88	@ 0x58
 8004184:	bd70      	pop	{r4, r5, r6, pc}
 8004186:	466a      	mov	r2, sp
 8004188:	f000 f848 	bl	800421c <_fstat_r>
 800418c:	2800      	cmp	r0, #0
 800418e:	dbec      	blt.n	800416a <__swhatbuf_r+0x12>
 8004190:	9901      	ldr	r1, [sp, #4]
 8004192:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004196:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800419a:	4259      	negs	r1, r3
 800419c:	4159      	adcs	r1, r3
 800419e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80041a2:	e7eb      	b.n	800417c <__swhatbuf_r+0x24>

080041a4 <__smakebuf_r>:
 80041a4:	898b      	ldrh	r3, [r1, #12]
 80041a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80041a8:	079d      	lsls	r5, r3, #30
 80041aa:	4606      	mov	r6, r0
 80041ac:	460c      	mov	r4, r1
 80041ae:	d507      	bpl.n	80041c0 <__smakebuf_r+0x1c>
 80041b0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80041b4:	6023      	str	r3, [r4, #0]
 80041b6:	6123      	str	r3, [r4, #16]
 80041b8:	2301      	movs	r3, #1
 80041ba:	6163      	str	r3, [r4, #20]
 80041bc:	b003      	add	sp, #12
 80041be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041c0:	ab01      	add	r3, sp, #4
 80041c2:	466a      	mov	r2, sp
 80041c4:	f7ff ffc8 	bl	8004158 <__swhatbuf_r>
 80041c8:	9f00      	ldr	r7, [sp, #0]
 80041ca:	4605      	mov	r5, r0
 80041cc:	4639      	mov	r1, r7
 80041ce:	4630      	mov	r0, r6
 80041d0:	f7ff f938 	bl	8003444 <_malloc_r>
 80041d4:	b948      	cbnz	r0, 80041ea <__smakebuf_r+0x46>
 80041d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80041da:	059a      	lsls	r2, r3, #22
 80041dc:	d4ee      	bmi.n	80041bc <__smakebuf_r+0x18>
 80041de:	f023 0303 	bic.w	r3, r3, #3
 80041e2:	f043 0302 	orr.w	r3, r3, #2
 80041e6:	81a3      	strh	r3, [r4, #12]
 80041e8:	e7e2      	b.n	80041b0 <__smakebuf_r+0xc>
 80041ea:	89a3      	ldrh	r3, [r4, #12]
 80041ec:	6020      	str	r0, [r4, #0]
 80041ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80041f2:	81a3      	strh	r3, [r4, #12]
 80041f4:	9b01      	ldr	r3, [sp, #4]
 80041f6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80041fa:	b15b      	cbz	r3, 8004214 <__smakebuf_r+0x70>
 80041fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004200:	4630      	mov	r0, r6
 8004202:	f000 f81d 	bl	8004240 <_isatty_r>
 8004206:	b128      	cbz	r0, 8004214 <__smakebuf_r+0x70>
 8004208:	89a3      	ldrh	r3, [r4, #12]
 800420a:	f023 0303 	bic.w	r3, r3, #3
 800420e:	f043 0301 	orr.w	r3, r3, #1
 8004212:	81a3      	strh	r3, [r4, #12]
 8004214:	89a3      	ldrh	r3, [r4, #12]
 8004216:	431d      	orrs	r5, r3
 8004218:	81a5      	strh	r5, [r4, #12]
 800421a:	e7cf      	b.n	80041bc <__smakebuf_r+0x18>

0800421c <_fstat_r>:
 800421c:	b538      	push	{r3, r4, r5, lr}
 800421e:	4d07      	ldr	r5, [pc, #28]	@ (800423c <_fstat_r+0x20>)
 8004220:	2300      	movs	r3, #0
 8004222:	4604      	mov	r4, r0
 8004224:	4608      	mov	r0, r1
 8004226:	4611      	mov	r1, r2
 8004228:	602b      	str	r3, [r5, #0]
 800422a:	f7fc faf6 	bl	800081a <_fstat>
 800422e:	1c43      	adds	r3, r0, #1
 8004230:	d102      	bne.n	8004238 <_fstat_r+0x1c>
 8004232:	682b      	ldr	r3, [r5, #0]
 8004234:	b103      	cbz	r3, 8004238 <_fstat_r+0x1c>
 8004236:	6023      	str	r3, [r4, #0]
 8004238:	bd38      	pop	{r3, r4, r5, pc}
 800423a:	bf00      	nop
 800423c:	200005e4 	.word	0x200005e4

08004240 <_isatty_r>:
 8004240:	b538      	push	{r3, r4, r5, lr}
 8004242:	4d06      	ldr	r5, [pc, #24]	@ (800425c <_isatty_r+0x1c>)
 8004244:	2300      	movs	r3, #0
 8004246:	4604      	mov	r4, r0
 8004248:	4608      	mov	r0, r1
 800424a:	602b      	str	r3, [r5, #0]
 800424c:	f7fc faf5 	bl	800083a <_isatty>
 8004250:	1c43      	adds	r3, r0, #1
 8004252:	d102      	bne.n	800425a <_isatty_r+0x1a>
 8004254:	682b      	ldr	r3, [r5, #0]
 8004256:	b103      	cbz	r3, 800425a <_isatty_r+0x1a>
 8004258:	6023      	str	r3, [r4, #0]
 800425a:	bd38      	pop	{r3, r4, r5, pc}
 800425c:	200005e4 	.word	0x200005e4

08004260 <_init>:
 8004260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004262:	bf00      	nop
 8004264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004266:	bc08      	pop	{r3}
 8004268:	469e      	mov	lr, r3
 800426a:	4770      	bx	lr

0800426c <_fini>:
 800426c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800426e:	bf00      	nop
 8004270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004272:	bc08      	pop	{r3}
 8004274:	469e      	mov	lr, r3
 8004276:	4770      	bx	lr
